
A1200HIDToDB9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e94  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009044  08009044  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08009044  08009044  00019044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800904c  0800904c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800904c  0800904c  0001904c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009050  08009050  00019050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08009054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000084c  2000009c  080090f0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  200008e8  080090f0  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e5e  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004857  00000000  00000000  00041f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00046788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  000478f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b67b  00000000  00000000  000488a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a9d  00000000  00000000  00063f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009357d  00000000  00000000  0007c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ff3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004820  00000000  00000000  0010ff90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000009c 	.word	0x2000009c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009010 	.word	0x08009010

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000a0 	.word	0x200000a0
 80001d0:	08009010 	.word	0x08009010

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
 80004e6:	4b31      	ldr	r3, [pc, #196]	; (80005ac <MX_GPIO_Init+0xe0>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a30      	ldr	r2, [pc, #192]	; (80005ac <MX_GPIO_Init+0xe0>)
 80004ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <MX_GPIO_Init+0xe0>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a29      	ldr	r2, [pc, #164]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a22      	ldr	r2, [pc, #136]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_GPIO_Init+0xe0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_GPIO_Init+0xe0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a1b      	ldr	r2, [pc, #108]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_GPIO_Init+0xe0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|RB_Pin|LB_Pin, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	f641 0101 	movw	r1, #6145	; 0x1801
 8000558:	4815      	ldr	r0, [pc, #84]	; (80005b0 <MX_GPIO_Init+0xe4>)
 800055a:	f001 f953 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MB_Pin|RHQ_Pin|LVQ_Pin|BH_Pin
 800055e:	2201      	movs	r2, #1
 8000560:	21f8      	movs	r1, #248	; 0xf8
 8000562:	4814      	ldr	r0, [pc, #80]	; (80005b4 <MX_GPIO_Init+0xe8>)
 8000564:	f001 f94e 	bl	8001804 <HAL_GPIO_WritePin>
                          |FV_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|RB_Pin|LB_Pin;
 8000568:	f641 0301 	movw	r3, #6145	; 0x1801
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <MX_GPIO_Init+0xe4>)
 8000582:	f000 ffbb 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = MB_Pin|RHQ_Pin|LVQ_Pin|BH_Pin
 8000586:	23f8      	movs	r3, #248	; 0xf8
 8000588:	617b      	str	r3, [r7, #20]
                          |FV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_GPIO_Init+0xe8>)
 800059e:	f000 ffad 	bl	80014fc <HAL_GPIO_Init>

}
 80005a2:	bf00      	nop
 80005a4:	3728      	adds	r7, #40	; 0x28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020800 	.word	0x40020800
 80005b4:	40020400 	.word	0x40020400

080005b8 <ProcessJoystick>:
#include "joystick.h"

void ProcessJoystick() {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0

	if (Appli_state == APPLICATION_READY) {
 80005be:	4b49      	ldr	r3, [pc, #292]	; (80006e4 <ProcessJoystick+0x12c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	f040 808a 	bne.w	80006dc <ProcessJoystick+0x124>
		HID_TypeTypeDef device_type = USBH_HID_GetDeviceType(&hUsbHostFS);
 80005c8:	4847      	ldr	r0, [pc, #284]	; (80006e8 <ProcessJoystick+0x130>)
 80005ca:	f005 fc17 	bl	8005dfc <USBH_HID_GetDeviceType>
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]

		if (device_type == HID_UNKNOWN) {
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2bff      	cmp	r3, #255	; 0xff
 80005d6:	f040 8081 	bne.w	80006dc <ProcessJoystick+0x124>

			joymap = USBH_HID_GetGamepadInfo(&hUsbHostFS);
 80005da:	4843      	ldr	r0, [pc, #268]	; (80006e8 <ProcessJoystick+0x130>)
 80005dc:	f005 fdcc 	bl	8006178 <USBH_HID_GetGamepadInfo>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a42      	ldr	r2, [pc, #264]	; (80006ec <ProcessJoystick+0x134>)
 80005e4:	6013      	str	r3, [r2, #0]

			if (joymap != NULL) {
 80005e6:	4b41      	ldr	r3, [pc, #260]	; (80006ec <ProcessJoystick+0x134>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d076      	beq.n	80006dc <ProcessJoystick+0x124>

				HAL_GPIO_WritePin(RHQ_GPIO_Port, RHQ_Pin, !(joymap->gamepad_data & 0x1));
 80005ee:	4b3f      	ldr	r3, [pc, #252]	; (80006ec <ProcessJoystick+0x134>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bf0c      	ite	eq
 80005fc:	2301      	moveq	r3, #1
 80005fe:	2300      	movne	r3, #0
 8000600:	b2db      	uxtb	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	2110      	movs	r1, #16
 8000606:	483a      	ldr	r0, [pc, #232]	; (80006f0 <ProcessJoystick+0x138>)
 8000608:	f001 f8fc 	bl	8001804 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LVQ_GPIO_Port, LVQ_Pin, !(joymap->gamepad_data >> 1 & 0x1));
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <ProcessJoystick+0x134>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	085b      	lsrs	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	2b00      	cmp	r3, #0
 800061c:	bf0c      	ite	eq
 800061e:	2301      	moveq	r3, #1
 8000620:	2300      	movne	r3, #0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	2120      	movs	r1, #32
 8000628:	4831      	ldr	r0, [pc, #196]	; (80006f0 <ProcessJoystick+0x138>)
 800062a:	f001 f8eb 	bl	8001804 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, !(joymap->gamepad_data >> 2 & 0x1));
 800062e:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <ProcessJoystick+0x134>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	bf0c      	ite	eq
 8000640:	2301      	moveq	r3, #1
 8000642:	2300      	movne	r3, #0
 8000644:	b2db      	uxtb	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	4829      	ldr	r0, [pc, #164]	; (80006f0 <ProcessJoystick+0x138>)
 800064c:	f001 f8da 	bl	8001804 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(FV_GPIO_Port, FV_Pin, !(joymap->gamepad_data >> 3 & 0x1));
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <ProcessJoystick+0x134>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf0c      	ite	eq
 8000662:	2301      	moveq	r3, #1
 8000664:	2300      	movne	r3, #0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	4820      	ldr	r0, [pc, #128]	; (80006f0 <ProcessJoystick+0x138>)
 800066e:	f001 f8c9 	bl	8001804 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LB_GPIO_Port, LB_Pin, !(joymap->gamepad_data >> 4 & 0x1));
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <ProcessJoystick+0x134>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	091b      	lsrs	r3, r3, #4
 800067a:	b2db      	uxtb	r3, r3
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf0c      	ite	eq
 8000684:	2301      	moveq	r3, #1
 8000686:	2300      	movne	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	461a      	mov	r2, r3
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	4818      	ldr	r0, [pc, #96]	; (80006f4 <ProcessJoystick+0x13c>)
 8000692:	f001 f8b7 	bl	8001804 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RB_GPIO_Port, RB_Pin, !(joymap->gamepad_data >> 5 & 0x1));
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <ProcessJoystick+0x134>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	095b      	lsrs	r3, r3, #5
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf0c      	ite	eq
 80006a8:	2301      	moveq	r3, #1
 80006aa:	2300      	movne	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b4:	480f      	ldr	r0, [pc, #60]	; (80006f4 <ProcessJoystick+0x13c>)
 80006b6:	f001 f8a5 	bl	8001804 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MB_GPIO_Port, MB_Pin, !(joymap->gamepad_data >> 6 & 0x1));
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <ProcessJoystick+0x134>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	099b      	lsrs	r3, r3, #6
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf0c      	ite	eq
 80006cc:	2301      	moveq	r3, #1
 80006ce:	2300      	movne	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	2108      	movs	r1, #8
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <ProcessJoystick+0x138>)
 80006d8:	f001 f894 	bl	8001804 <HAL_GPIO_WritePin>
			}
		}
	}
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000c8 	.word	0x200000c8
 80006e8:	200001f8 	.word	0x200001f8
 80006ec:	200000d4 	.word	0x200000d4
 80006f0:	40020400 	.word	0x40020400
 80006f4:	40020800 	.word	0x40020800

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 fdb6 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f81a 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f7ff fee2 	bl	80004cc <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000708:	f008 f89a 	bl	8008840 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800070c:	f000 fca4 	bl	8001058 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000710:	f000 fcf0 	bl	80010f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2) ;
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <main+0x38>)
 8000716:	f003 fae3 	bl	8003ce0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3) ;
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <main+0x3c>)
 800071c:	f003 fae0 	bl	8003ce0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	MX_USB_HOST_Process();
 8000720:	f008 f8b4 	bl	800888c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
   ProcessMouse();
 8000724:	f000 f962 	bl	80009ec <ProcessMouse>
   ProcessJoystick();
 8000728:	f7ff ff46 	bl	80005b8 <ProcessJoystick>
	MX_USB_HOST_Process();
 800072c:	e7f8      	b.n	8000720 <main+0x28>
 800072e:	bf00      	nop
 8000730:	20000170 	.word	0x20000170
 8000734:	20000128 	.word	0x20000128

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f008 fb92 	bl	8008e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a27      	ldr	r2, [pc, #156]	; (8000804 <SystemClock_Config+0xcc>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <SystemClock_Config+0xd0>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007b0:	23a8      	movs	r3, #168	; 0xa8
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fda9 	bl	8003318 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007cc:	f000 f840 	bl	8000850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2102      	movs	r1, #2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 f80d 	bl	800380c <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f8:	f000 f82a 	bl	8000850 <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3750      	adds	r7, #80	; 0x50
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d101      	bne.n	8000822 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081e:	f000 fd47 	bl	80012b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800082a:	d101      	bne.n	8000830 <HAL_TIM_PeriodElapsedCallback+0x24>
   ProcessX_IRQ();
 800082c:	f000 f9d8 	bl	8000be0 <ProcessX_IRQ>
  }

  if (htim->Instance == TIM3) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a05      	ldr	r2, [pc, #20]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d101      	bne.n	800083e <HAL_TIM_PeriodElapsedCallback+0x32>
	  ProcessY_IRQ();
 800083a:	f000 fa5b 	bl	8000cf4 <ProcessY_IRQ>
  }

  /* USER CODE END Callback 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40014400 	.word	0x40014400
 800084c:	40000400 	.word	0x40000400

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <processMouseMovement>:
#include "mouse.h"

ApplicationTypeDef aState;

uint8_t processMouseMovement(int8_t movementUnits, uint8_t axis, int limitRate,
		int dpiDivide) {
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60ba      	str	r2, [r7, #8]
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4603      	mov	r3, r0
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	460b      	mov	r3, r1
 800086c:	73bb      	strb	r3, [r7, #14]
	uint16_t timerTopValue = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	82fb      	strh	r3, [r7, #22]

	// Set the mouse movement direction and record the movement units
	if (movementUnits > 0) {
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	2b00      	cmp	r3, #0
 8000878:	dd2b      	ble.n	80008d2 <processMouseMovement+0x76>
		// Moving in the positive direction

		// Apply DPI limiting if required
		if (dpiDivide) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00b      	beq.n	8000898 <processMouseMovement+0x3c>
			movementUnits /= DPI_DIVIDER;
 8000880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000884:	0fda      	lsrs	r2, r3, #31
 8000886:	4413      	add	r3, r2
 8000888:	105b      	asrs	r3, r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
			if (movementUnits < 1)
 800088c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000890:	2b00      	cmp	r3, #0
 8000892:	dc01      	bgt.n	8000898 <processMouseMovement+0x3c>
				movementUnits = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	73fb      	strb	r3, [r7, #15]
		}

		// Add the movement units to the quadrature output buffer
		if (axis == MOUSEX)
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10c      	bne.n	80008b8 <processMouseMovement+0x5c>
			mouseDistanceX += movementUnits;
 800089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b4f      	ldr	r3, [pc, #316]	; (80009e4 <processMouseMovement+0x188>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	4413      	add	r3, r2
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	b21a      	sxth	r2, r3
 80008b2:	4b4c      	ldr	r3, [pc, #304]	; (80009e4 <processMouseMovement+0x188>)
 80008b4:	801a      	strh	r2, [r3, #0]
 80008b6:	e046      	b.n	8000946 <processMouseMovement+0xea>
		else
			mouseDistanceY += movementUnits;
 80008b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	4b4a      	ldr	r3, [pc, #296]	; (80009e8 <processMouseMovement+0x18c>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	4413      	add	r3, r2
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b46      	ldr	r3, [pc, #280]	; (80009e8 <processMouseMovement+0x18c>)
 80008ce:	801a      	strh	r2, [r3, #0]
 80008d0:	e039      	b.n	8000946 <processMouseMovement+0xea>
	} else if (movementUnits < 0) {
 80008d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	da2b      	bge.n	8000932 <processMouseMovement+0xd6>
		// Moving in the negative direction

		// Apply DPI limiting if required
		if (dpiDivide) {
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d00b      	beq.n	80008f8 <processMouseMovement+0x9c>
			movementUnits /= DPI_DIVIDER;
 80008e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e4:	0fda      	lsrs	r2, r3, #31
 80008e6:	4413      	add	r3, r2
 80008e8:	105b      	asrs	r3, r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
			if (movementUnits > -1)
 80008ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db01      	blt.n	80008f8 <processMouseMovement+0x9c>
				movementUnits = -1;
 80008f4:	23ff      	movs	r3, #255	; 0xff
 80008f6:	73fb      	strb	r3, [r7, #15]
		}

		// Add the movement units to the quadrature output buffer
		if (axis == MOUSEX)
 80008f8:	7bbb      	ldrb	r3, [r7, #14]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10c      	bne.n	8000918 <processMouseMovement+0xbc>
			mouseDistanceX += -movementUnits;
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <processMouseMovement+0x188>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	b21b      	sxth	r3, r3
 8000904:	b29a      	uxth	r2, r3
 8000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090a:	b29b      	uxth	r3, r3
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	b29b      	uxth	r3, r3
 8000910:	b21a      	sxth	r2, r3
 8000912:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <processMouseMovement+0x188>)
 8000914:	801a      	strh	r2, [r3, #0]
 8000916:	e016      	b.n	8000946 <processMouseMovement+0xea>
		else
			mouseDistanceY += -movementUnits;
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <processMouseMovement+0x18c>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	b21b      	sxth	r3, r3
 800091e:	b29a      	uxth	r2, r3
 8000920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000924:	b29b      	uxth	r3, r3
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	b29b      	uxth	r3, r3
 800092a:	b21a      	sxth	r2, r3
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <processMouseMovement+0x18c>)
 800092e:	801a      	strh	r2, [r3, #0]
 8000930:	e009      	b.n	8000946 <processMouseMovement+0xea>
	} else {
		if (axis == MOUSEX)
 8000932:	7bbb      	ldrb	r3, [r7, #14]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d103      	bne.n	8000940 <processMouseMovement+0xe4>
			mouseDistanceX = 0;
 8000938:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <processMouseMovement+0x188>)
 800093a:	2200      	movs	r2, #0
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	e002      	b.n	8000946 <processMouseMovement+0xea>
		else
			mouseDistanceY = 0;
 8000940:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <processMouseMovement+0x18c>)
 8000942:	2200      	movs	r2, #0
 8000944:	801a      	strh	r2, [r3, #0]
	}

	// Apply the quadrature output buffer limit
	if (axis == MOUSEX) {
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d10a      	bne.n	8000962 <processMouseMovement+0x106>
		if (mouseDistanceX > Q_BUFFERLIMIT)
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <processMouseMovement+0x188>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	b21b      	sxth	r3, r3
 8000952:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000956:	dd0e      	ble.n	8000976 <processMouseMovement+0x11a>
			mouseDistanceX = Q_BUFFERLIMIT;
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <processMouseMovement+0x188>)
 800095a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800095e:	801a      	strh	r2, [r3, #0]
 8000960:	e009      	b.n	8000976 <processMouseMovement+0x11a>
	} else {
		if (mouseDistanceY > Q_BUFFERLIMIT)
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <processMouseMovement+0x18c>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	b21b      	sxth	r3, r3
 8000968:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800096c:	dd03      	ble.n	8000976 <processMouseMovement+0x11a>
			mouseDistanceY = Q_BUFFERLIMIT;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <processMouseMovement+0x18c>)
 8000970:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000974:	801a      	strh	r2, [r3, #0]
	}

	// Get the current value of the quadrature output buffer
	if (axis == MOUSEX)
 8000976:	7bbb      	ldrb	r3, [r7, #14]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d104      	bne.n	8000986 <processMouseMovement+0x12a>
		timerTopValue = mouseDistanceX;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <processMouseMovement+0x188>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	b21b      	sxth	r3, r3
 8000982:	82fb      	strh	r3, [r7, #22]
 8000984:	e003      	b.n	800098e <processMouseMovement+0x132>
	else
		timerTopValue = mouseDistanceY;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <processMouseMovement+0x18c>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	b21b      	sxth	r3, r3
 800098c:	82fb      	strh	r3, [r7, #22]

	// Range check the quadrature output buffer
	if (timerTopValue > 127)
 800098e:	8afb      	ldrh	r3, [r7, #22]
 8000990:	2b7f      	cmp	r3, #127	; 0x7f
 8000992:	d901      	bls.n	8000998 <processMouseMovement+0x13c>
		timerTopValue = 127;
 8000994:	237f      	movs	r3, #127	; 0x7f
 8000996:	82fb      	strh	r3, [r7, #22]
	//
	// So:
	//   timerTopValue = 10000 / timerTopValue; // i.e. 1,000,000 / (timerTopValue * 100)
	//   timerTopValue = timerTopValue / 64;
	//   timerTopValue = timerTopValue - 1;
	if (timerTopValue != 0) {
 8000998:	8afb      	ldrh	r3, [r7, #22]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00c      	beq.n	80009b8 <processMouseMovement+0x15c>
		timerTopValue = ((10000 / timerTopValue) / 64) - 1;
 800099e:	8afb      	ldrh	r3, [r7, #22]
 80009a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80009a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	da00      	bge.n	80009ae <processMouseMovement+0x152>
 80009ac:	333f      	adds	r3, #63	; 0x3f
 80009ae:	119b      	asrs	r3, r3, #6
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	3b01      	subs	r3, #1
 80009b4:	82fb      	strh	r3, [r7, #22]
 80009b6:	e001      	b.n	80009bc <processMouseMovement+0x160>
	} else {
		timerTopValue = 255;
 80009b8:	23ff      	movs	r3, #255	; 0xff
 80009ba:	82fb      	strh	r3, [r7, #22]
	}
	// If the 'Slow' configuration jumper is shorted; apply the quadrature rate limit
	if (limitRate) {
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d008      	beq.n	80009d4 <processMouseMovement+0x178>
		// 666.67 us / (64 * 4) = 2.6 ticks
		//
		// Timer TOP is 0-255, so subtract 1
		// 10.42 ticks - 1 = 9.42 ticks

		uint32_t rateLimit = ((1000000 / Q_RATELIMIT) / 256) - 1;
 80009c2:	2306      	movs	r3, #6
 80009c4:	613b      	str	r3, [r7, #16]

		// If the timerTopValue is less than the rate limit, we output
		// at the maximum allowed rate.  This will cause addition lag that
		// is handled by the quadrature output buffer limit above.
		if (timerTopValue < (uint16_t) rateLimit)
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	8afa      	ldrh	r2, [r7, #22]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d201      	bcs.n	80009d4 <processMouseMovement+0x178>
			timerTopValue = (uint16_t) rateLimit;
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	82fb      	strh	r3, [r7, #22]
	}

	// Return the timer TOP value
	return (uint8_t) timerTopValue;
 80009d4:	8afb      	ldrh	r3, [r7, #22]
 80009d6:	b2db      	uxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	371c      	adds	r7, #28
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	200000bc 	.word	0x200000bc
 80009e8:	200000be 	.word	0x200000be

080009ec <ProcessMouse>:

void ProcessMouse() {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

	if (Appli_state != APPLICATION_READY)
 80009f2:	4b70      	ldr	r3, [pc, #448]	; (8000bb4 <ProcessMouse+0x1c8>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	f040 80d6 	bne.w	8000ba8 <ProcessMouse+0x1bc>
		return;

	if (USBH_HID_GetDeviceType(&hUsbHostFS) != HID_MOUSE)
 80009fc:	486e      	ldr	r0, [pc, #440]	; (8000bb8 <ProcessMouse+0x1cc>)
 80009fe:	f005 f9fd 	bl	8005dfc <USBH_HID_GetDeviceType>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	f040 80d1 	bne.w	8000bac <ProcessMouse+0x1c0>
		return;




	mousemap = USBH_HID_GetMouseInfo(&hUsbHostFS);
 8000a0a:	486b      	ldr	r0, [pc, #428]	; (8000bb8 <ProcessMouse+0x1cc>)
 8000a0c:	f005 ffa6 	bl	800695c <USBH_HID_GetMouseInfo>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4a6a      	ldr	r2, [pc, #424]	; (8000bbc <ProcessMouse+0x1d0>)
 8000a14:	6013      	str	r3, [r2, #0]
	if (mousemap != NULL) {
 8000a16:	4b69      	ldr	r3, [pc, #420]	; (8000bbc <ProcessMouse+0x1d0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 80c7 	beq.w	8000bae <ProcessMouse+0x1c2>
		//
		// X and Y have a range of -127 to +127

		// If the mouse movement changes direction then disregard any remaining
		// movement units in the previous direction.
		if (mousemap->x > 0 && mouseDirectionX == 0) {
 8000a20:	4b66      	ldr	r3, [pc, #408]	; (8000bbc <ProcessMouse+0x1d0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	dd0b      	ble.n	8000a44 <ProcessMouse+0x58>
 8000a2c:	4b64      	ldr	r3, [pc, #400]	; (8000bc0 <ProcessMouse+0x1d4>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d106      	bne.n	8000a44 <ProcessMouse+0x58>
			mouseDistanceX = 0;
 8000a36:	4b63      	ldr	r3, [pc, #396]	; (8000bc4 <ProcessMouse+0x1d8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	801a      	strh	r2, [r3, #0]
			mouseDirectionX = 1;
 8000a3c:	4b60      	ldr	r3, [pc, #384]	; (8000bc0 <ProcessMouse+0x1d4>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	e034      	b.n	8000aae <ProcessMouse+0xc2>
		} else if (mousemap->x < 0 && mouseDirectionX == 1) {
 8000a44:	4b5d      	ldr	r3, [pc, #372]	; (8000bbc <ProcessMouse+0x1d0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	da0b      	bge.n	8000a68 <ProcessMouse+0x7c>
 8000a50:	4b5b      	ldr	r3, [pc, #364]	; (8000bc0 <ProcessMouse+0x1d4>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d106      	bne.n	8000a68 <ProcessMouse+0x7c>
			mouseDistanceX = 0;
 8000a5a:	4b5a      	ldr	r3, [pc, #360]	; (8000bc4 <ProcessMouse+0x1d8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	801a      	strh	r2, [r3, #0]
			mouseDirectionX = 0;
 8000a60:	4b57      	ldr	r3, [pc, #348]	; (8000bc0 <ProcessMouse+0x1d4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	e022      	b.n	8000aae <ProcessMouse+0xc2>
		} else if (mousemap->y > 0 && mouseDirectionY == 0) {
 8000a68:	4b54      	ldr	r3, [pc, #336]	; (8000bbc <ProcessMouse+0x1d0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	dd0b      	ble.n	8000a8c <ProcessMouse+0xa0>
 8000a74:	4b54      	ldr	r3, [pc, #336]	; (8000bc8 <ProcessMouse+0x1dc>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d106      	bne.n	8000a8c <ProcessMouse+0xa0>
			mouseDistanceY = 0;
 8000a7e:	4b53      	ldr	r3, [pc, #332]	; (8000bcc <ProcessMouse+0x1e0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	801a      	strh	r2, [r3, #0]
			mouseDirectionY = 1;
 8000a84:	4b50      	ldr	r3, [pc, #320]	; (8000bc8 <ProcessMouse+0x1dc>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e010      	b.n	8000aae <ProcessMouse+0xc2>
		} else if (mousemap->y < 0 && mouseDirectionY == 1) {
 8000a8c:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <ProcessMouse+0x1d0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	da0a      	bge.n	8000aae <ProcessMouse+0xc2>
 8000a98:	4b4b      	ldr	r3, [pc, #300]	; (8000bc8 <ProcessMouse+0x1dc>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d105      	bne.n	8000aae <ProcessMouse+0xc2>
			mouseDistanceY = 0;
 8000aa2:	4b4a      	ldr	r3, [pc, #296]	; (8000bcc <ProcessMouse+0x1e0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	801a      	strh	r2, [r3, #0]
			mouseDirectionY = 0;
 8000aa8:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <ProcessMouse+0x1dc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]

		// Process mouse X and Y movement -------------------------------------
		//HAL_TIM_Base_Start_IT(&htim2) ;
		//HAL_TIM_Base_Start_IT(&htim3) ;

		int16_t x_val = mousemap->x;
 8000aae:	4b43      	ldr	r3, [pc, #268]	; (8000bbc <ProcessMouse+0x1d0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	80fb      	strh	r3, [r7, #6]
		int16_t y_val = mousemap->y;
 8000ab6:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <ProcessMouse+0x1d0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	885b      	ldrh	r3, [r3, #2]
 8000abc:	80bb      	strh	r3, [r7, #4]

		if (x_val > 0 && x_val < 10) {
 8000abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	dd05      	ble.n	8000ad2 <ProcessMouse+0xe6>
 8000ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aca:	2b09      	cmp	r3, #9
 8000acc:	dc01      	bgt.n	8000ad2 <ProcessMouse+0xe6>
			x_val = +10;
 8000ace:	230a      	movs	r3, #10
 8000ad0:	80fb      	strh	r3, [r7, #6]
		}
		if (x_val < 0 && x_val < -10) {
 8000ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	da07      	bge.n	8000aea <ProcessMouse+0xfe>
 8000ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ade:	f113 0f0a 	cmn.w	r3, #10
 8000ae2:	da02      	bge.n	8000aea <ProcessMouse+0xfe>
			x_val = -10;
 8000ae4:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8000ae8:	80fb      	strh	r3, [r7, #6]
		}

		if (y_val > 0 && y_val < 10) {
 8000aea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	dd05      	ble.n	8000afe <ProcessMouse+0x112>
 8000af2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000af6:	2b09      	cmp	r3, #9
 8000af8:	dc01      	bgt.n	8000afe <ProcessMouse+0x112>
			y_val = +10;
 8000afa:	230a      	movs	r3, #10
 8000afc:	80bb      	strh	r3, [r7, #4]
		}
		if (y_val < 0 && y_val < -10) {
 8000afe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	da07      	bge.n	8000b16 <ProcessMouse+0x12a>
 8000b06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b0a:	f113 0f0a 	cmn.w	r3, #10
 8000b0e:	da02      	bge.n	8000b16 <ProcessMouse+0x12a>
			y_val = -10;
 8000b10:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8000b14:	80bb      	strh	r3, [r7, #4]
		}

		xTimerTop = processMouseMovement(mousemap->x, MOUSEX, 0U, 0U);
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <ProcessMouse+0x1d0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1e:	b258      	sxtb	r0, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	f7ff fe99 	bl	800085c <processMouseMovement>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <ProcessMouse+0x1e4>)
 8000b30:	701a      	strb	r2, [r3, #0]
		yTimerTop = processMouseMovement(mousemap->y, MOUSEY, 0U, 0U);
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <ProcessMouse+0x1d0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b3a:	b258      	sxtb	r0, r3
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2101      	movs	r1, #1
 8000b42:	f7ff fe8b 	bl	800085c <processMouseMovement>
 8000b46:	4603      	mov	r3, r0
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <ProcessMouse+0x1e8>)
 8000b4c:	701a      	strb	r2, [r3, #0]

		// Process mouse buttons ----------------------------------------------

		HAL_GPIO_WritePin(LB_GPIO_Port, LB_Pin, !(mousemap->buttons[0]));
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <ProcessMouse+0x1d0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf0c      	ite	eq
 8000b5a:	2301      	moveq	r3, #1
 8000b5c:	2300      	movne	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b66:	481c      	ldr	r0, [pc, #112]	; (8000bd8 <ProcessMouse+0x1ec>)
 8000b68:	f000 fe4c 	bl	8001804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RB_GPIO_Port, RB_Pin, !(mousemap->buttons[1]));
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <ProcessMouse+0x1d0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf0c      	ite	eq
 8000b78:	2301      	moveq	r3, #1
 8000b7a:	2300      	movne	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b84:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <ProcessMouse+0x1ec>)
 8000b86:	f000 fe3d 	bl	8001804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MB_GPIO_Port, MB_Pin, !(mousemap->buttons[2]));
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <ProcessMouse+0x1d0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf0c      	ite	eq
 8000b96:	2301      	moveq	r3, #1
 8000b98:	2300      	movne	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	480e      	ldr	r0, [pc, #56]	; (8000bdc <ProcessMouse+0x1f0>)
 8000ba2:	f000 fe2f 	bl	8001804 <HAL_GPIO_WritePin>
 8000ba6:	e002      	b.n	8000bae <ProcessMouse+0x1c2>
		return;
 8000ba8:	bf00      	nop
 8000baa:	e000      	b.n	8000bae <ProcessMouse+0x1c2>
		return;
 8000bac:	bf00      	nop
	}
}
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000c8 	.word	0x200000c8
 8000bb8:	200001f8 	.word	0x200001f8
 8000bbc:	200000dc 	.word	0x200000dc
 8000bc0:	200000b8 	.word	0x200000b8
 8000bc4:	200000bc 	.word	0x200000bc
 8000bc8:	200000ba 	.word	0x200000ba
 8000bcc:	200000be 	.word	0x200000be
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000001 	.word	0x20000001
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020400 	.word	0x40020400

08000be0 <ProcessX_IRQ>:

void ProcessX_IRQ() {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

	// Process X output
	if (mouseDistanceX > 0) {
 8000be4:	4b3e      	ldr	r3, [pc, #248]	; (8000ce0 <ProcessX_IRQ+0x100>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	dd63      	ble.n	8000cb6 <ProcessX_IRQ+0xd6>
		// Set the output pins according to the current phase BH RHQ FV LVQ

		if (mouseEncoderPhaseX == 0)
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d104      	bne.n	8000c02 <ProcessX_IRQ+0x22>
			HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, !(1));	// Set X1 to 1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2140      	movs	r1, #64	; 0x40
 8000bfc:	483a      	ldr	r0, [pc, #232]	; (8000ce8 <ProcessX_IRQ+0x108>)
 8000bfe:	f000 fe01 	bl	8001804 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseX == 1)
 8000c02:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d104      	bne.n	8000c16 <ProcessX_IRQ+0x36>
			HAL_GPIO_WritePin(RHQ_GPIO_Port, RHQ_Pin, !(1));	// Set X2 to 1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4835      	ldr	r0, [pc, #212]	; (8000ce8 <ProcessX_IRQ+0x108>)
 8000c12:	f000 fdf7 	bl	8001804 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseX == 2)
 8000c16:	4b33      	ldr	r3, [pc, #204]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d104      	bne.n	8000c2a <ProcessX_IRQ+0x4a>
			HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, !(0));	// Set X1 to 0
 8000c20:	2201      	movs	r2, #1
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	4830      	ldr	r0, [pc, #192]	; (8000ce8 <ProcessX_IRQ+0x108>)
 8000c26:	f000 fded 	bl	8001804 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseX == 3)
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d104      	bne.n	8000c3e <ProcessX_IRQ+0x5e>
			HAL_GPIO_WritePin(RHQ_GPIO_Port, RHQ_Pin, !(0));	// Set X2 to 0
 8000c34:	2201      	movs	r2, #1
 8000c36:	2110      	movs	r1, #16
 8000c38:	482b      	ldr	r0, [pc, #172]	; (8000ce8 <ProcessX_IRQ+0x108>)
 8000c3a:	f000 fde3 	bl	8001804 <HAL_GPIO_WritePin>

		// Change phase
		if (mouseDirectionX == 0)
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <ProcessX_IRQ+0x10c>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d109      	bne.n	8000c5c <ProcessX_IRQ+0x7c>
			mouseEncoderPhaseX--;
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	3b01      	subs	r3, #1
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	b25a      	sxtb	r2, r3
 8000c56:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e008      	b.n	8000c6e <ProcessX_IRQ+0x8e>
		else
			mouseEncoderPhaseX++;
 8000c5c:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	3301      	adds	r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	b25a      	sxtb	r2, r3
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000c6c:	701a      	strb	r2, [r3, #0]

		// Decrement the distance left to move
		mouseDistanceX--;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <ProcessX_IRQ+0x100>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	b21b      	sxth	r3, r3
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	3b01      	subs	r3, #1
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <ProcessX_IRQ+0x100>)
 8000c7e:	801a      	strh	r2, [r3, #0]

		// Range check the phase
		if ((mouseDirectionX == 1) && (mouseEncoderPhaseX > 3))
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <ProcessX_IRQ+0x10c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d107      	bne.n	8000c9a <ProcessX_IRQ+0xba>
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	dd02      	ble.n	8000c9a <ProcessX_IRQ+0xba>
			mouseEncoderPhaseX = 0;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
		if ((mouseDirectionX == 0) && (mouseEncoderPhaseX < 0))
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <ProcessX_IRQ+0x10c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10b      	bne.n	8000cbc <ProcessX_IRQ+0xdc>
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da06      	bge.n	8000cbc <ProcessX_IRQ+0xdc>
			mouseEncoderPhaseX = 3;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	e002      	b.n	8000cbc <ProcessX_IRQ+0xdc>
	} else {
		// Reset the phase if the mouse isn't moving
		mouseEncoderPhaseX = 0;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <ProcessX_IRQ+0x104>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
	}

	// Set the timer top value for the next interrupt
	if (xTimerTop == 0) {
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <ProcessX_IRQ+0x110>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <ProcessX_IRQ+0xf0>
		TIM2->ARR = 1;
 8000cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cca:	2201      	movs	r2, #1
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
	} else {
		TIM2->ARR = xTimerTop;
	}

}
 8000cce:	e005      	b.n	8000cdc <ProcessX_IRQ+0xfc>
		TIM2->ARR = xTimerTop;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <ProcessX_IRQ+0x110>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200000bc 	.word	0x200000bc
 8000ce4:	200000b9 	.word	0x200000b9
 8000ce8:	40020400 	.word	0x40020400
 8000cec:	200000b8 	.word	0x200000b8
 8000cf0:	20000000 	.word	0x20000000

08000cf4 <ProcessY_IRQ>:

void ProcessY_IRQ() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

// Process Y output
	if (mouseDistanceY > 0) {
 8000cf8:	4b3d      	ldr	r3, [pc, #244]	; (8000df0 <ProcessY_IRQ+0xfc>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	dd63      	ble.n	8000dca <ProcessY_IRQ+0xd6>
		// Set the output pins according to the current phase
		if (mouseEncoderPhaseY == 3)
 8000d02:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d104      	bne.n	8000d16 <ProcessY_IRQ+0x22>
			HAL_GPIO_WritePin(FV_GPIO_Port, LVQ_Pin, !(0));	// Set Y1 to 0
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2120      	movs	r1, #32
 8000d10:	4839      	ldr	r0, [pc, #228]	; (8000df8 <ProcessY_IRQ+0x104>)
 8000d12:	f000 fd77 	bl	8001804 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseY == 2)
 8000d16:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d104      	bne.n	8000d2a <ProcessY_IRQ+0x36>
			HAL_GPIO_WritePin(LVQ_GPIO_Port, FV_Pin, !(0));	// Set Y2 to 0
 8000d20:	2201      	movs	r2, #1
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	4834      	ldr	r0, [pc, #208]	; (8000df8 <ProcessY_IRQ+0x104>)
 8000d26:	f000 fd6d 	bl	8001804 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseY == 1)
 8000d2a:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d104      	bne.n	8000d3e <ProcessY_IRQ+0x4a>
			HAL_GPIO_WritePin(FV_GPIO_Port, LVQ_Pin, !(1));	// Set Y1 to 1
 8000d34:	2200      	movs	r2, #0
 8000d36:	2120      	movs	r1, #32
 8000d38:	482f      	ldr	r0, [pc, #188]	; (8000df8 <ProcessY_IRQ+0x104>)
 8000d3a:	f000 fd63 	bl	8001804 <HAL_GPIO_WritePin>
		if (mouseEncoderPhaseY == 0)
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d104      	bne.n	8000d52 <ProcessY_IRQ+0x5e>
			HAL_GPIO_WritePin(LVQ_GPIO_Port, FV_Pin, !(1));	// Set Y2 to 1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	482a      	ldr	r0, [pc, #168]	; (8000df8 <ProcessY_IRQ+0x104>)
 8000d4e:	f000 fd59 	bl	8001804 <HAL_GPIO_WritePin>

		// Change phase
		if (mouseDirectionY == 0)
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <ProcessY_IRQ+0x108>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d109      	bne.n	8000d70 <ProcessY_IRQ+0x7c>
			mouseEncoderPhaseY--;
 8000d5c:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	3b01      	subs	r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	b25a      	sxtb	r2, r3
 8000d6a:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	e008      	b.n	8000d82 <ProcessY_IRQ+0x8e>
		else
			mouseEncoderPhaseY++;
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	b25a      	sxtb	r2, r3
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000d80:	701a      	strb	r2, [r3, #0]

		// Decrement the distance left to move
		mouseDistanceY--;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <ProcessY_IRQ+0xfc>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <ProcessY_IRQ+0xfc>)
 8000d92:	801a      	strh	r2, [r3, #0]

		// Range check the phase
		if ((mouseDirectionY == 1) && (mouseEncoderPhaseY > 3))
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <ProcessY_IRQ+0x108>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d107      	bne.n	8000dae <ProcessY_IRQ+0xba>
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	dd02      	ble.n	8000dae <ProcessY_IRQ+0xba>
			mouseEncoderPhaseY = 0;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
		if ((mouseDirectionY == 0) && (mouseEncoderPhaseY < 0))
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <ProcessY_IRQ+0x108>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10b      	bne.n	8000dd0 <ProcessY_IRQ+0xdc>
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	da06      	bge.n	8000dd0 <ProcessY_IRQ+0xdc>
			mouseEncoderPhaseY = 3;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e002      	b.n	8000dd0 <ProcessY_IRQ+0xdc>
	} else {
		// Reset the phase if the mouse isn't moving
		mouseEncoderPhaseY = 0;
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <ProcessY_IRQ+0x100>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
	}

// Set the timer top value for the next interrupt
	if (yTimerTop == 0) {
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <ProcessY_IRQ+0x10c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d103      	bne.n	8000de2 <ProcessY_IRQ+0xee>
		TIM3->ARR = 1;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <ProcessY_IRQ+0x110>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
	} else {
		TIM3->ARR = yTimerTop;
	}

}
 8000de0:	e004      	b.n	8000dec <ProcessY_IRQ+0xf8>
		TIM3->ARR = yTimerTop;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <ProcessY_IRQ+0x10c>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <ProcessY_IRQ+0x110>)
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200000be 	.word	0x200000be
 8000df4:	200000bb 	.word	0x200000bb
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	200000ba 	.word	0x200000ba
 8000e00:	20000001 	.word	0x20000001
 8000e04:	40000400 	.word	0x40000400

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_MspInit+0x58>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <HAL_MspInit+0x58>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_MspInit+0x58>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x58>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <HAL_MspInit+0x58>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x58>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2005      	movs	r0, #5
 8000e4c:	f000 fb2c 	bl	80014a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000e50:	2005      	movs	r0, #5
 8000e52:	f000 fb45 	bl	80014e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2019      	movs	r0, #25
 8000e7a:	f000 fb15 	bl	80014a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e7e:	2019      	movs	r0, #25
 8000e80:	f000 fb2e 	bl	80014e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <HAL_InitTick+0xa0>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <HAL_InitTick+0xa0>)
 8000e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e92:	6453      	str	r3, [r2, #68]	; 0x44
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <HAL_InitTick+0xa0>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea0:	f107 0210 	add.w	r2, r7, #16
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fe96 	bl	8003bdc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000eb0:	f002 fe80 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8000eb4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <HAL_InitTick+0xa4>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	0c9b      	lsrs	r3, r3, #18
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_InitTick+0xa8>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <HAL_InitTick+0xac>)
 8000ec8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_InitTick+0xa8>)
 8000ecc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ed0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_InitTick+0xa8>)
 8000ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_InitTick+0xa8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_InitTick+0xa8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000ee4:	4809      	ldr	r0, [pc, #36]	; (8000f0c <HAL_InitTick+0xa8>)
 8000ee6:	f002 feab 	bl	8003c40 <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d104      	bne.n	8000efa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <HAL_InitTick+0xa8>)
 8000ef2:	f002 fef5 	bl	8003ce0 <HAL_TIM_Base_Start_IT>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3730      	adds	r7, #48	; 0x30
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	431bde83 	.word	0x431bde83
 8000f0c:	200000e0 	.word	0x200000e0
 8000f10:	40014400 	.word	0x40014400

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <NMI_Handler+0x4>

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f7e:	f002 ff11 	bl	8003da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000e0 	.word	0x200000e0

08000f8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <TIM2_IRQHandler+0x10>)
 8000f92:	f002 ff07 	bl	8003da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000170 	.word	0x20000170

08000fa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <TIM3_IRQHandler+0x10>)
 8000fa6:	f002 fefd 	bl	8003da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000128 	.word	0x20000128

08000fb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <OTG_FS_IRQHandler+0x10>)
 8000fba:	f000 fea7 	bl	8001d0c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200005d4 	.word	0x200005d4

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f007 ff00 	bl	8008dfc <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20010000 	.word	0x20010000
 8001028:	00002000 	.word	0x00002000
 800102c:	200000c0 	.word	0x200000c0
 8001030:	200008e8 	.word	0x200008e8

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	463b      	mov	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_TIM2_Init+0x98>)
 8001076:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800107a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5376-1;
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_TIM2_Init+0x98>)
 800107e:	f241 42ff 	movw	r2, #5375	; 0x14ff
 8001082:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_TIM2_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_TIM2_Init+0x98>)
 800108c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001090:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_TIM2_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_TIM2_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800109e:	4814      	ldr	r0, [pc, #80]	; (80010f0 <MX_TIM2_Init+0x98>)
 80010a0:	f002 fdce 	bl	8003c40 <HAL_TIM_Base_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010aa:	f7ff fbd1 	bl	8000850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_TIM2_Init+0x98>)
 80010bc:	f002 ff7a 	bl	8003fb4 <HAL_TIM_ConfigClockSource>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010c6:	f7ff fbc3 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_TIM2_Init+0x98>)
 80010d8:	f003 f976 	bl	80043c8 <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010e2:	f7ff fbb5 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000170 	.word	0x20000170

080010f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <MX_TIM3_Init+0x94>)
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <MX_TIM3_Init+0x98>)
 8001114:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5376-1;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_TIM3_Init+0x94>)
 8001118:	f241 42ff 	movw	r2, #5375	; 0x14ff
 800111c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_TIM3_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_TIM3_Init+0x94>)
 8001126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800112a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_TIM3_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_TIM3_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <MX_TIM3_Init+0x94>)
 800113a:	f002 fd81 	bl	8003c40 <HAL_TIM_Base_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001144:	f7ff fb84 	bl	8000850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4619      	mov	r1, r3
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <MX_TIM3_Init+0x94>)
 8001156:	f002 ff2d 	bl	8003fb4 <HAL_TIM_ConfigClockSource>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001160:	f7ff fb76 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_TIM3_Init+0x94>)
 8001172:	f003 f929 	bl	80043c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800117c:	f7ff fb68 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000128 	.word	0x20000128
 800118c:	40000400 	.word	0x40000400

08001190 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a0:	d116      	bne.n	80011d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_TIM_Base_MspInit+0x80>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_TIM_Base_MspInit+0x80>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_TIM_Base_MspInit+0x80>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	201c      	movs	r0, #28
 80011c4:	f000 f970 	bl	80014a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c8:	201c      	movs	r0, #28
 80011ca:	f000 f989 	bl	80014e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80011ce:	e01a      	b.n	8001206 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_TIM_Base_MspInit+0x84>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d115      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_TIM_Base_MspInit+0x80>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_TIM_Base_MspInit+0x80>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_TIM_Base_MspInit+0x80>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	201d      	movs	r0, #29
 80011fc:	f000 f954 	bl	80014a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001200:	201d      	movs	r0, #29
 8001202:	f000 f96d 	bl	80014e0 <HAL_NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40000400 	.word	0x40000400

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800121e:	490e      	ldr	r1, [pc, #56]	; (8001258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001220:	4a0e      	ldr	r2, [pc, #56]	; (800125c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001234:	4c0b      	ldr	r4, [pc, #44]	; (8001264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001242:	f7ff fef7 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f007 fddf 	bl	8008e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f7ff fa55 	bl	80006f8 <main>
  bx  lr    
 800124e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001250:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800125c:	08009054 	.word	0x08009054
  ldr r2, =_sbss
 8001260:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001264:	200008e8 	.word	0x200008e8

08001268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_Init+0x40>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_Init+0x40>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_Init+0x40>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 f8fc 	bl	8001492 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	200f      	movs	r0, #15
 800129c:	f7ff fde2 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fdb2 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000000c 	.word	0x2000000c
 80012d4:	200001b8 	.word	0x200001b8

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200001b8 	.word	0x200001b8

080012f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff ffee 	bl	80012d8 <HAL_GetTick>
 80012fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	d005      	beq.n	8001316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_Delay+0x44>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001316:	bf00      	nop
 8001318:	f7ff ffde 	bl	80012d8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	429a      	cmp	r2, r3
 8001326:	d8f7      	bhi.n	8001318 <HAL_Delay+0x28>
  {
  }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000000c 	.word	0x2000000c

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <__NVIC_EnableIRQ+0x38>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff4c 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ba:	f7ff ff61 	bl	8001380 <__NVIC_GetPriorityGrouping>
 80014be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	6978      	ldr	r0, [r7, #20]
 80014c6:	f7ff ffb1 	bl	800142c <NVIC_EncodePriority>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff80 	bl	80013d8 <__NVIC_SetPriority>
}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff54 	bl	800139c <__NVIC_EnableIRQ>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e159      	b.n	80017cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 8148 	bne.w	80017c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d005      	beq.n	800154e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	2b02      	cmp	r3, #2
 800154c:	d130      	bne.n	80015b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 0201 	and.w	r2, r3, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d017      	beq.n	80015ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d123      	bne.n	8001640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0203 	and.w	r2, r3, #3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a2 	beq.w	80017c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a56      	ldr	r2, [pc, #344]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <HAL_GPIO_Init+0x2e8>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169e:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a49      	ldr	r2, [pc, #292]	; (80017ec <HAL_GPIO_Init+0x2f0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d019      	beq.n	80016fe <HAL_GPIO_Init+0x202>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a48      	ldr	r2, [pc, #288]	; (80017f0 <HAL_GPIO_Init+0x2f4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_GPIO_Init+0x1fe>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a47      	ldr	r2, [pc, #284]	; (80017f4 <HAL_GPIO_Init+0x2f8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00d      	beq.n	80016f6 <HAL_GPIO_Init+0x1fa>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <HAL_GPIO_Init+0x2fc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d007      	beq.n	80016f2 <HAL_GPIO_Init+0x1f6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a45      	ldr	r2, [pc, #276]	; (80017fc <HAL_GPIO_Init+0x300>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d101      	bne.n	80016ee <HAL_GPIO_Init+0x1f2>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e008      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016ee:	2307      	movs	r3, #7
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016f2:	2303      	movs	r3, #3
 80016f4:	e004      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x204>
 80016fe:	2300      	movs	r3, #0
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	f002 0203 	and.w	r2, r2, #3
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	4093      	lsls	r3, r2
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001710:	4935      	ldr	r1, [pc, #212]	; (80017e8 <HAL_GPIO_Init+0x2ec>)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001742:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_GPIO_Init+0x304>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176c:	4a24      	ldr	r2, [pc, #144]	; (8001800 <HAL_GPIO_Init+0x304>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001796:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_GPIO_Init+0x304>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_GPIO_Init+0x304>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <HAL_GPIO_Init+0x304>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	2b0f      	cmp	r3, #15
 80017d0:	f67f aea2 	bls.w	8001518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40013800 	.word	0x40013800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40021000 	.word	0x40021000
 8001800:	40013c00 	.word	0x40013c00

08001804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001820:	e003      	b.n	800182a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	041a      	lsls	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	619a      	str	r2, [r3, #24]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001838:	b08f      	sub	sp, #60	; 0x3c
 800183a:	af0a      	add	r7, sp, #40	; 0x28
 800183c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e054      	b.n	80018f2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f007 f854 	bl	8008910 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2203      	movs	r2, #3
 800186c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fe92 	bl	80045b0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	687e      	ldr	r6, [r7, #4]
 8001894:	466d      	mov	r5, sp
 8001896:	f106 0410 	add.w	r4, r6, #16
 800189a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800189e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80018aa:	1d33      	adds	r3, r6, #4
 80018ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ae:	6838      	ldr	r0, [r7, #0]
 80018b0:	f002 fe0c 	bl	80044cc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2101      	movs	r1, #1
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fe89 	bl	80045d2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	687e      	ldr	r6, [r7, #4]
 80018c8:	466d      	mov	r5, sp
 80018ca:	f106 0410 	add.w	r4, r6, #16
 80018ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018da:	e885 0003 	stmia.w	r5, {r0, r1}
 80018de:	1d33      	adds	r3, r6, #4
 80018e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e2:	6838      	ldr	r0, [r7, #0]
 80018e4:	f002 fff0 	bl	80048c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018fa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80018fa:	b590      	push	{r4, r7, lr}
 80018fc:	b089      	sub	sp, #36	; 0x24
 80018fe:	af04      	add	r7, sp, #16
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	4608      	mov	r0, r1
 8001904:	4611      	mov	r1, r2
 8001906:	461a      	mov	r2, r3
 8001908:	4603      	mov	r3, r0
 800190a:	70fb      	strb	r3, [r7, #3]
 800190c:	460b      	mov	r3, r1
 800190e:	70bb      	strb	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_HCD_HC_Init+0x28>
 800191e:	2302      	movs	r3, #2
 8001920:	e076      	b.n	8001a10 <HAL_HCD_HC_Init+0x116>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	333d      	adds	r3, #61	; 0x3d
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3338      	adds	r3, #56	; 0x38
 800194a:	787a      	ldrb	r2, [r7, #1]
 800194c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	3340      	adds	r3, #64	; 0x40
 800195c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800195e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	212c      	movs	r1, #44	; 0x2c
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3339      	adds	r3, #57	; 0x39
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	212c      	movs	r1, #44	; 0x2c
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	333f      	adds	r3, #63	; 0x3f
 8001980:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001984:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	78ba      	ldrb	r2, [r7, #2]
 800198a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800198e:	b2d0      	uxtb	r0, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	333a      	adds	r3, #58	; 0x3a
 800199c:	4602      	mov	r2, r0
 800199e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80019a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	da09      	bge.n	80019bc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	333b      	adds	r3, #59	; 0x3b
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	e008      	b.n	80019ce <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	333b      	adds	r3, #59	; 0x3b
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	333c      	adds	r3, #60	; 0x3c
 80019dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019e0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	787c      	ldrb	r4, [r7, #1]
 80019e8:	78ba      	ldrb	r2, [r7, #2]
 80019ea:	78f9      	ldrb	r1, [r7, #3]
 80019ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	4623      	mov	r3, r4
 80019fe:	f003 f8dd 	bl	8004bbc <USB_HC_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd90      	pop	{r4, r7, pc}

08001a18 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_HCD_HC_Halt+0x1e>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e00f      	b.n	8001a56 <HAL_HCD_HC_Halt+0x3e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fb19 	bl	800507e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	4608      	mov	r0, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4603      	mov	r3, r0
 8001a70:	70fb      	strb	r3, [r7, #3]
 8001a72:	460b      	mov	r3, r1
 8001a74:	70bb      	strb	r3, [r7, #2]
 8001a76:	4613      	mov	r3, r2
 8001a78:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	333b      	adds	r3, #59	; 0x3b
 8001a88:	78ba      	ldrb	r2, [r7, #2]
 8001a8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	333f      	adds	r3, #63	; 0x3f
 8001a9a:	787a      	ldrb	r2, [r7, #1]
 8001a9c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a9e:	7c3b      	ldrb	r3, [r7, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d112      	bne.n	8001aca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	212c      	movs	r1, #44	; 0x2c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3342      	adds	r3, #66	; 0x42
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	212c      	movs	r1, #44	; 0x2c
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	333d      	adds	r3, #61	; 0x3d
 8001ac4:	7f3a      	ldrb	r2, [r7, #28]
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e008      	b.n	8001adc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	212c      	movs	r1, #44	; 0x2c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3342      	adds	r3, #66	; 0x42
 8001ad8:	2202      	movs	r2, #2
 8001ada:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001adc:	787b      	ldrb	r3, [r7, #1]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	f200 80c6 	bhi.w	8001c70 <HAL_HCD_HC_SubmitRequest+0x210>
 8001ae4:	a201      	add	r2, pc, #4	; (adr r2, 8001aec <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aea:	bf00      	nop
 8001aec:	08001afd 	.word	0x08001afd
 8001af0:	08001c5d 	.word	0x08001c5d
 8001af4:	08001b61 	.word	0x08001b61
 8001af8:	08001bdf 	.word	0x08001bdf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001afc:	7c3b      	ldrb	r3, [r7, #16]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	f040 80b8 	bne.w	8001c74 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b04:	78bb      	ldrb	r3, [r7, #2]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 80b4 	bne.w	8001c74 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b0c:	8b3b      	ldrh	r3, [r7, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d108      	bne.n	8001b24 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	212c      	movs	r1, #44	; 0x2c
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3355      	adds	r3, #85	; 0x55
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	3355      	adds	r3, #85	; 0x55
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	212c      	movs	r1, #44	; 0x2c
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	3342      	adds	r3, #66	; 0x42
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b4a:	e093      	b.n	8001c74 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3342      	adds	r3, #66	; 0x42
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	701a      	strb	r2, [r3, #0]
      break;
 8001b5e:	e089      	b.n	8001c74 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b60:	78bb      	ldrb	r3, [r7, #2]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11d      	bne.n	8001ba2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3355      	adds	r3, #85	; 0x55
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	3342      	adds	r3, #66	; 0x42
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b8c:	e073      	b.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	212c      	movs	r1, #44	; 0x2c
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3342      	adds	r3, #66	; 0x42
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	701a      	strb	r2, [r3, #0]
      break;
 8001ba0:	e069      	b.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	212c      	movs	r1, #44	; 0x2c
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	3354      	adds	r3, #84	; 0x54
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	212c      	movs	r1, #44	; 0x2c
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3342      	adds	r3, #66	; 0x42
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
      break;
 8001bc8:	e055      	b.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	212c      	movs	r1, #44	; 0x2c
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3342      	adds	r3, #66	; 0x42
 8001bd8:	2202      	movs	r2, #2
 8001bda:	701a      	strb	r2, [r3, #0]
      break;
 8001bdc:	e04b      	b.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001bde:	78bb      	ldrb	r3, [r7, #2]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d11d      	bne.n	8001c20 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	212c      	movs	r1, #44	; 0x2c
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	3355      	adds	r3, #85	; 0x55
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3342      	adds	r3, #66	; 0x42
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c0a:	e034      	b.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	212c      	movs	r1, #44	; 0x2c
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	3342      	adds	r3, #66	; 0x42
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	701a      	strb	r2, [r3, #0]
      break;
 8001c1e:	e02a      	b.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	212c      	movs	r1, #44	; 0x2c
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3354      	adds	r3, #84	; 0x54
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d109      	bne.n	8001c48 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	212c      	movs	r1, #44	; 0x2c
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	3342      	adds	r3, #66	; 0x42
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
      break;
 8001c46:	e016      	b.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	3342      	adds	r3, #66	; 0x42
 8001c56:	2202      	movs	r2, #2
 8001c58:	701a      	strb	r2, [r3, #0]
      break;
 8001c5a:	e00c      	b.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	212c      	movs	r1, #44	; 0x2c
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	3342      	adds	r3, #66	; 0x42
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
      break;
 8001c6e:	e002      	b.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c70:	bf00      	nop
 8001c72:	e000      	b.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001c74:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	212c      	movs	r1, #44	; 0x2c
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	3344      	adds	r3, #68	; 0x44
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	8b3a      	ldrh	r2, [r7, #24]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	202c      	movs	r0, #44	; 0x2c
 8001c90:	fb00 f303 	mul.w	r3, r0, r3
 8001c94:	440b      	add	r3, r1
 8001c96:	334c      	adds	r3, #76	; 0x4c
 8001c98:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	212c      	movs	r1, #44	; 0x2c
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3360      	adds	r3, #96	; 0x60
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	212c      	movs	r1, #44	; 0x2c
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3350      	adds	r3, #80	; 0x50
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3339      	adds	r3, #57	; 0x39
 8001ccc:	78fa      	ldrb	r2, [r7, #3]
 8001cce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3361      	adds	r3, #97	; 0x61
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	222c      	movs	r2, #44	; 0x2c
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	3338      	adds	r3, #56	; 0x38
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	18d1      	adds	r1, r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f003 f86c 	bl	8004dd8 <USB_HC_StartXfer>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop

08001d0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f002 fd8f 	bl	8004846 <USB_GetMode>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	f040 80f6 	bne.w	8001f1c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f002 fd73 	bl	8004820 <USB_ReadInterrupts>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80ec 	beq.w	8001f1a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f002 fd6a 	bl	8004820 <USB_ReadInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d56:	d104      	bne.n	8001d62 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fd5a 	bl	8004820 <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d76:	d104      	bne.n	8001d82 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 fd4a 	bl	8004820 <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d96:	d104      	bne.n	8001da2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001da0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f002 fd3a 	bl	8004820 <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d103      	bne.n	8001dbe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 fd2c 	bl	8004820 <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dd2:	d11c      	bne.n	8001e0e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ddc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001dee:	2110      	movs	r1, #16
 8001df0:	6938      	ldr	r0, [r7, #16]
 8001df2:	f002 fc3b 	bl	800466c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001df6:	6938      	ldr	r0, [r7, #16]
 8001df8:	f002 fc5c 	bl	80046b4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2101      	movs	r1, #1
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fe14 	bl	8004a30 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f006 fdf1 	bl	80089f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 fd04 	bl	8004820 <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e22:	d102      	bne.n	8001e2a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f001 fa03 	bl	8003230 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f002 fcf6 	bl	8004820 <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d106      	bne.n	8001e4c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f006 fdba 	bl	80089b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 fce5 	bl	8004820 <USB_ReadInterrupts>
 8001e56:	4603      	mov	r3, r0
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d101      	bne.n	8001e64 <HAL_HCD_IRQHandler+0x158>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_HCD_IRQHandler+0x15a>
 8001e64:	2300      	movs	r3, #0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d012      	beq.n	8001e90 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0210 	bic.w	r2, r2, #16
 8001e78:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f001 f906 	bl	800308c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0210 	orr.w	r2, r2, #16
 8001e8e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 fcc3 	bl	8004820 <USB_ReadInterrupts>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ea4:	d13a      	bne.n	8001f1c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 f8d6 	bl	800505c <USB_HC_ReadInterrupt>
 8001eb0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	e025      	b.n	8001f04 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d018      	beq.n	8001efe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee2:	d106      	bne.n	8001ef2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	4619      	mov	r1, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8ab 	bl	8002046 <HCD_HC_IN_IRQHandler>
 8001ef0:	e005      	b.n	8001efe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fcc6 	bl	800288a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d3d4      	bcc.n	8001eb8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f16:	615a      	str	r2, [r3, #20]
 8001f18:	e000      	b.n	8001f1c <HAL_HCD_IRQHandler+0x210>
      return;
 8001f1a:	bf00      	nop
    }
  }
}
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_HCD_Start+0x16>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e013      	b.n	8001f60 <HAL_HCD_Start+0x3e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	4618      	mov	r0, r3
 8001f48:	f002 fdd6 	bl	8004af8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 fb1c 	bl	800458e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_HCD_Stop+0x16>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e00d      	b.n	8001f9a <HAL_HCD_Stop+0x32>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 f9d0 	bl	8005330 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fd78 	bl	8004aa4 <USB_ResetPort>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	212c      	movs	r1, #44	; 0x2c
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3360      	adds	r3, #96	; 0x60
 8001fd8:	781b      	ldrb	r3, [r3, #0]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	212c      	movs	r1, #44	; 0x2c
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3350      	adds	r3, #80	; 0x50
 8002000:	681b      	ldr	r3, [r3, #0]
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f002 fdbc 	bl	8004b98 <USB_GetCurrentFrame>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f002 fd97 	bl	8004b6a <USB_GetHostSpeed>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b04      	cmp	r3, #4
 8002074:	d119      	bne.n	80020aa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	461a      	mov	r2, r3
 8002084:	2304      	movs	r3, #4
 8002086:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	0151      	lsls	r1, r2, #5
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	440a      	add	r2, r1
 800209e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	60d3      	str	r3, [r2, #12]
 80020a8:	e101      	b.n	80022ae <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020c0:	d12b      	bne.n	800211a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ce:	461a      	mov	r2, r3
 80020d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3361      	adds	r3, #97	; 0x61
 80020e4:	2207      	movs	r2, #7
 80020e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	0151      	lsls	r1, r2, #5
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	440a      	add	r2, r1
 80020fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f002 ffb3 	bl	800507e <USB_HC_Halt>
 8002118:	e0c9      	b.n	80022ae <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4413      	add	r3, r2
 8002122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d109      	bne.n	8002144 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	461a      	mov	r2, r3
 800213e:	2320      	movs	r3, #32
 8002140:	6093      	str	r3, [r2, #8]
 8002142:	e0b4      	b.n	80022ae <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b08      	cmp	r3, #8
 8002158:	d133      	bne.n	80021c2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	0151      	lsls	r1, r2, #5
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	440a      	add	r2, r1
 8002170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3361      	adds	r3, #97	; 0x61
 8002188:	2205      	movs	r2, #5
 800218a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002198:	461a      	mov	r2, r3
 800219a:	2310      	movs	r3, #16
 800219c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	461a      	mov	r2, r3
 80021ac:	2308      	movs	r3, #8
 80021ae:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 ff5f 	bl	800507e <USB_HC_Halt>
 80021c0:	e075      	b.n	80022ae <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d8:	d134      	bne.n	8002244 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3361      	adds	r3, #97	; 0x61
 8002208:	2208      	movs	r2, #8
 800220a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	461a      	mov	r2, r3
 800221a:	2310      	movs	r3, #16
 800221c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	461a      	mov	r2, r3
 800222c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002230:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f002 ff1e 	bl	800507e <USB_HC_Halt>
 8002242:	e034      	b.n	80022ae <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	2b80      	cmp	r3, #128	; 0x80
 8002258:	d129      	bne.n	80022ae <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	0151      	lsls	r1, r2, #5
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	440a      	add	r2, r1
 8002270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	3361      	adds	r3, #97	; 0x61
 8002288:	2206      	movs	r2, #6
 800228a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f002 fef1 	bl	800507e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	461a      	mov	r2, r3
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c4:	d122      	bne.n	800230c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	0151      	lsls	r1, r2, #5
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	440a      	add	r2, r1
 80022dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 fec4 	bl	800507e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002308:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800230a:	e2ba      	b.n	8002882 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	f040 811b 	bne.w	800255a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d019      	beq.n	8002360 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3348      	adds	r3, #72	; 0x48
 800233a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	0159      	lsls	r1, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	440b      	add	r3, r1
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800234e:	1ad2      	subs	r2, r2, r3
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	202c      	movs	r0, #44	; 0x2c
 8002356:	fb00 f303 	mul.w	r3, r0, r3
 800235a:	440b      	add	r3, r1
 800235c:	3350      	adds	r3, #80	; 0x50
 800235e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3361      	adds	r3, #97	; 0x61
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	335c      	adds	r3, #92	; 0x5c
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	461a      	mov	r2, r3
 8002392:	2301      	movs	r3, #1
 8002394:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	333f      	adds	r3, #63	; 0x3f
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	333f      	adds	r3, #63	; 0x3f
 80023b8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d121      	bne.n	8002402 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	0151      	lsls	r1, r2, #5
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	440a      	add	r2, r1
 80023d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f002 fe48 	bl	800507e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	461a      	mov	r2, r3
 80023fc:	2310      	movs	r3, #16
 80023fe:	6093      	str	r3, [r2, #8]
 8002400:	e066      	b.n	80024d0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	333f      	adds	r3, #63	; 0x3f
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d127      	bne.n	8002466 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	0151      	lsls	r1, r2, #5
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	440a      	add	r2, r1
 800242c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002430:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002434:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3360      	adds	r3, #96	; 0x60
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	b2d9      	uxtb	r1, r3
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	202c      	movs	r0, #44	; 0x2c
 8002452:	fb00 f303 	mul.w	r3, r0, r3
 8002456:	4413      	add	r3, r2
 8002458:	3360      	adds	r3, #96	; 0x60
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f006 fad4 	bl	8008a0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002464:	e034      	b.n	80024d0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	333f      	adds	r3, #63	; 0x3f
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d12a      	bne.n	80024d0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3360      	adds	r3, #96	; 0x60
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3354      	adds	r3, #84	; 0x54
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	f083 0301 	eor.w	r3, r3, #1
 80024a0:	b2d8      	uxtb	r0, r3
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	3354      	adds	r3, #84	; 0x54
 80024b0:	4602      	mov	r2, r0
 80024b2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	b2d9      	uxtb	r1, r3
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	202c      	movs	r0, #44	; 0x2c
 80024be:	fb00 f303 	mul.w	r3, r0, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3360      	adds	r3, #96	; 0x60
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f006 fa9e 	bl	8008a0c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d12b      	bne.n	8002530 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3348      	adds	r3, #72	; 0x48
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	202c      	movs	r0, #44	; 0x2c
 80024ee:	fb00 f202 	mul.w	r2, r0, r2
 80024f2:	440a      	add	r2, r1
 80024f4:	3240      	adds	r2, #64	; 0x40
 80024f6:	8812      	ldrh	r2, [r2, #0]
 80024f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 81be 	beq.w	8002882 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3354      	adds	r3, #84	; 0x54
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	b2d8      	uxtb	r0, r3
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3354      	adds	r3, #84	; 0x54
 800252a:	4602      	mov	r2, r0
 800252c:	701a      	strb	r2, [r3, #0]
}
 800252e:	e1a8      	b.n	8002882 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3354      	adds	r3, #84	; 0x54
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2d8      	uxtb	r0, r3
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3354      	adds	r3, #84	; 0x54
 8002554:	4602      	mov	r2, r0
 8002556:	701a      	strb	r2, [r3, #0]
}
 8002558:	e193      	b.n	8002882 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b02      	cmp	r3, #2
 800256e:	f040 8106 	bne.w	800277e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	0151      	lsls	r1, r2, #5
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	440a      	add	r2, r1
 8002588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800258c:	f023 0302 	bic.w	r3, r3, #2
 8002590:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	3361      	adds	r3, #97	; 0x61
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d109      	bne.n	80025ba <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e0c9      	b.n	800274e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	3361      	adds	r3, #97	; 0x61
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d109      	bne.n	80025e2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	2205      	movs	r2, #5
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e0b5      	b.n	800274e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3361      	adds	r3, #97	; 0x61
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d009      	beq.n	800260a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3361      	adds	r3, #97	; 0x61
 8002604:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002606:	2b08      	cmp	r3, #8
 8002608:	d150      	bne.n	80026ac <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	335c      	adds	r3, #92	; 0x5c
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	202c      	movs	r0, #44	; 0x2c
 8002622:	fb00 f303 	mul.w	r3, r0, r3
 8002626:	440b      	add	r3, r1
 8002628:	335c      	adds	r3, #92	; 0x5c
 800262a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	335c      	adds	r3, #92	; 0x5c
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d912      	bls.n	8002666 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	335c      	adds	r3, #92	; 0x5c
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	3360      	adds	r3, #96	; 0x60
 8002660:	2204      	movs	r2, #4
 8002662:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002664:	e073      	b.n	800274e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3360      	adds	r3, #96	; 0x60
 8002674:	2202      	movs	r2, #2
 8002676:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800268e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002696:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026aa:	e050      	b.n	800274e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	3361      	adds	r3, #97	; 0x61
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d122      	bne.n	8002706 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	3360      	adds	r3, #96	; 0x60
 80026ce:	2202      	movs	r2, #2
 80026d0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026e8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026f0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	461a      	mov	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	e023      	b.n	800274e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3361      	adds	r3, #97	; 0x61
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b07      	cmp	r3, #7
 8002718:	d119      	bne.n	800274e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	335c      	adds	r3, #92	; 0x5c
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	202c      	movs	r0, #44	; 0x2c
 8002732:	fb00 f303 	mul.w	r3, r0, r3
 8002736:	440b      	add	r3, r1
 8002738:	335c      	adds	r3, #92	; 0x5c
 800273a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	3360      	adds	r3, #96	; 0x60
 800274a:	2204      	movs	r2, #4
 800274c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	461a      	mov	r2, r3
 800275c:	2302      	movs	r3, #2
 800275e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	b2d9      	uxtb	r1, r3
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	202c      	movs	r0, #44	; 0x2c
 800276a:	fb00 f303 	mul.w	r3, r0, r3
 800276e:	4413      	add	r3, r2
 8002770:	3360      	adds	r3, #96	; 0x60
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f006 f948 	bl	8008a0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800277c:	e081      	b.n	8002882 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b10      	cmp	r3, #16
 8002792:	d176      	bne.n	8002882 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	333f      	adds	r3, #63	; 0x3f
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d121      	bne.n	80027ec <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	335c      	adds	r3, #92	; 0x5c
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	0151      	lsls	r1, r2, #5
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	440a      	add	r2, r1
 80027d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 fc4a 	bl	800507e <USB_HC_Halt>
 80027ea:	e041      	b.n	8002870 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	333f      	adds	r3, #63	; 0x3f
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	333f      	adds	r3, #63	; 0x3f
 800280e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002810:	2b02      	cmp	r3, #2
 8002812:	d12d      	bne.n	8002870 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	335c      	adds	r3, #92	; 0x5c
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d120      	bne.n	8002870 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3361      	adds	r3, #97	; 0x61
 800283c:	2203      	movs	r2, #3
 800283e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	0151      	lsls	r1, r2, #5
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	440a      	add	r2, r1
 8002856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f002 fc07 	bl	800507e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	2310      	movs	r3, #16
 8002880:	6093      	str	r3, [r2, #8]
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b088      	sub	sp, #32
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d119      	bne.n	80028ee <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	461a      	mov	r2, r3
 80028c8:	2304      	movs	r3, #4
 80028ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	0151      	lsls	r1, r2, #5
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	440a      	add	r2, r1
 80028e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80028ec:	e3ca      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b20      	cmp	r3, #32
 8002902:	d13e      	bne.n	8002982 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	2320      	movs	r3, #32
 8002914:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	333d      	adds	r3, #61	; 0x3d
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	f040 83ac 	bne.w	8003084 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	333d      	adds	r3, #61	; 0x3d
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3360      	adds	r3, #96	; 0x60
 800294c:	2202      	movs	r2, #2
 800294e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	0151      	lsls	r1, r2, #5
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	440a      	add	r2, r1
 8002966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296a:	f043 0302 	orr.w	r3, r3, #2
 800296e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f002 fb7f 	bl	800507e <USB_HC_Halt>
}
 8002980:	e380      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002998:	d122      	bne.n	80029e0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	0151      	lsls	r1, r2, #5
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	440a      	add	r2, r1
 80029b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f002 fb5a 	bl	800507e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d6:	461a      	mov	r2, r3
 80029d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029dc:	6093      	str	r3, [r2, #8]
}
 80029de:	e351      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d150      	bne.n	8002a98 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	335c      	adds	r3, #92	; 0x5c
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	d111      	bne.n	8002a42 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	333d      	adds	r3, #61	; 0x3d
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2340      	movs	r3, #64	; 0x40
 8002a40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	0151      	lsls	r1, r2, #5
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	440a      	add	r2, r1
 8002a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f002 fb06 	bl	800507e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2301      	movs	r3, #1
 8002a82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3361      	adds	r3, #97	; 0x61
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
}
 8002a96:	e2f5      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d13c      	bne.n	8002b28 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3361      	adds	r3, #97	; 0x61
 8002abc:	2204      	movs	r2, #4
 8002abe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	333d      	adds	r3, #61	; 0x3d
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	335c      	adds	r3, #92	; 0x5c
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	0151      	lsls	r1, r2, #5
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	440a      	add	r2, r1
 8002afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f002 fab5 	bl	800507e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	2340      	movs	r3, #64	; 0x40
 8002b24:	6093      	str	r3, [r2, #8]
}
 8002b26:	e2ad      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d12a      	bne.n	8002b94 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	0151      	lsls	r1, r2, #5
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	440a      	add	r2, r1
 8002b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 fa7f 	bl	800507e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3361      	adds	r3, #97	; 0x61
 8002b8e:	2205      	movs	r2, #5
 8002b90:	701a      	strb	r2, [r3, #0]
}
 8002b92:	e277      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d150      	bne.n	8002c4c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	335c      	adds	r3, #92	; 0x5c
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3361      	adds	r3, #97	; 0x61
 8002bca:	2203      	movs	r2, #3
 8002bcc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	333d      	adds	r3, #61	; 0x3d
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d112      	bne.n	8002c08 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	333c      	adds	r3, #60	; 0x3c
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d108      	bne.n	8002c08 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	333d      	adds	r3, #61	; 0x3d
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	0151      	lsls	r1, r2, #5
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	440a      	add	r2, r1
 8002c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c22:	f043 0302 	orr.w	r3, r3, #2
 8002c26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 fa23 	bl	800507e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	2310      	movs	r3, #16
 8002c48:	6093      	str	r3, [r2, #8]
}
 8002c4a:	e21b      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d174      	bne.n	8002d4c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d121      	bne.n	8002cae <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3361      	adds	r3, #97	; 0x61
 8002c78:	2206      	movs	r2, #6
 8002c7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	0151      	lsls	r1, r2, #5
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	440a      	add	r2, r1
 8002c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c96:	f043 0302 	orr.w	r3, r3, #2
 8002c9a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 f9e9 	bl	800507e <USB_HC_Halt>
 8002cac:	e044      	b.n	8002d38 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	335c      	adds	r3, #92	; 0x5c
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	202c      	movs	r0, #44	; 0x2c
 8002cc6:	fb00 f303 	mul.w	r3, r0, r3
 8002cca:	440b      	add	r3, r1
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	335c      	adds	r3, #92	; 0x5c
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d920      	bls.n	8002d26 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	335c      	adds	r3, #92	; 0x5c
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3360      	adds	r3, #96	; 0x60
 8002d04:	2204      	movs	r2, #4
 8002d06:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	b2d9      	uxtb	r1, r3
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	202c      	movs	r0, #44	; 0x2c
 8002d12:	fb00 f303 	mul.w	r3, r0, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3360      	adds	r3, #96	; 0x60
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f005 fe74 	bl	8008a0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d24:	e008      	b.n	8002d38 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3360      	adds	r3, #96	; 0x60
 8002d34:	2202      	movs	r2, #2
 8002d36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	6093      	str	r3, [r2, #8]
}
 8002d4a:	e19b      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d134      	bne.n	8002dce <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	0151      	lsls	r1, r2, #5
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	440a      	add	r2, r1
 8002d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 f975 	bl	800507e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	461a      	mov	r2, r3
 8002da2:	2310      	movs	r3, #16
 8002da4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3361      	adds	r3, #97	; 0x61
 8002dc8:	2208      	movs	r2, #8
 8002dca:	701a      	strb	r2, [r3, #0]
}
 8002dcc:	e15a      	b.n	8003084 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	f040 814f 	bne.w	8003084 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	0151      	lsls	r1, r2, #5
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	440a      	add	r2, r1
 8002dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e00:	f023 0302 	bic.w	r3, r3, #2
 8002e04:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	3361      	adds	r3, #97	; 0x61
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d17d      	bne.n	8002f16 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3360      	adds	r3, #96	; 0x60
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	333f      	adds	r3, #63	; 0x3f
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d00a      	beq.n	8002e56 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	333f      	adds	r3, #63	; 0x3f
 8002e4e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	f040 8100 	bne.w	8003056 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d113      	bne.n	8002e86 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	3355      	adds	r3, #85	; 0x55
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	f083 0301 	eor.w	r3, r3, #1
 8002e72:	b2d8      	uxtb	r0, r3
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3355      	adds	r3, #85	; 0x55
 8002e82:	4602      	mov	r2, r0
 8002e84:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	f040 80e3 	bne.w	8003056 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	334c      	adds	r3, #76	; 0x4c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80d8 	beq.w	8003056 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	334c      	adds	r3, #76	; 0x4c
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	202c      	movs	r0, #44	; 0x2c
 8002ebc:	fb00 f202 	mul.w	r2, r0, r2
 8002ec0:	440a      	add	r2, r1
 8002ec2:	3240      	adds	r2, #64	; 0x40
 8002ec4:	8812      	ldrh	r2, [r2, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	202c      	movs	r0, #44	; 0x2c
 8002ed0:	fb00 f202 	mul.w	r2, r0, r2
 8002ed4:	440a      	add	r2, r1
 8002ed6:	3240      	adds	r2, #64	; 0x40
 8002ed8:	8812      	ldrh	r2, [r2, #0]
 8002eda:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80b5 	beq.w	8003056 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3355      	adds	r3, #85	; 0x55
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	f083 0301 	eor.w	r3, r3, #1
 8002f00:	b2d8      	uxtb	r0, r3
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3355      	adds	r3, #85	; 0x55
 8002f10:	4602      	mov	r2, r0
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e09f      	b.n	8003056 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3361      	adds	r3, #97	; 0x61
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d109      	bne.n	8002f3e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	3360      	adds	r3, #96	; 0x60
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]
 8002f3c:	e08b      	b.n	8003056 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3361      	adds	r3, #97	; 0x61
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d109      	bne.n	8002f66 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3360      	adds	r3, #96	; 0x60
 8002f60:	2202      	movs	r2, #2
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e077      	b.n	8003056 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	3361      	adds	r3, #97	; 0x61
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d109      	bne.n	8002f8e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	212c      	movs	r1, #44	; 0x2c
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	3360      	adds	r3, #96	; 0x60
 8002f88:	2205      	movs	r2, #5
 8002f8a:	701a      	strb	r2, [r3, #0]
 8002f8c:	e063      	b.n	8003056 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3361      	adds	r3, #97	; 0x61
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d009      	beq.n	8002fb6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	3361      	adds	r3, #97	; 0x61
 8002fb0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d14f      	bne.n	8003056 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	335c      	adds	r3, #92	; 0x5c
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	202c      	movs	r0, #44	; 0x2c
 8002fce:	fb00 f303 	mul.w	r3, r0, r3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	335c      	adds	r3, #92	; 0x5c
 8002fd6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	335c      	adds	r3, #92	; 0x5c
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d912      	bls.n	8003012 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	335c      	adds	r3, #92	; 0x5c
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3360      	adds	r3, #96	; 0x60
 800300c:	2204      	movs	r2, #4
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e021      	b.n	8003056 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	3360      	adds	r3, #96	; 0x60
 8003020:	2202      	movs	r2, #2
 8003022:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800303a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003042:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	461a      	mov	r2, r3
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	461a      	mov	r2, r3
 8003064:	2302      	movs	r3, #2
 8003066:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	b2d9      	uxtb	r1, r3
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	202c      	movs	r0, #44	; 0x2c
 8003072:	fb00 f303 	mul.w	r3, r0, r3
 8003076:	4413      	add	r3, r2
 8003078:	3360      	adds	r3, #96	; 0x60
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f005 fcc4 	bl	8008a0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003084:	bf00      	nop
 8003086:	3720      	adds	r7, #32
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	0c5b      	lsrs	r3, r3, #17
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030c0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d004      	beq.n	80030d2 <HCD_RXQLVL_IRQHandler+0x46>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	f000 80a9 	beq.w	8003222 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80030d0:	e0aa      	b.n	8003228 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80a6 	beq.w	8003226 <HCD_RXQLVL_IRQHandler+0x19a>
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	3344      	adds	r3, #68	; 0x44
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 809b 	beq.w	8003226 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3350      	adds	r3, #80	; 0x50
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	441a      	add	r2, r3
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	202c      	movs	r0, #44	; 0x2c
 800310a:	fb00 f303 	mul.w	r3, r0, r3
 800310e:	440b      	add	r3, r1
 8003110:	334c      	adds	r3, #76	; 0x4c
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d87a      	bhi.n	800320e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3344      	adds	r3, #68	; 0x44
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	b292      	uxth	r2, r2
 8003130:	4619      	mov	r1, r3
 8003132:	f001 fb1d 	bl	8004770 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	3344      	adds	r3, #68	; 0x44
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	441a      	add	r2, r3
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	202c      	movs	r0, #44	; 0x2c
 8003150:	fb00 f303 	mul.w	r3, r0, r3
 8003154:	440b      	add	r3, r1
 8003156:	3344      	adds	r3, #68	; 0x44
 8003158:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	212c      	movs	r1, #44	; 0x2c
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	3350      	adds	r3, #80	; 0x50
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	441a      	add	r2, r3
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	202c      	movs	r0, #44	; 0x2c
 8003174:	fb00 f303 	mul.w	r3, r0, r3
 8003178:	440b      	add	r3, r1
 800317a:	3350      	adds	r3, #80	; 0x50
 800317c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	0cdb      	lsrs	r3, r3, #19
 800318e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003192:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3340      	adds	r3, #64	; 0x40
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d13c      	bne.n	8003226 <HCD_RXQLVL_IRQHandler+0x19a>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d039      	beq.n	8003226 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031c8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031d0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031de:	461a      	mov	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	3354      	adds	r3, #84	; 0x54
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	f083 0301 	eor.w	r3, r3, #1
 80031f8:	b2d8      	uxtb	r0, r3
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3354      	adds	r3, #84	; 0x54
 8003208:	4602      	mov	r2, r0
 800320a:	701a      	strb	r2, [r3, #0]
      break;
 800320c:	e00b      	b.n	8003226 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	212c      	movs	r1, #44	; 0x2c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3360      	adds	r3, #96	; 0x60
 800321c:	2204      	movs	r2, #4
 800321e:	701a      	strb	r2, [r3, #0]
      break;
 8003220:	e001      	b.n	8003226 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003226:	bf00      	nop
  }
}
 8003228:	bf00      	nop
 800322a:	3728      	adds	r7, #40	; 0x28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800325c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b02      	cmp	r3, #2
 8003266:	d10b      	bne.n	8003280 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b01      	cmp	r3, #1
 8003270:	d102      	bne.n	8003278 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f005 fbae 	bl	80089d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f043 0302 	orr.w	r3, r3, #2
 800327e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b08      	cmp	r3, #8
 8003288:	d132      	bne.n	80032f0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d126      	bne.n	80032ea <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d113      	bne.n	80032cc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80032aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032ae:	d106      	bne.n	80032be <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2102      	movs	r1, #2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fbba 	bl	8004a30 <USB_InitFSLSPClkSel>
 80032bc:	e011      	b.n	80032e2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 fbb3 	bl	8004a30 <USB_InitFSLSPClkSel>
 80032ca:	e00a      	b.n	80032e2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d106      	bne.n	80032e2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032da:	461a      	mov	r2, r3
 80032dc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80032e0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f005 fba0 	bl	8008a28 <HAL_HCD_PortEnabled_Callback>
 80032e8:	e002      	b.n	80032f0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f005 fbaa 	bl	8008a44 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d103      	bne.n	8003302 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f043 0320 	orr.w	r3, r3, #32
 8003300:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003308:	461a      	mov	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	6013      	str	r3, [r2, #0]
}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e266      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d077      	beq.n	8003426 <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003336:	4ba4      	ldr	r3, [pc, #656]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b04      	cmp	r3, #4
 8003340:	d00c      	beq.n	800335c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003342:	4ba1      	ldr	r3, [pc, #644]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334a:	2b08      	cmp	r3, #8
 800334c:	d112      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4b9e      	ldr	r3, [pc, #632]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335a:	d10b      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	4b9a      	ldr	r3, [pc, #616]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d05d      	beq.n	8003424 <HAL_RCC_OscConfig+0x10c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d159      	bne.n	8003424 <HAL_RCC_OscConfig+0x10c>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e241      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337c:	d106      	bne.n	800338c <HAL_RCC_OscConfig+0x74>
 800337e:	4b92      	ldr	r3, [pc, #584]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a91      	ldr	r2, [pc, #580]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e01d      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x98>
 8003396:	4b8c      	ldr	r3, [pc, #560]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a8b      	ldr	r2, [pc, #556]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b89      	ldr	r3, [pc, #548]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a88      	ldr	r2, [pc, #544]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 80033b0:	4b85      	ldr	r3, [pc, #532]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a84      	ldr	r2, [pc, #528]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b82      	ldr	r3, [pc, #520]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a81      	ldr	r2, [pc, #516]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d014      	beq.n	80033fa <HAL_RCC_OscConfig+0xe2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fd ff82 	bl	80012d8 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	e009      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fd ff7e 	bl	80012d8 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e205      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ec:	4b76      	ldr	r3, [pc, #472]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ef      	beq.n	80033d8 <HAL_RCC_OscConfig+0xc0>
 80033f8:	e015      	b.n	8003426 <HAL_RCC_OscConfig+0x10e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fd ff6d 	bl	80012d8 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003400:	e009      	b.n	8003416 <HAL_RCC_OscConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003402:	f7fd ff69 	bl	80012d8 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e1f0      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003416:	4b6c      	ldr	r3, [pc, #432]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ef      	bne.n	8003402 <HAL_RCC_OscConfig+0xea>
 8003422:	e000      	b.n	8003426 <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d063      	beq.n	80034fa <HAL_RCC_OscConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	4b65      	ldr	r3, [pc, #404]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <HAL_RCC_OscConfig+0x13e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343e:	4b62      	ldr	r3, [pc, #392]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003446:	2b08      	cmp	r3, #8
 8003448:	d11c      	bne.n	8003484 <HAL_RCC_OscConfig+0x16c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344a:	4b5f      	ldr	r3, [pc, #380]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d116      	bne.n	8003484 <HAL_RCC_OscConfig+0x16c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003456:	4b5c      	ldr	r3, [pc, #368]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_RCC_OscConfig+0x156>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d001      	beq.n	800346e <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e1c4      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346e:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4952      	ldr	r1, [pc, #328]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003482:	e03a      	b.n	80034fa <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d020      	beq.n	80034ce <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800348c:	4b4f      	ldr	r3, [pc, #316]	; (80035cc <HAL_RCC_OscConfig+0x2b4>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003492:	f7fd ff21 	bl	80012d8 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800349a:	f7fd ff1d 	bl	80012d8 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x194>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e1a5      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ac:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x182>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b8:	4b43      	ldr	r3, [pc, #268]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4940      	ldr	r1, [pc, #256]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	600b      	str	r3, [r1, #0]
 80034cc:	e015      	b.n	80034fa <HAL_RCC_OscConfig+0x1e2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ce:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <HAL_RCC_OscConfig+0x2b4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fd ff00 	bl	80012d8 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x1d6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034dc:	f7fd fefc 	bl	80012d8 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x1d6>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e184      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ee:	4b36      	ldr	r3, [pc, #216]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d030      	beq.n	8003568 <HAL_RCC_OscConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <HAL_RCC_OscConfig+0x224>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350e:	4b30      	ldr	r3, [pc, #192]	; (80035d0 <HAL_RCC_OscConfig+0x2b8>)
 8003510:	2201      	movs	r2, #1
 8003512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fd fee0 	bl	80012d8 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800351c:	f7fd fedc 	bl	80012d8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x216>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e164      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352e:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x204>
 800353a:	e015      	b.n	8003568 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353c:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCC_OscConfig+0x2b8>)
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7fd fec9 	bl	80012d8 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x244>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354a:	f7fd fec5 	bl	80012d8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x244>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e14d      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 800355e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80a0 	beq.w	80036b6 <HAL_RCC_OscConfig+0x39e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357a:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10f      	bne.n	80035a6 <HAL_RCC_OscConfig+0x28e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003594:	6413      	str	r3, [r2, #64]	; 0x40
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a2:	2301      	movs	r3, #1
 80035a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCC_OscConfig+0x2bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d121      	bne.n	80035f6 <HAL_RCC_OscConfig+0x2de>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <HAL_RCC_OscConfig+0x2bc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <HAL_RCC_OscConfig+0x2bc>)
 80035b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035be:	f7fd fe8b 	bl	80012d8 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	e011      	b.n	80035ea <HAL_RCC_OscConfig+0x2d2>
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800
 80035cc:	42470000 	.word	0x42470000
 80035d0:	42470e80 	.word	0x42470e80
 80035d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d8:	f7fd fe7e 	bl	80012d8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e106      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4b85      	ldr	r3, [pc, #532]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d106      	bne.n	800360c <HAL_RCC_OscConfig+0x2f4>
 80035fe:	4b81      	ldr	r3, [pc, #516]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a80      	ldr	r2, [pc, #512]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	e01c      	b.n	8003646 <HAL_RCC_OscConfig+0x32e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b05      	cmp	r3, #5
 8003612:	d10c      	bne.n	800362e <HAL_RCC_OscConfig+0x316>
 8003614:	4b7b      	ldr	r3, [pc, #492]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a7a      	ldr	r2, [pc, #488]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 800361a:	f043 0304 	orr.w	r3, r3, #4
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	4b78      	ldr	r3, [pc, #480]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a77      	ldr	r2, [pc, #476]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
 800362c:	e00b      	b.n	8003646 <HAL_RCC_OscConfig+0x32e>
 800362e:	4b75      	ldr	r3, [pc, #468]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a74      	ldr	r2, [pc, #464]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
 800363a:	4b72      	ldr	r3, [pc, #456]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a71      	ldr	r2, [pc, #452]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d015      	beq.n	800367a <HAL_RCC_OscConfig+0x362>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fd fe43 	bl	80012d8 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x354>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7fd fe3f 	bl	80012d8 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	; 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e0c5      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366c:	4b65      	ldr	r3, [pc, #404]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ee      	beq.n	8003656 <HAL_RCC_OscConfig+0x33e>
 8003678:	e014      	b.n	80036a4 <HAL_RCC_OscConfig+0x38c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367a:	f7fd fe2d 	bl	80012d8 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x380>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fd fe29 	bl	80012d8 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e0af      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003698:	4b5a      	ldr	r3, [pc, #360]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1ee      	bne.n	8003682 <HAL_RCC_OscConfig+0x36a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d105      	bne.n	80036b6 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036aa:	4b56      	ldr	r3, [pc, #344]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	4a55      	ldr	r2, [pc, #340]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 80036b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 809b 	beq.w	80037f6 <HAL_RCC_OscConfig+0x4de>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c0:	4b50      	ldr	r3, [pc, #320]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d05c      	beq.n	8003786 <HAL_RCC_OscConfig+0x46e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d141      	bne.n	8003758 <HAL_RCC_OscConfig+0x440>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d4:	4b4c      	ldr	r3, [pc, #304]	; (8003808 <HAL_RCC_OscConfig+0x4f0>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036da:	f7fd fdfd 	bl	80012d8 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x3dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fd fdf9 	bl	80012d8 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x3dc>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e081      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f4:	4b43      	ldr	r3, [pc, #268]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f0      	bne.n	80036e2 <HAL_RCC_OscConfig+0x3ca>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69da      	ldr	r2, [r3, #28]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	019b      	lsls	r3, r3, #6
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	3b01      	subs	r3, #1
 800371a:	041b      	lsls	r3, r3, #16
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	061b      	lsls	r3, r3, #24
 8003724:	4937      	ldr	r1, [pc, #220]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372a:	4b37      	ldr	r3, [pc, #220]	; (8003808 <HAL_RCC_OscConfig+0x4f0>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fd fdd2 	bl	80012d8 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x432>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003738:	f7fd fdce 	bl	80012d8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e056      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	4b2e      	ldr	r3, [pc, #184]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x420>
 8003756:	e04e      	b.n	80037f6 <HAL_RCC_OscConfig+0x4de>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003758:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <HAL_RCC_OscConfig+0x4f0>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fd fdbb 	bl	80012d8 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003766:	f7fd fdb7 	bl	80012d8 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e03f      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003778:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x44e>
 8003784:	e037      	b.n	80037f6 <HAL_RCC_OscConfig+0x4de>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e032      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003792:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d028      	beq.n	80037f2 <HAL_RCC_OscConfig+0x4da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d121      	bne.n	80037f2 <HAL_RCC_OscConfig+0x4da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d11a      	bne.n	80037f2 <HAL_RCC_OscConfig+0x4da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c2:	4013      	ands	r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d111      	bne.n	80037f2 <HAL_RCC_OscConfig+0x4da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	3b01      	subs	r3, #1
 80037dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_OscConfig+0x4da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x4de>
#endif
        {
          return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40007000 	.word	0x40007000
 8003804:	40023800 	.word	0x40023800
 8003808:	42470060 	.word	0x42470060

0800380c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0cc      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b68      	ldr	r3, [pc, #416]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d90c      	bls.n	8003848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b65      	ldr	r3, [pc, #404]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b63      	ldr	r3, [pc, #396]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0b8      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d020      	beq.n	8003896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003860:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a58      	ldr	r2, [pc, #352]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800386a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003878:	4b53      	ldr	r3, [pc, #332]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a52      	ldr	r2, [pc, #328]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003884:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	494d      	ldr	r1, [pc, #308]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d044      	beq.n	800392c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d119      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e07f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038da:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e067      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ea:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f023 0203 	bic.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4934      	ldr	r1, [pc, #208]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038fc:	f7fd fcec 	bl	80012d8 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	e00a      	b.n	800391a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003904:	f7fd fce8 	bl	80012d8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e04f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 020c 	and.w	r2, r3, #12
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	429a      	cmp	r2, r3
 800392a:	d1eb      	bne.n	8003904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d20c      	bcs.n	8003954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e032      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4916      	ldr	r1, [pc, #88]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	490e      	ldr	r1, [pc, #56]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003992:	f000 f821 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 8003996:	4602      	mov	r2, r0
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	490a      	ldr	r1, [pc, #40]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	5ccb      	ldrb	r3, [r1, r3]
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd fa56 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023c00 	.word	0x40023c00
 80039c8:	40023800 	.word	0x40023800
 80039cc:	0800902c 	.word	0x0800902c
 80039d0:	20000004 	.word	0x20000004
 80039d4:	20000008 	.word	0x20000008

080039d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	2300      	movs	r3, #0
 80039ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f0:	4b67      	ldr	r3, [pc, #412]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d00d      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x40>
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	f200 80bd 	bhi.w	8003b7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x34>
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d003      	beq.n	8003a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a0a:	e0b7      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a0c:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a0e:	60bb      	str	r3, [r7, #8]
       break;
 8003a10:	e0b7      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a12:	4b61      	ldr	r3, [pc, #388]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a14:	60bb      	str	r3, [r7, #8]
      break;
 8003a16:	e0b4      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a18:	4b5d      	ldr	r3, [pc, #372]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a22:	4b5b      	ldr	r3, [pc, #364]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d04d      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2e:	4b58      	ldr	r3, [pc, #352]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	099b      	lsrs	r3, r3, #6
 8003a34:	461a      	mov	r2, r3
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	ea02 0800 	and.w	r8, r2, r0
 8003a46:	ea03 0901 	and.w	r9, r3, r1
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	014b      	lsls	r3, r1, #5
 8003a58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a5c:	0142      	lsls	r2, r0, #5
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
 8003a62:	ebb0 0008 	subs.w	r0, r0, r8
 8003a66:	eb61 0109 	sbc.w	r1, r1, r9
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	018b      	lsls	r3, r1, #6
 8003a74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a78:	0182      	lsls	r2, r0, #6
 8003a7a:	1a12      	subs	r2, r2, r0
 8003a7c:	eb63 0301 	sbc.w	r3, r3, r1
 8003a80:	f04f 0000 	mov.w	r0, #0
 8003a84:	f04f 0100 	mov.w	r1, #0
 8003a88:	00d9      	lsls	r1, r3, #3
 8003a8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a8e:	00d0      	lsls	r0, r2, #3
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	eb12 0208 	adds.w	r2, r2, r8
 8003a98:	eb43 0309 	adc.w	r3, r3, r9
 8003a9c:	f04f 0000 	mov.w	r0, #0
 8003aa0:	f04f 0100 	mov.w	r1, #0
 8003aa4:	0259      	lsls	r1, r3, #9
 8003aa6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003aaa:	0250      	lsls	r0, r2, #9
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	f7fc fb8a 	bl	80001d4 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e04a      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aca:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	099b      	lsrs	r3, r3, #6
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ada:	f04f 0100 	mov.w	r1, #0
 8003ade:	ea02 0400 	and.w	r4, r2, r0
 8003ae2:	ea03 0501 	and.w	r5, r3, r1
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	4629      	mov	r1, r5
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	014b      	lsls	r3, r1, #5
 8003af4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003af8:	0142      	lsls	r2, r0, #5
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	1b00      	subs	r0, r0, r4
 8003b00:	eb61 0105 	sbc.w	r1, r1, r5
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	018b      	lsls	r3, r1, #6
 8003b0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b12:	0182      	lsls	r2, r0, #6
 8003b14:	1a12      	subs	r2, r2, r0
 8003b16:	eb63 0301 	sbc.w	r3, r3, r1
 8003b1a:	f04f 0000 	mov.w	r0, #0
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	00d9      	lsls	r1, r3, #3
 8003b24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b28:	00d0      	lsls	r0, r2, #3
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	1912      	adds	r2, r2, r4
 8003b30:	eb45 0303 	adc.w	r3, r5, r3
 8003b34:	f04f 0000 	mov.w	r0, #0
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	0299      	lsls	r1, r3, #10
 8003b3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b42:	0290      	lsls	r0, r2, #10
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	f7fc fb3e 	bl	80001d4 <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	60bb      	str	r3, [r7, #8]
      break;
 8003b7a:	e002      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b7e:	60bb      	str	r3, [r7, #8]
      break;
 8003b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b82:	68bb      	ldr	r3, [r7, #8]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	00f42400 	.word	0x00f42400
 8003b98:	007a1200 	.word	0x007a1200

08003b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000004 	.word	0x20000004

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb8:	f7ff fff0 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0b5b      	lsrs	r3, r3, #13
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	0800903c 	.word	0x0800903c

08003bdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	220f      	movs	r2, #15
 8003bea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bec:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_GetClockConfig+0x5c>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0203 	and.w	r2, r3, #3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <HAL_RCC_GetClockConfig+0x5c>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c04:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <HAL_RCC_GetClockConfig+0x5c>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_GetClockConfig+0x5c>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	08db      	lsrs	r3, r3, #3
 8003c16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c1e:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <HAL_RCC_GetClockConfig+0x60>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0207 	and.w	r2, r3, #7
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	601a      	str	r2, [r3, #0]
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40023c00 	.word	0x40023c00

08003c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e041      	b.n	8003cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd fa92 	bl	8001190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f000 fa88 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d001      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e044      	b.n	8003d82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <HAL_TIM_Base_Start_IT+0xb0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d018      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x6c>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d22:	d013      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x6c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1a      	ldr	r2, [pc, #104]	; (8003d94 <HAL_TIM_Base_Start_IT+0xb4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00e      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x6c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a19      	ldr	r2, [pc, #100]	; (8003d98 <HAL_TIM_Base_Start_IT+0xb8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d009      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x6c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a17      	ldr	r2, [pc, #92]	; (8003d9c <HAL_TIM_Base_Start_IT+0xbc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x6c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d111      	bne.n	8003d70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b06      	cmp	r3, #6
 8003d5c:	d010      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	e007      	b.n	8003d80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40010000 	.word	0x40010000
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800
 8003d9c:	40000c00 	.word	0x40000c00
 8003da0:	40014000 	.word	0x40014000

08003da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d122      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d11b      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0202 	mvn.w	r2, #2
 8003dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f9b5 	bl	8004156 <HAL_TIM_IC_CaptureCallback>
 8003dec:	e005      	b.n	8003dfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f9a7 	bl	8004142 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f9b8 	bl	800416a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d122      	bne.n	8003e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d11b      	bne.n	8003e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0204 	mvn.w	r2, #4
 8003e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f98b 	bl	8004156 <HAL_TIM_IC_CaptureCallback>
 8003e40:	e005      	b.n	8003e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f97d 	bl	8004142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f98e 	bl	800416a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d122      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d11b      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0208 	mvn.w	r2, #8
 8003e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f961 	bl	8004156 <HAL_TIM_IC_CaptureCallback>
 8003e94:	e005      	b.n	8003ea2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f953 	bl	8004142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f964 	bl	800416a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d122      	bne.n	8003efc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d11b      	bne.n	8003efc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0210 	mvn.w	r2, #16
 8003ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f937 	bl	8004156 <HAL_TIM_IC_CaptureCallback>
 8003ee8:	e005      	b.n	8003ef6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f929 	bl	8004142 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f93a 	bl	800416a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d10e      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d107      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0201 	mvn.w	r2, #1
 8003f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fc fc72 	bl	800080c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	d10e      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f40:	2b80      	cmp	r3, #128	; 0x80
 8003f42:	d107      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fab2 	bl	80044b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d10e      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d107      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8ff 	bl	800417e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d10e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0220 	mvn.w	r2, #32
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa7c 	bl	80044a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0b4      	b.n	800413a <HAL_TIM_ConfigClockSource+0x186>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004008:	d03e      	beq.n	8004088 <HAL_TIM_ConfigClockSource+0xd4>
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400e:	f200 8087 	bhi.w	8004120 <HAL_TIM_ConfigClockSource+0x16c>
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004016:	f000 8086 	beq.w	8004126 <HAL_TIM_ConfigClockSource+0x172>
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401e:	d87f      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x16c>
 8004020:	2b70      	cmp	r3, #112	; 0x70
 8004022:	d01a      	beq.n	800405a <HAL_TIM_ConfigClockSource+0xa6>
 8004024:	2b70      	cmp	r3, #112	; 0x70
 8004026:	d87b      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x16c>
 8004028:	2b60      	cmp	r3, #96	; 0x60
 800402a:	d050      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x11a>
 800402c:	2b60      	cmp	r3, #96	; 0x60
 800402e:	d877      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b50      	cmp	r3, #80	; 0x50
 8004032:	d03c      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0xfa>
 8004034:	2b50      	cmp	r3, #80	; 0x50
 8004036:	d873      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b40      	cmp	r3, #64	; 0x40
 800403a:	d058      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x13a>
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d86f      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x16c>
 8004040:	2b30      	cmp	r3, #48	; 0x30
 8004042:	d064      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x15a>
 8004044:	2b30      	cmp	r3, #48	; 0x30
 8004046:	d86b      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x16c>
 8004048:	2b20      	cmp	r3, #32
 800404a:	d060      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x15a>
 800404c:	2b20      	cmp	r3, #32
 800404e:	d867      	bhi.n	8004120 <HAL_TIM_ConfigClockSource+0x16c>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d05c      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x15a>
 8004054:	2b10      	cmp	r3, #16
 8004056:	d05a      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x15a>
 8004058:	e062      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6899      	ldr	r1, [r3, #8]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f000 f98d 	bl	8004388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800407c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	609a      	str	r2, [r3, #8]
      break;
 8004086:	e04f      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6899      	ldr	r1, [r3, #8]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f000 f976 	bl	8004388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040aa:	609a      	str	r2, [r3, #8]
      break;
 80040ac:	e03c      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6859      	ldr	r1, [r3, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f000 f8ea 	bl	8004294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2150      	movs	r1, #80	; 0x50
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f943 	bl	8004352 <TIM_ITRx_SetConfig>
      break;
 80040cc:	e02c      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6859      	ldr	r1, [r3, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	461a      	mov	r2, r3
 80040dc:	f000 f909 	bl	80042f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2160      	movs	r1, #96	; 0x60
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f933 	bl	8004352 <TIM_ITRx_SetConfig>
      break;
 80040ec:	e01c      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f000 f8ca 	bl	8004294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2140      	movs	r1, #64	; 0x40
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f923 	bl	8004352 <TIM_ITRx_SetConfig>
      break;
 800410c:	e00c      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4619      	mov	r1, r3
 8004118:	4610      	mov	r0, r2
 800411a:	f000 f91a 	bl	8004352 <TIM_ITRx_SetConfig>
      break;
 800411e:	e003      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
      break;
 8004124:	e000      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a34      	ldr	r2, [pc, #208]	; (8004278 <TIM_Base_SetConfig+0xe4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00f      	beq.n	80041cc <TIM_Base_SetConfig+0x38>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d00b      	beq.n	80041cc <TIM_Base_SetConfig+0x38>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a31      	ldr	r2, [pc, #196]	; (800427c <TIM_Base_SetConfig+0xe8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d007      	beq.n	80041cc <TIM_Base_SetConfig+0x38>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a30      	ldr	r2, [pc, #192]	; (8004280 <TIM_Base_SetConfig+0xec>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_Base_SetConfig+0x38>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a2f      	ldr	r2, [pc, #188]	; (8004284 <TIM_Base_SetConfig+0xf0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d108      	bne.n	80041de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <TIM_Base_SetConfig+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01b      	beq.n	800421e <TIM_Base_SetConfig+0x8a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ec:	d017      	beq.n	800421e <TIM_Base_SetConfig+0x8a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a22      	ldr	r2, [pc, #136]	; (800427c <TIM_Base_SetConfig+0xe8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <TIM_Base_SetConfig+0x8a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a21      	ldr	r2, [pc, #132]	; (8004280 <TIM_Base_SetConfig+0xec>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00f      	beq.n	800421e <TIM_Base_SetConfig+0x8a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a20      	ldr	r2, [pc, #128]	; (8004284 <TIM_Base_SetConfig+0xf0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00b      	beq.n	800421e <TIM_Base_SetConfig+0x8a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <TIM_Base_SetConfig+0xf4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d007      	beq.n	800421e <TIM_Base_SetConfig+0x8a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a1e      	ldr	r2, [pc, #120]	; (800428c <TIM_Base_SetConfig+0xf8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_Base_SetConfig+0x8a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <TIM_Base_SetConfig+0xfc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d108      	bne.n	8004230 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a08      	ldr	r2, [pc, #32]	; (8004278 <TIM_Base_SetConfig+0xe4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d103      	bne.n	8004264 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	615a      	str	r2, [r3, #20]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40014000 	.word	0x40014000
 800428c:	40014400 	.word	0x40014400
 8004290:	40014800 	.word	0x40014800

08004294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f023 0201 	bic.w	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f023 030a 	bic.w	r3, r3, #10
 80042d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b087      	sub	sp, #28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f023 0210 	bic.w	r2, r3, #16
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800431c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	031b      	lsls	r3, r3, #12
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800432e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	f043 0307 	orr.w	r3, r3, #7
 8004374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	609a      	str	r2, [r3, #8]
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	021a      	lsls	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	609a      	str	r2, [r3, #8]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043dc:	2302      	movs	r3, #2
 80043de:	e050      	b.n	8004482 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d018      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442c:	d013      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a18      	ldr	r2, [pc, #96]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00e      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a16      	ldr	r2, [pc, #88]	; (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d009      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a15      	ldr	r2, [pc, #84]	; (800449c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d004      	beq.n	8004456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a13      	ldr	r2, [pc, #76]	; (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d10c      	bne.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800445c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	4313      	orrs	r3, r2
 8004466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40010000 	.word	0x40010000
 8004494:	40000400 	.word	0x40000400
 8004498:	40000800 	.word	0x40000800
 800449c:	40000c00 	.word	0x40000c00
 80044a0:	40014000 	.word	0x40014000

080044a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044cc:	b084      	sub	sp, #16
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	f107 001c 	add.w	r0, r7, #28
 80044da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d122      	bne.n	800452a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800450c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d105      	bne.n	800451e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f9a0 	bl	8004864 <USB_CoreReset>
 8004524:	4603      	mov	r3, r0
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	e01a      	b.n	8004560 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f994 	bl	8004864 <USB_CoreReset>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
 8004552:	e005      	b.n	8004560 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10b      	bne.n	800457e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f043 0206 	orr.w	r2, r3, #6
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800457e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800458a:	b004      	add	sp, #16
 800458c:	4770      	bx	lr

0800458e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f043 0201 	orr.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f023 0201 	bic.w	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d115      	bne.n	8004620 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004600:	2001      	movs	r0, #1
 8004602:	f7fc fe75 	bl	80012f0 <HAL_Delay>
      ms++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3301      	adds	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f91a 	bl	8004846 <USB_GetMode>
 8004612:	4603      	mov	r3, r0
 8004614:	2b01      	cmp	r3, #1
 8004616:	d01e      	beq.n	8004656 <USB_SetCurrentMode+0x84>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b31      	cmp	r3, #49	; 0x31
 800461c:	d9f0      	bls.n	8004600 <USB_SetCurrentMode+0x2e>
 800461e:	e01a      	b.n	8004656 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d115      	bne.n	8004652 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004632:	2001      	movs	r0, #1
 8004634:	f7fc fe5c 	bl	80012f0 <HAL_Delay>
      ms++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3301      	adds	r3, #1
 800463c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f901 	bl	8004846 <USB_GetMode>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <USB_SetCurrentMode+0x84>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b31      	cmp	r3, #49	; 0x31
 800464e:	d9f0      	bls.n	8004632 <USB_SetCurrentMode+0x60>
 8004650:	e001      	b.n	8004656 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e005      	b.n	8004662 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b32      	cmp	r3, #50	; 0x32
 800465a:	d101      	bne.n	8004660 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	019b      	lsls	r3, r3, #6
 800467e:	f043 0220 	orr.w	r2, r3, #32
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <USB_FlushTxFifo+0x44>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e006      	b.n	80046a4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d0f1      	beq.n	8004686 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	00030d40 	.word	0x00030d40

080046b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2210      	movs	r2, #16
 80046c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3301      	adds	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <USB_FlushRxFifo+0x3c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e006      	b.n	80046e4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	2b10      	cmp	r3, #16
 80046e0:	d0f1      	beq.n	80046c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	00030d40 	.word	0x00030d40

080046f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	4611      	mov	r1, r2
 8004700:	461a      	mov	r2, r3
 8004702:	460b      	mov	r3, r1
 8004704:	71fb      	strb	r3, [r7, #7]
 8004706:	4613      	mov	r3, r2
 8004708:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004712:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004716:	2b00      	cmp	r3, #0
 8004718:	d123      	bne.n	8004762 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800471a:	88bb      	ldrh	r3, [r7, #4]
 800471c:	3303      	adds	r3, #3
 800471e:	089b      	lsrs	r3, r3, #2
 8004720:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e018      	b.n	800475a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	031a      	lsls	r2, r3, #12
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4413      	add	r3, r2
 8004730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004734:	461a      	mov	r2, r3
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	3301      	adds	r3, #1
 8004740:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3301      	adds	r3, #1
 8004746:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	3301      	adds	r3, #1
 800474c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	3301      	adds	r3, #1
 8004752:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	3301      	adds	r3, #1
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	429a      	cmp	r2, r3
 8004760:	d3e2      	bcc.n	8004728 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3724      	adds	r7, #36	; 0x24
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004770:	b480      	push	{r7}
 8004772:	b08b      	sub	sp, #44	; 0x2c
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	4613      	mov	r3, r2
 800477c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	089b      	lsrs	r3, r3, #2
 800478a:	b29b      	uxth	r3, r3
 800478c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004796:	2300      	movs	r3, #0
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	e014      	b.n	80047c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	3301      	adds	r3, #1
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	3301      	adds	r3, #1
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	3301      	adds	r3, #1
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	3301      	adds	r3, #1
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	3301      	adds	r3, #1
 80047c4:	623b      	str	r3, [r7, #32]
 80047c6:	6a3a      	ldr	r2, [r7, #32]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d3e6      	bcc.n	800479c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047ce:	8bfb      	ldrh	r3, [r7, #30]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01e      	beq.n	8004812 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047de:	461a      	mov	r2, r3
 80047e0:	f107 0310 	add.w	r3, r7, #16
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	701a      	strb	r2, [r3, #0]
      i++;
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	3301      	adds	r3, #1
 80047fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	3301      	adds	r3, #1
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004806:	8bfb      	ldrh	r3, [r7, #30]
 8004808:	3b01      	subs	r3, #1
 800480a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800480c:	8bfb      	ldrh	r3, [r7, #30]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1ea      	bne.n	80047e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004814:	4618      	mov	r0, r3
 8004816:	372c      	adds	r7, #44	; 0x2c
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4013      	ands	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004838:	68fb      	ldr	r3, [r7, #12]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0301 	and.w	r3, r3, #1
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3301      	adds	r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <USB_CoreReset+0x60>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e01a      	b.n	80048b6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	daf3      	bge.n	8004870 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f043 0201 	orr.w	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <USB_CoreReset+0x60>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e006      	b.n	80048b6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d0f1      	beq.n	8004898 <USB_CoreReset+0x34>

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	00030d40 	.word	0x00030d40

080048c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048c8:	b084      	sub	sp, #16
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	f107 001c 	add.w	r0, r7, #28
 80048d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048e4:	461a      	mov	r2, r3
 80048e6:	2300      	movs	r3, #0
 80048e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	2b01      	cmp	r3, #1
 800491e:	d10a      	bne.n	8004936 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800492e:	f043 0304 	orr.w	r3, r3, #4
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e014      	b.n	8004960 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004944:	f023 0304 	bic.w	r3, r3, #4
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e009      	b.n	8004960 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800495a:	f023 0304 	bic.w	r3, r3, #4
 800495e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004960:	2110      	movs	r1, #16
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff fe82 	bl	800466c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff fea3 	bl	80046b4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e015      	b.n	80049a0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4413      	add	r3, r2
 800497c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004980:	461a      	mov	r2, r3
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
 8004986:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004994:	461a      	mov	r2, r3
 8004996:	2300      	movs	r3, #0
 8004998:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3301      	adds	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d3e5      	bcc.n	8004974 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f04f 32ff 	mov.w	r2, #4294967295
 80049b4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00b      	beq.n	80049da <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a13      	ldr	r2, [pc, #76]	; (8004a1c <USB_HostInit+0x154>)
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <USB_HostInit+0x158>)
 80049d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80049d8:	e009      	b.n	80049ee <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2280      	movs	r2, #128	; 0x80
 80049de:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <USB_HostInit+0x15c>)
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a0f      	ldr	r2, [pc, #60]	; (8004a28 <USB_HostInit+0x160>)
 80049ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f043 0210 	orr.w	r2, r3, #16
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699a      	ldr	r2, [r3, #24]
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <USB_HostInit+0x164>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a18:	b004      	add	sp, #16
 8004a1a:	4770      	bx	lr
 8004a1c:	01000200 	.word	0x01000200
 8004a20:	00e00300 	.word	0x00e00300
 8004a24:	00600080 	.word	0x00600080
 8004a28:	004000e0 	.word	0x004000e0
 8004a2c:	a3200008 	.word	0xa3200008

08004a30 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	68f9      	ldr	r1, [r7, #12]
 8004a64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d107      	bne.n	8004a82 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a7e:	6053      	str	r3, [r2, #4]
 8004a80:	e009      	b.n	8004a96 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d106      	bne.n	8004a96 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f241 7370 	movw	r3, #6000	; 0x1770
 8004a94:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ac4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004ad4:	2064      	movs	r0, #100	; 0x64
 8004ad6:	f7fc fc0b 	bl	80012f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004ae8:	200a      	movs	r0, #10
 8004aea:	f7fc fc01 	bl	80012f0 <HAL_Delay>

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d109      	bne.n	8004b3c <USB_DriveVbus+0x44>
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d106      	bne.n	8004b3c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b3a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b46:	d109      	bne.n	8004b5c <USB_DriveVbus+0x64>
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b5a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	0c5b      	lsrs	r3, r3, #17
 8004b88:	f003 0303 	and.w	r3, r3, #3
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	b29b      	uxth	r3, r3
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4603      	mov	r3, r0
 8004bcc:	70fb      	strb	r3, [r7, #3]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	70bb      	strb	r3, [r7, #2]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bea:	461a      	mov	r2, r3
 8004bec:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004bf2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d87e      	bhi.n	8004cf8 <USB_HC_Init+0x13c>
 8004bfa:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <USB_HC_Init+0x44>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004cbb 	.word	0x08004cbb
 8004c08:	08004c11 	.word	0x08004c11
 8004c0c:	08004c7d 	.word	0x08004c7d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	da10      	bge.n	8004c4e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004c4c:	e057      	b.n	8004cfe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d051      	beq.n	8004cfe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c78:	60d3      	str	r3, [r2, #12]
      break;
 8004c7a:	e040      	b.n	8004cfe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004c8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	da34      	bge.n	8004d02 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	0151      	lsls	r1, r2, #5
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	440a      	add	r2, r1
 8004cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004cb8:	e023      	b.n	8004d02 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f240 2325 	movw	r3, #549	; 0x225
 8004ccc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004cce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	da17      	bge.n	8004d06 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cf0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004cf4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004cf6:	e006      	b.n	8004d06 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	77fb      	strb	r3, [r7, #31]
      break;
 8004cfc:	e004      	b.n	8004d08 <USB_HC_Init+0x14c>
      break;
 8004cfe:	bf00      	nop
 8004d00:	e002      	b.n	8004d08 <USB_HC_Init+0x14c>
      break;
 8004d02:	bf00      	nop
 8004d04:	e000      	b.n	8004d08 <USB_HC_Init+0x14c>
      break;
 8004d06:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	2101      	movs	r1, #1
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	6939      	ldr	r1, [r7, #16]
 8004d1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d22:	4313      	orrs	r3, r2
 8004d24:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004d32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	da03      	bge.n	8004d42 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e001      	b.n	8004d46 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff ff0f 	bl	8004b6a <USB_GetHostSpeed>
 8004d4c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004d4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d106      	bne.n	8004d64 <USB_HC_Init+0x1a8>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d003      	beq.n	8004d64 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	e001      	b.n	8004d68 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d68:	787b      	ldrb	r3, [r7, #1]
 8004d6a:	059b      	lsls	r3, r3, #22
 8004d6c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d70:	78bb      	ldrb	r3, [r7, #2]
 8004d72:	02db      	lsls	r3, r3, #11
 8004d74:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d78:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d7e:	049b      	lsls	r3, r3, #18
 8004d80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d84:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d8c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	0159      	lsls	r1, r3, #5
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	440b      	add	r3, r1
 8004d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004da4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004da6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d10f      	bne.n	8004dce <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dcc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004dce:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08c      	sub	sp, #48	; 0x30
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	785b      	ldrb	r3, [r3, #1]
 8004dee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004df4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d02d      	beq.n	8004e5e <USB_HC_StartXfer+0x86>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	791b      	ldrb	r3, [r3, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d129      	bne.n	8004e5e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d117      	bne.n	8004e40 <USB_HC_StartXfer+0x68>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	79db      	ldrb	r3, [r3, #7]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <USB_HC_StartXfer+0x48>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	79db      	ldrb	r3, [r3, #7]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d10f      	bne.n	8004e40 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	6a3a      	ldr	r2, [r7, #32]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <USB_HC_StartXfer+0x86>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	795b      	ldrb	r3, [r3, #5]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d107      	bne.n	8004e5e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	4619      	mov	r1, r3
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fa2f 	bl	80052b8 <USB_DoPing>
      return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e0f8      	b.n	8005050 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d018      	beq.n	8004e98 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	8912      	ldrh	r2, [r2, #8]
 8004e6e:	4413      	add	r3, r2
 8004e70:	3b01      	subs	r3, #1
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	8912      	ldrh	r2, [r2, #8]
 8004e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e7a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004e7c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e7e:	8b7b      	ldrh	r3, [r7, #26]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d90b      	bls.n	8004e9c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004e84:	8b7b      	ldrh	r3, [r7, #26]
 8004e86:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004e88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	8912      	ldrh	r2, [r2, #8]
 8004e8e:	fb02 f203 	mul.w	r2, r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	611a      	str	r2, [r3, #16]
 8004e96:	e001      	b.n	8004e9c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	78db      	ldrb	r3, [r3, #3]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ea4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	8912      	ldrh	r2, [r2, #8]
 8004eaa:	fb02 f203 	mul.w	r2, r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	611a      	str	r2, [r3, #16]
 8004eb2:	e003      	b.n	8004ebc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ec4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ec6:	04d9      	lsls	r1, r3, #19
 8004ec8:	4b63      	ldr	r3, [pc, #396]	; (8005058 <USB_HC_StartXfer+0x280>)
 8004eca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ecc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	7a9b      	ldrb	r3, [r3, #10]
 8004ed2:	075b      	lsls	r3, r3, #29
 8004ed4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ed8:	69f9      	ldr	r1, [r7, #28]
 8004eda:	0148      	lsls	r0, r1, #5
 8004edc:	6a39      	ldr	r1, [r7, #32]
 8004ede:	4401      	add	r1, r0
 8004ee0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ee4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ee6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004ee8:	79fb      	ldrb	r3, [r7, #7]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	68d9      	ldr	r1, [r3, #12]
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efe:	460a      	mov	r2, r1
 8004f00:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bf0c      	ite	eq
 8004f12:	2301      	moveq	r3, #1
 8004f14:	2300      	movne	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	6a3a      	ldr	r2, [r7, #32]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f38:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	7e7b      	ldrb	r3, [r7, #25]
 8004f4a:	075b      	lsls	r3, r3, #29
 8004f4c:	69f9      	ldr	r1, [r7, #28]
 8004f4e:	0148      	lsls	r0, r1, #5
 8004f50:	6a39      	ldr	r1, [r7, #32]
 8004f52:	4401      	add	r1, r0
 8004f54:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f72:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	78db      	ldrb	r3, [r3, #3]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	e003      	b.n	8004f8e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f8c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f94:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e04e      	b.n	8005050 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	78db      	ldrb	r3, [r3, #3]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d149      	bne.n	800504e <USB_HC_StartXfer+0x276>
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d045      	beq.n	800504e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	79db      	ldrb	r3, [r3, #7]
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d830      	bhi.n	800502c <USB_HC_StartXfer+0x254>
 8004fca:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <USB_HC_StartXfer+0x1f8>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08004fe1 	.word	0x08004fe1
 8004fd4:	08005005 	.word	0x08005005
 8004fd8:	08004fe1 	.word	0x08004fe1
 8004fdc:	08005005 	.word	0x08005005
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	3303      	adds	r3, #3
 8004fe6:	089b      	lsrs	r3, r3, #2
 8004fe8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004fea:	8afa      	ldrh	r2, [r7, #22]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d91c      	bls.n	8005030 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f043 0220 	orr.w	r2, r3, #32
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	619a      	str	r2, [r3, #24]
        }
        break;
 8005002:	e015      	b.n	8005030 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	3303      	adds	r3, #3
 800500a:	089b      	lsrs	r3, r3, #2
 800500c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800500e:	8afa      	ldrh	r2, [r7, #22]
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	b29b      	uxth	r3, r3
 800501a:	429a      	cmp	r2, r3
 800501c:	d90a      	bls.n	8005034 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	619a      	str	r2, [r3, #24]
        }
        break;
 800502a:	e003      	b.n	8005034 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800502c:	bf00      	nop
 800502e:	e002      	b.n	8005036 <USB_HC_StartXfer+0x25e>
        break;
 8005030:	bf00      	nop
 8005032:	e000      	b.n	8005036 <USB_HC_StartXfer+0x25e>
        break;
 8005034:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	68d9      	ldr	r1, [r3, #12]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	785a      	ldrb	r2, [r3, #1]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	b29b      	uxth	r3, r3
 8005044:	2000      	movs	r0, #0
 8005046:	9000      	str	r0, [sp, #0]
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7ff fb53 	bl	80046f4 <USB_WritePacket>
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3728      	adds	r7, #40	; 0x28
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	1ff80000 	.word	0x1ff80000

0800505c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	b29b      	uxth	r3, r3
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800507e:	b480      	push	{r7}
 8005080:	b089      	sub	sp, #36	; 0x24
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	0c9b      	lsrs	r3, r3, #18
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	0fdb      	lsrs	r3, r3, #31
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d104      	bne.n	80050d8 <USB_HC_Halt+0x5a>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e0e8      	b.n	80052aa <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <USB_HC_Halt+0x66>
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d173      	bne.n	80051cc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005102:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	f040 80cb 	bne.w	80052a8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d143      	bne.n	80051a6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4413      	add	r3, r2
 8005126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	440a      	add	r2, r1
 8005134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800513c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	4413      	add	r3, r2
 8005146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	440a      	add	r2, r1
 8005154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800515c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	4413      	add	r3, r2
 8005166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	0151      	lsls	r1, r2, #5
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	440a      	add	r2, r1
 8005174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005178:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800517c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	3301      	adds	r3, #1
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800518a:	d81d      	bhi.n	80051c8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	4413      	add	r3, r2
 8005194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800519e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a2:	d0ec      	beq.n	800517e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051a4:	e080      	b.n	80052a8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051c4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051c6:	e06f      	b.n	80052a8 <USB_HC_Halt+0x22a>
            break;
 80051c8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051ca:	e06d      	b.n	80052a8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	0151      	lsls	r1, r2, #5
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	440a      	add	r2, r1
 80051e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051ea:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d143      	bne.n	8005284 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	440a      	add	r2, r1
 8005212:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005216:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800521a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	440a      	add	r2, r1
 8005232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800523a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	440a      	add	r2, r1
 8005252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005256:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800525a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	3301      	adds	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005268:	d81d      	bhi.n	80052a6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	4413      	add	r3, r2
 8005272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800527c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005280:	d0ec      	beq.n	800525c <USB_HC_Halt+0x1de>
 8005282:	e011      	b.n	80052a8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	440a      	add	r2, r1
 800529a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	e000      	b.n	80052a8 <USB_HC_Halt+0x22a>
          break;
 80052a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3724      	adds	r7, #36	; 0x24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80052cc:	2301      	movs	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	04da      	lsls	r2, r3, #19
 80052d4:	4b15      	ldr	r3, [pc, #84]	; (800532c <USB_DoPing+0x74>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005300:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005308:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4413      	add	r3, r2
 8005312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005316:	461a      	mov	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	1ff80000 	.word	0x1ff80000

08005330 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff f935 	bl	80045b0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005346:	2110      	movs	r1, #16
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff f98f 	bl	800466c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff f9b0 	bl	80046b4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	e01f      	b.n	800539a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005370:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005378:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005380:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538e:	461a      	mov	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	3301      	adds	r3, #1
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2b0f      	cmp	r3, #15
 800539e:	d9dc      	bls.n	800535a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	e034      	b.n	8005410 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053bc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053da:	461a      	mov	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	3301      	adds	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ec:	d80c      	bhi.n	8005408 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005404:	d0ec      	beq.n	80053e0 <USB_StopHost+0xb0>
 8005406:	e000      	b.n	800540a <USB_StopHost+0xda>
        break;
 8005408:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	3301      	adds	r3, #1
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	2b0f      	cmp	r3, #15
 8005414:	d9c7      	bls.n	80053a6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800541c:	461a      	mov	r2, r3
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f04f 32ff 	mov.w	r2, #4294967295
 800542a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff f8ae 	bl	800458e <USB_EnableGlobalInt>

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <USBH_HID_InterfaceInit>:
 phost->pActiveClass->iface_initnum  - variable where last index of an active interface is hold. It
 is used as an index of HID_Handle index as well.

 phost->pActiveClass->interfaces - this variable hold all successfully initialised interfaces.
 */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost) {
 800543c:	b5b0      	push	{r4, r5, r7, lr}
 800543e:	b08c      	sub	sp, #48	; 0x30
 8005440:	af04      	add	r7, sp, #16
 8005442:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8005444:	2301      	movs	r3, #1
 8005446:	77fb      	strb	r3, [r7, #31]
	USBH_StatusTypeDef ctlStatus = USBH_BUSY;
 8005448:	2301      	movs	r3, #1
 800544a:	77bb      	strb	r3, [r7, #30]
	HID_HandleTypeDef *HID_Handle;
	USBH_InterfaceDescTypeDef *Itf_Desc;

	uint8_t iface_num = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	76fb      	strb	r3, [r7, #27]
	uint8_t i = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	777b      	strb	r3, [r7, #29]
	uint8_t max_ep;
	uint8_t num = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	773b      	strb	r3, [r7, #28]

	switch (phost->pActiveClass->iface_init) {
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800545e:	7f9b      	ldrb	r3, [r3, #30]
 8005460:	2b07      	cmp	r3, #7
 8005462:	f200 8297 	bhi.w	8005994 <USBH_HID_InterfaceInit+0x558>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <USBH_HID_InterfaceInit+0x30>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	0800548d 	.word	0x0800548d
 8005470:	0800553f 	.word	0x0800553f
 8005474:	080055b5 	.word	0x080055b5
 8005478:	0800562d 	.word	0x0800562d
 800547c:	08005707 	.word	0x08005707
 8005480:	08005863 	.word	0x08005863
 8005484:	08005893 	.word	0x08005893
 8005488:	08005949 	.word	0x08005949
	case IFACE_INIT: {

		phost->pActiveClass->iface_initnum = 0U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005492:	2200      	movs	r2, #0
 8005494:	775a      	strb	r2, [r3, #29]

		//init all possible HID_Handlers even if not all will be used.

		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 8005496:	e044      	b.n	8005522 <USBH_HID_InterfaceInit+0xe6>
			phost->pActiveClass->pData[i] = (HID_HandleTypeDef*) USBH_malloc(
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800549e:	7f7d      	ldrb	r5, [r7, #29]
 80054a0:	206c      	movs	r0, #108	; 0x6c
 80054a2:	f003 fcd5 	bl	8008e50 <malloc>
 80054a6:	4603      	mov	r3, r0
 80054a8:	461a      	mov	r2, r3
 80054aa:	f105 0308 	add.w	r3, r5, #8
 80054ae:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
					sizeof(HID_HandleTypeDef));
			HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054b8:	7f7a      	ldrb	r2, [r7, #29]
 80054ba:	3208      	adds	r2, #8
 80054bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c0:	617b      	str	r3, [r7, #20]
			memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 80054c2:	226c      	movs	r2, #108	; 0x6c
 80054c4:	2100      	movs	r1, #0
 80054c6:	6978      	ldr	r0, [r7, #20]
 80054c8:	f003 fcd2 	bl	8008e70 <memset>

			// HID_Handle = phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
			HID_Handle->state = HID_INIT;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2200      	movs	r2, #0
 80054d0:	709a      	strb	r2, [r3, #2]
			HID_Handle->ctl_state = HID_REQ_INIT;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	715a      	strb	r2, [r3, #5]
			HID_Handle->ep_addr =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bEndpointAddress;
 80054d8:	7f7b      	ldrb	r3, [r7, #29]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	211a      	movs	r1, #26
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	4413      	add	r3, r2
 80054e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054e8:	781a      	ldrb	r2, [r3, #0]
			HID_Handle->ep_addr =
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	769a      	strb	r2, [r3, #26]
			HID_Handle->length =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].wMaxPacketSize;
 80054ee:	7f7b      	ldrb	r3, [r7, #29]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	211a      	movs	r1, #26
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054fe:	881a      	ldrh	r2, [r3, #0]
			HID_Handle->length =
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	831a      	strh	r2, [r3, #24]
			HID_Handle->poll =
					phost->device.CfgDesc.Itf_Desc[i].Ep_Desc[0].bInterval;
 8005504:	7f7b      	ldrb	r3, [r7, #29]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	211a      	movs	r1, #26
 800550a:	fb01 f303 	mul.w	r3, r1, r3
 800550e:	4413      	add	r3, r2
 8005510:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	b29a      	uxth	r2, r3
			HID_Handle->poll =
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	839a      	strh	r2, [r3, #28]
		for (; i < USBH_MAX_NUM_INTERFACES; i++) {
 800551c:	7f7b      	ldrb	r3, [r7, #29]
 800551e:	3301      	adds	r3, #1
 8005520:	777b      	strb	r3, [r7, #29]
 8005522:	7f7b      	ldrb	r3, [r7, #29]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d9b7      	bls.n	8005498 <USBH_HID_InterfaceInit+0x5c>

		}
		phost->pActiveClass->interfaces = 0U;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800552e:	2200      	movs	r2, #0
 8005530:	771a      	strb	r2, [r3, #28]
		phost->pActiveClass->iface_init = IFACE_READHID;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005538:	2201      	movs	r2, #1
 800553a:	779a      	strb	r2, [r3, #30]

	}
		break;
 800553c:	e22a      	b.n	8005994 <USBH_HID_InterfaceInit+0x558>

	case IFACE_READHID: {
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005544:	7f5b      	ldrb	r3, [r3, #29]
 8005546:	4619      	mov	r1, r3
		iface_num =
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	231a      	movs	r3, #26
 800554c:	fb03 f301 	mul.w	r3, r3, r1
 8005550:	4413      	add	r3, r2
 8005552:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 800555a:	7efb      	ldrb	r3, [r7, #27]
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f001 ff28 	bl	80073b4 <USBH_SelectInterface>

		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
		if (USBH_HID_GetHIDDescriptor(phost, USB_HID_DESC_SIZE,
 800556a:	7f5b      	ldrb	r3, [r3, #29]
 800556c:	461a      	mov	r2, r3
 800556e:	2109      	movs	r1, #9
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fb9b 	bl	8005cac <USBH_HID_GetHIDDescriptor>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	f040 8204 	bne.w	8005986 <USBH_HID_InterfaceInit+0x54a>

			HID_Handle =
					phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	f8d2 237c 	ldr.w	r2, [r2, #892]	; 0x37c
 800558a:	7f52      	ldrb	r2, [r2, #29]
			HID_Handle =
 800558c:	3208      	adds	r2, #8
 800558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005592:	617b      	str	r3, [r7, #20]
			USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.Data);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f000 fbef 	bl	8005d86 <USBH_HID_ParseHIDDesc>
			phost->pActiveClass->iface_init = IFACE_READHIDRPTDESC;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055ae:	2202      	movs	r2, #2
 80055b0:	779a      	strb	r2, [r3, #30]
		} else {
			//TODO Check if device is XBOX360 game controller as it doesn't do HID Descriptors aparently
		}

	}
		break;
 80055b2:	e1e8      	b.n	8005986 <USBH_HID_InterfaceInit+0x54a>

	case IFACE_READHIDRPTDESC: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	f8d2 237c 	ldr.w	r2, [r2, #892]	; 0x37c
 80055c0:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 80055c2:	3208      	adds	r2, #8
 80055c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c8:	617b      	str	r3, [r7, #20]
		iface_num =
				phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum].bInterfaceNumber;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055d0:	7f5b      	ldrb	r3, [r3, #29]
 80055d2:	4619      	mov	r1, r3
		iface_num =
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	231a      	movs	r3, #26
 80055d8:	fb03 f301 	mul.w	r3, r3, r1
 80055dc:	4413      	add	r3, r2
 80055de:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	76fb      	strb	r3, [r7, #27]
		USBH_SelectInterface(phost, iface_num);
 80055e6:	7efb      	ldrb	r3, [r7, #27]
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 fee2 	bl	80073b4 <USBH_SelectInterface>

		if (USBH_HID_GetHIDReportDescriptor(phost,
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
				HID_Handle->HID_Desc.wItemLength,
				phost->pActiveClass->iface_initnum) == USBH_OK) {
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
		if (USBH_HID_GetHIDReportDescriptor(phost,
 80055fa:	7f5b      	ldrb	r3, [r3, #29]
 80055fc:	461a      	mov	r2, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fb37 	bl	8005c72 <USBH_HID_GetHIDReportDescriptor>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	f040 81bf 	bne.w	800598a <USBH_HID_InterfaceInit+0x54e>

			parse_report_descriptor(phost->device.Data,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	3330      	adds	r3, #48	; 0x30
 800561a:	461a      	mov	r2, r3
 800561c:	f001 fb02 	bl	8006c24 <parse_report_descriptor>
					HID_Handle->HID_Desc.wItemLength,
					&(HID_Handle->HID_Desc.RptDesc));

			phost->pActiveClass->iface_init = IFACE_INITSUBCLASS;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005626:	2203      	movs	r2, #3
 8005628:	779a      	strb	r2, [r3, #30]
		}
	}
		break;
 800562a:	e1ae      	b.n	800598a <USBH_HID_InterfaceInit+0x54e>

	case IFACE_INITSUBCLASS: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	f8d2 237c 	ldr.w	r2, [r2, #892]	; 0x37c
 8005638:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 800563a:	3208      	adds	r2, #8
 800563c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005640:	617b      	str	r3, [r7, #20]

		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005648:	7f5b      	ldrb	r3, [r3, #29]
 800564a:	461a      	mov	r2, r3
		Itf_Desc =
 800564c:	231a      	movs	r3, #26
 800564e:	fb03 f302 	mul.w	r3, r3, r2
 8005652:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	330a      	adds	r3, #10
 800565c:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	795b      	ldrb	r3, [r3, #5]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d107      	bne.n	8005676 <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	799b      	ldrb	r3, [r3, #6]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d103      	bne.n	8005676 <USBH_HID_InterfaceInit+0x23a>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	79db      	ldrb	r3, [r3, #7]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d007      	beq.n	8005686 <USBH_HID_InterfaceInit+0x24a>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD))
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d109      	bne.n	800569a <USBH_HID_InterfaceInit+0x25e>

				{
			HID_Handle->Init = USBH_HID_KeybdInit;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	4aac      	ldr	r2, [pc, #688]	; (800593c <USBH_HID_InterfaceInit+0x500>)
 800568a:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005692:	7f1a      	ldrb	r2, [r3, #28]
 8005694:	3201      	adds	r2, #1
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	771a      	strb	r2, [r3, #28]
		}

		if ((Itf_Desc->bInterfaceClass == 0x03
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	795b      	ldrb	r3, [r3, #5]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d107      	bne.n	80056b2 <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	799b      	ldrb	r3, [r3, #6]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d103      	bne.n	80056b2 <USBH_HID_InterfaceInit+0x276>
				&& Itf_Desc->bInterfaceProtocol == HID_MOUSE_BOOT_CODE)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	79db      	ldrb	r3, [r3, #7]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d007      	beq.n	80056c2 <USBH_HID_InterfaceInit+0x286>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE))
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d109      	bne.n	80056d6 <USBH_HID_InterfaceInit+0x29a>

				{
			HID_Handle->Init = USBH_HID_MouseInit;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	4a9e      	ldr	r2, [pc, #632]	; (8005940 <USBH_HID_InterfaceInit+0x504>)
 80056c6:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056ce:	7f1a      	ldrb	r2, [r3, #28]
 80056d0:	3201      	adds	r2, #1
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	771a      	strb	r2, [r3, #28]
		}

		if (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_JOYSTICK) {
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d109      	bne.n	80056fa <USBH_HID_InterfaceInit+0x2be>
			HID_Handle->Init = USBH_HID_GamepadInit;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4a96      	ldr	r2, [pc, #600]	; (8005944 <USBH_HID_InterfaceInit+0x508>)
 80056ea:	669a      	str	r2, [r3, #104]	; 0x68
			phost->pActiveClass->interfaces++;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056f2:	7f1a      	ldrb	r2, [r3, #28]
 80056f4:	3201      	adds	r2, #1
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	771a      	strb	r2, [r3, #28]
		}

		phost->pActiveClass->iface_init = IFACE_INITENDPNT;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005700:	2204      	movs	r2, #4
 8005702:	779a      	strb	r2, [r3, #30]
	}
		break;
 8005704:	e146      	b.n	8005994 <USBH_HID_InterfaceInit+0x558>

	case IFACE_INITENDPNT: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	f8d2 237c 	ldr.w	r2, [r2, #892]	; 0x37c
 8005712:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 8005714:	3208      	adds	r2, #8
 8005716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571a:	617b      	str	r3, [r7, #20]

		/* Check fo available number of endpoints*/
		/* Find the number of EPs in the Interface Descriptor*/
		/* Choose the lower number in order not to overrun the buffer allocated*/
		max_ep =
				((phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005722:	4619      	mov	r1, r3
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	231a      	movs	r3, #26
 8005728:	fb03 f301 	mul.w	r3, r3, r1
 800572c:	4413      	add	r3, r2
 800572e:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005732:	781b      	ldrb	r3, [r3, #0]
		max_ep =
 8005734:	2b02      	cmp	r3, #2
 8005736:	bf28      	it	cs
 8005738:	2302      	movcs	r3, #2
 800573a:	73fb      	strb	r3, [r7, #15]
						<= USBH_MAX_NUM_ENDPOINTS) ?
						phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bNumEndpoints :
						USBH_MAX_NUM_ENDPOINTS);

		/* Decode endpoint IN and OUT address from interface descriptor*/
		for (; num < max_ep; num++) {
 800573c:	e086      	b.n	800584c <USBH_HID_InterfaceInit+0x410>
			if (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005744:	4618      	mov	r0, r3
 8005746:	7f3b      	ldrb	r3, [r7, #28]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	3301      	adds	r3, #1
 800574c:	00d9      	lsls	r1, r3, #3
 800574e:	231a      	movs	r3, #26
 8005750:	fb03 f300 	mul.w	r3, r3, r0
 8005754:	440b      	add	r3, r1
 8005756:	4413      	add	r3, r2
 8005758:	f203 3346 	addw	r3, r3, #838	; 0x346
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	b25b      	sxtb	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	da38      	bge.n	80057d6 <USBH_HID_InterfaceInit+0x39a>
					& 0x80U) {
				HID_Handle->InEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800576a:	4618      	mov	r0, r3
 800576c:	7f3b      	ldrb	r3, [r7, #28]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	3301      	adds	r3, #1
 8005772:	00d9      	lsls	r1, r3, #3
 8005774:	231a      	movs	r3, #26
 8005776:	fb03 f300 	mul.w	r3, r3, r0
 800577a:	440b      	add	r3, r1
 800577c:	4413      	add	r3, r2
 800577e:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005782:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->InEp =
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	711a      	strb	r2, [r3, #4]
				HID_Handle->InPipe =\
 USBH_AllocPipe(phost, HID_Handle->InEp);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	791b      	ldrb	r3, [r3, #4]
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f002 fff3 	bl	800877a <USBH_AllocPipe>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
				HID_Handle->InPipe =\
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	705a      	strb	r2, [r3, #1]

				/* Open pipe for IN endpoint*/
				USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp,
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	7859      	ldrb	r1, [r3, #1]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	7918      	ldrb	r0, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	8b12      	ldrh	r2, [r2, #24]
 80057b4:	9202      	str	r2, [sp, #8]
 80057b6:	2203      	movs	r2, #3
 80057b8:	9201      	str	r2, [sp, #4]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	4623      	mov	r3, r4
 80057be:	4602      	mov	r2, r0
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f002 ffab 	bl	800871c <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	785b      	ldrb	r3, [r3, #1]
 80057ca:	2200      	movs	r2, #0
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f003 faad 	bl	8008d2e <USBH_LL_SetToggle>
 80057d4:	e037      	b.n	8005846 <USBH_HID_InterfaceInit+0x40a>

			} else {
				HID_Handle->OutEp =
						(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[num].bEndpointAddress);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80057dc:	4618      	mov	r0, r3
 80057de:	7f3b      	ldrb	r3, [r7, #28]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	3301      	adds	r3, #1
 80057e4:	00d9      	lsls	r1, r3, #3
 80057e6:	231a      	movs	r3, #26
 80057e8:	fb03 f300 	mul.w	r3, r3, r0
 80057ec:	440b      	add	r3, r1
 80057ee:	4413      	add	r3, r2
 80057f0:	f203 3346 	addw	r3, r3, #838	; 0x346
 80057f4:	781a      	ldrb	r2, [r3, #0]
				HID_Handle->OutEp =
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	70da      	strb	r2, [r3, #3]
				HID_Handle->OutPipe =\
 USBH_AllocPipe(phost,
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	78db      	ldrb	r3, [r3, #3]
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f002 ffba 	bl	800877a <USBH_AllocPipe>
 8005806:	4603      	mov	r3, r0
 8005808:	461a      	mov	r2, r3
				HID_Handle->OutPipe =\
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	701a      	strb	r2, [r3, #0]
						HID_Handle->OutEp);

				/* Open pipe for OUT endpoint*/
				USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp,
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	7819      	ldrb	r1, [r3, #0]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	78d8      	ldrb	r0, [r3, #3]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	8b12      	ldrh	r2, [r2, #24]
 8005826:	9202      	str	r2, [sp, #8]
 8005828:	2203      	movs	r2, #3
 800582a:	9201      	str	r2, [sp, #4]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	4623      	mov	r3, r4
 8005830:	4602      	mov	r2, r0
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f002 ff72 	bl	800871c <USBH_OpenPipe>
						phost->device.address, phost->device.speed,
						USB_EP_TYPE_INTR, HID_Handle->length);

				USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2200      	movs	r2, #0
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f003 fa74 	bl	8008d2e <USBH_LL_SetToggle>
		for (; num < max_ep; num++) {
 8005846:	7f3b      	ldrb	r3, [r7, #28]
 8005848:	3301      	adds	r3, #1
 800584a:	773b      	strb	r3, [r7, #28]
 800584c:	7f3a      	ldrb	r2, [r7, #28]
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	429a      	cmp	r2, r3
 8005852:	f4ff af74 	bcc.w	800573e <USBH_HID_InterfaceInit+0x302>
			}

		}

		phost->pActiveClass->iface_init = IFACE_SETPROTOCOL;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800585c:	2205      	movs	r2, #5
 800585e:	779a      	strb	r2, [r3, #30]
	}
		break;
 8005860:	e098      	b.n	8005994 <USBH_HID_InterfaceInit+0x558>

	case IFACE_SETPROTOCOL: {
		//Set protocol (0U boot, 1U report)

		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
				phost->device.current_interface);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
		ctlStatus = USBH_HID_SetProtocol(phost, 1U,
 8005868:	b29b      	uxth	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	2101      	movs	r1, #1
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fa67 	bl	8005d42 <USBH_HID_SetProtocol>
 8005874:	4603      	mov	r3, r0
 8005876:	77bb      	strb	r3, [r7, #30]

		if (ctlStatus == USBH_OK || ctlStatus == USBH_NOT_SUPPORTED) {
 8005878:	7fbb      	ldrb	r3, [r7, #30]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <USBH_HID_InterfaceInit+0x44a>
 800587e:	7fbb      	ldrb	r3, [r7, #30]
 8005880:	2b03      	cmp	r3, #3
 8005882:	f040 8084 	bne.w	800598e <USBH_HID_InterfaceInit+0x552>
			phost->pActiveClass->iface_init = IFACE_SETIDLE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800588c:	2206      	movs	r2, #6
 800588e:	779a      	strb	r2, [r3, #30]
		}

	}
		break;
 8005890:	e07d      	b.n	800598e <USBH_HID_InterfaceInit+0x552>

	case IFACE_SETIDLE: {
		HID_Handle =
				phost->pActiveClass->pData[phost->pActiveClass->iface_initnum];
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	f8d2 237c 	ldr.w	r2, [r2, #892]	; 0x37c
 800589e:	7f52      	ldrb	r2, [r2, #29]
		HID_Handle =
 80058a0:	3208      	adds	r2, #8
 80058a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a6:	617b      	str	r3, [r7, #20]
		Itf_Desc =
				&phost->device.CfgDesc.Itf_Desc[phost->pActiveClass->iface_initnum];
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058ae:	7f5b      	ldrb	r3, [r3, #29]
 80058b0:	461a      	mov	r2, r3
		Itf_Desc =
 80058b2:	231a      	movs	r3, #26
 80058b4:	fb03 f302 	mul.w	r3, r3, r2
 80058b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4413      	add	r3, r2
 80058c0:	330a      	adds	r3, #10
 80058c2:	613b      	str	r3, [r7, #16]

		if ((Itf_Desc->bInterfaceClass == 0x03
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	795b      	ldrb	r3, [r3, #5]
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d107      	bne.n	80058dc <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceSubClass == 0x01
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	799b      	ldrb	r3, [r3, #6]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d103      	bne.n	80058dc <USBH_HID_InterfaceInit+0x4a0>
				&& Itf_Desc->bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	79db      	ldrb	r3, [r3, #7]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d007      	beq.n	80058ec <USBH_HID_InterfaceInit+0x4b0>
				|| (HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_KEYBOARD)) {
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d10a      	bne.n	8005902 <USBH_HID_InterfaceInit+0x4c6>
			//set up polling at 500ms - 1 unit should be 4ms
			ctlStatus = USBH_HID_SetIdle(phost, 125U, 0U,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80058f2:	2200      	movs	r2, #0
 80058f4:	217d      	movs	r1, #125	; 0x7d
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9f5 	bl	8005ce6 <USBH_HID_SetIdle>
 80058fc:	4603      	mov	r3, r0
 80058fe:	77bb      	strb	r3, [r7, #30]
 8005900:	e009      	b.n	8005916 <USBH_HID_InterfaceInit+0x4da>
					phost->device.current_interface);
		} else {
			ctlStatus = USBH_HID_SetIdle(phost, 0U, 0U,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005908:	2200      	movs	r2, #0
 800590a:	2100      	movs	r1, #0
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f9ea 	bl	8005ce6 <USBH_HID_SetIdle>
 8005912:	4603      	mov	r3, r0
 8005914:	77bb      	strb	r3, [r7, #30]
					phost->device.current_interface);
		}

		if (ctlStatus == USBH_OK) {
 8005916:	7fbb      	ldrb	r3, [r7, #30]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d105      	bne.n	8005928 <USBH_HID_InterfaceInit+0x4ec>
			phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005922:	2207      	movs	r2, #7
 8005924:	779a      	strb	r2, [r3, #30]

			}
		}

	}
		break;
 8005926:	e034      	b.n	8005992 <USBH_HID_InterfaceInit+0x556>
			if (ctlStatus == USBH_NOT_SUPPORTED) {
 8005928:	7fbb      	ldrb	r3, [r7, #30]
 800592a:	2b03      	cmp	r3, #3
 800592c:	d131      	bne.n	8005992 <USBH_HID_InterfaceInit+0x556>
				phost->pActiveClass->iface_init = IFACE_SELECTIFACE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005934:	2207      	movs	r2, #7
 8005936:	779a      	strb	r2, [r3, #30]
		break;
 8005938:	e02b      	b.n	8005992 <USBH_HID_InterfaceInit+0x556>
 800593a:	bf00      	nop
 800593c:	080066bd 	.word	0x080066bd
 8005940:	0800689d 	.word	0x0800689d
 8005944:	08006101 	.word	0x08006101

	case IFACE_SELECTIFACE: {
		//Check if we have any other interfaces to phost->device.CfgDesc.bNumInterfaces
		if (++phost->pActiveClass->iface_initnum
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800594e:	7f5a      	ldrb	r2, [r3, #29]
 8005950:	3201      	adds	r2, #1
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	775a      	strb	r2, [r3, #29]
 8005956:	7f5a      	ldrb	r2, [r3, #29]
				< phost->device.CfgDesc.bNumInterfaces) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
		if (++phost->pActiveClass->iface_initnum
 800595e:	429a      	cmp	r2, r3
 8005960:	d20e      	bcs.n	8005980 <USBH_HID_InterfaceInit+0x544>
			//Have we reached maximum of interfaces? USBH_MAX_NUM_INTERFACES
			if (phost->pActiveClass->iface_initnum <= USBH_MAX_NUM_INTERFACES) {
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005968:	7f5b      	ldrb	r3, [r3, #29]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d805      	bhi.n	800597a <USBH_HID_InterfaceInit+0x53e>
				phost->pActiveClass->iface_init = IFACE_READHID;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005974:	2201      	movs	r2, #1
 8005976:	779a      	strb	r2, [r3, #30]
			}
		} else {
			status = USBH_OK;
		}
	}
		break;
 8005978:	e00c      	b.n	8005994 <USBH_HID_InterfaceInit+0x558>
				status = USBH_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	77fb      	strb	r3, [r7, #31]
		break;
 800597e:	e009      	b.n	8005994 <USBH_HID_InterfaceInit+0x558>
			status = USBH_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	77fb      	strb	r3, [r7, #31]
		break;
 8005984:	e006      	b.n	8005994 <USBH_HID_InterfaceInit+0x558>
		break;
 8005986:	bf00      	nop
 8005988:	e004      	b.n	8005994 <USBH_HID_InterfaceInit+0x558>
		break;
 800598a:	bf00      	nop
 800598c:	e002      	b.n	8005994 <USBH_HID_InterfaceInit+0x558>
		break;
 800598e:	bf00      	nop
 8005990:	e000      	b.n	8005994 <USBH_HID_InterfaceInit+0x558>
		break;
 8005992:	bf00      	nop
	}

	return status;
 8005994:	7ffb      	ldrb	r3, [r7, #31]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bdb0      	pop	{r4, r5, r7, pc}
 800599e:	bf00      	nop

080059a0 <USBH_HID_InterfaceDeInit>:
 * @brief  USBH_HID_InterfaceDeInit
 *         The function DeInit the Pipes used for the HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef static USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]

	HID_HandleTypeDef *HID_Handle;

	uint8_t i = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	73fb      	strb	r3, [r7, #15]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 80059ac:	e055      	b.n	8005a5a <USBH_HID_InterfaceDeInit+0xba>

		HID_Handle = (HID_HandleTypeDef*) phost->pActiveClass->pData[i];
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059b4:	7bfa      	ldrb	r2, [r7, #15]
 80059b6:	3208      	adds	r2, #8
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	60bb      	str	r3, [r7, #8]

		if (HID_Handle->InPipe != 0x00U) {
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00e      	beq.n	80059e4 <USBH_HID_InterfaceDeInit+0x44>
			USBH_ClosePipe(phost, HID_Handle->InPipe);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	785b      	ldrb	r3, [r3, #1]
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f002 fec4 	bl	800875a <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->InPipe);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f002 feef 	bl	80087bc <USBH_FreePipe>
			HID_Handle->InPipe = 0U; /* Reset the pipe as Free */
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2200      	movs	r2, #0
 80059e2:	705a      	strb	r2, [r3, #1]
		}

		if (HID_Handle->OutPipe != 0x00U) {
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00e      	beq.n	8005a0a <USBH_HID_InterfaceDeInit+0x6a>
			USBH_ClosePipe(phost, HID_Handle->OutPipe);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f002 feb1 	bl	800875a <USBH_ClosePipe>
			USBH_FreePipe(phost, HID_Handle->OutPipe);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f002 fedc 	bl	80087bc <USBH_FreePipe>
			HID_Handle->OutPipe = 0U; /* Reset the pipe as Free */
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2200      	movs	r2, #0
 8005a08:	701a      	strb	r2, [r3, #0]
		}

		if (phost->pActiveClass->pData[i]) {
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a10:	7bfa      	ldrb	r2, [r7, #15]
 8005a12:	3208      	adds	r2, #8
 8005a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01b      	beq.n	8005a54 <USBH_HID_InterfaceDeInit+0xb4>
			USBH_free(phost->pActiveClass->pData[i]);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a22:	7bfa      	ldrb	r2, [r7, #15]
 8005a24:	3208      	adds	r2, #8
 8005a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f003 fa18 	bl	8008e60 <free>
			free(phost->pActiveClass->pData[i]);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a36:	7bfa      	ldrb	r2, [r7, #15]
 8005a38:	3208      	adds	r2, #8
 8005a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f003 fa0e 	bl	8008e60 <free>
			phost->pActiveClass->pData[i] = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a4a:	7bfa      	ldrb	r2, [r7, #15]
 8005a4c:	3208      	adds	r2, #8
 8005a4e:	2100      	movs	r1, #0
 8005a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (; i <= (USBH_MAX_NUM_INTERFACES - 1); i++) {
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	3301      	adds	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d9a6      	bls.n	80059ae <USBH_HID_InterfaceDeInit+0xe>
		}
	}
	phost->pActiveClass->iface_init = 0U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a66:	2200      	movs	r2, #0
 8005a68:	779a      	strb	r2, [r3, #30]
	phost->pActiveClass->iface_initnum = 0U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a70:	2200      	movs	r2, #0
 8005a72:	775a      	strb	r2, [r3, #29]
	phost->pActiveClass->interfaces = 0U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	771a      	strb	r2, [r3, #28]

	return USBH_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBH_HID_NextInterface>:
 *         for HID class.
 * @param  phost: Host handle
 * @retval USBH Status
 */

void USBH_HID_NextInterface(USBH_HandleTypeDef *phost) {
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	phost->device.current_interface++;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005a96:	3301      	adds	r3, #1
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	if (phost->device.current_interface >= phost->pActiveClass->interfaces) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aac:	7f1b      	ldrb	r3, [r3, #28]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d303      	bcc.n	8005aba <USBH_HID_NextInterface+0x32>
		phost->device.current_interface = 0;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
	}
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <USBH_HID_ClassRequest>:

static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost) {
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
	//All config has been done already in USBH_HID_InterfaceInit
	return USBH_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USBH_HID_Process>:
 * @brief  USBH_HID_Process
 *         The function is for managing state machine for HID data transfers
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	75fb      	strb	r3, [r7, #23]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 8005af4:	3208      	adds	r2, #8
 8005af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afa:	613b      	str	r3, [r7, #16]
	uint32_t XferSize;

	switch (HID_Handle->state) {
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	789b      	ldrb	r3, [r3, #2]
 8005b00:	2b06      	cmp	r3, #6
 8005b02:	f200 8084 	bhi.w	8005c0e <USBH_HID_Process+0x132>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <USBH_HID_Process+0x30>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b29 	.word	0x08005b29
 8005b10:	08005c0f 	.word	0x08005c0f
 8005b14:	08005c0f 	.word	0x08005c0f
 8005b18:	08005c0f 	.word	0x08005c0f
 8005b1c:	08005b5b 	.word	0x08005b5b
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b89 	.word	0x08005b89
	case HID_INIT:
		HID_Handle->Init(phost);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	4798      	blx	r3
		HID_Handle->state = HID_SYNC;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2205      	movs	r2, #5
 8005b34:	709a      	strb	r2, [r3, #2]
		phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
		break;
 8005b42:	e069      	b.n	8005c18 <USBH_HID_Process+0x13c>

	case HID_SYNC:
		/* Sync with start of Even Frame */
		if (phost->Timer & 1U) {
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d05f      	beq.n	8005c12 <USBH_HID_Process+0x136>
			HID_Handle->state = HID_GET_DATA;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2204      	movs	r2, #4
 8005b56:	709a      	strb	r2, [r3, #2]
		}
		break;
 8005b58:	e05b      	b.n	8005c12 <USBH_HID_Process+0x136>

	case HID_GET_DATA:
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6959      	ldr	r1, [r3, #20]
				(uint8_t) HID_Handle->length, HID_Handle->InPipe);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	8b1b      	ldrh	r3, [r3, #24]
		USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f002 fdb8 	bl	80086de <USBH_InterruptReceiveData>

		HID_Handle->state = HID_POLL;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2206      	movs	r2, #6
 8005b72:	709a      	strb	r2, [r3, #2]
		HID_Handle->timer = phost->Timer;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	621a      	str	r2, [r3, #32]
		HID_Handle->DataReady = 0U;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 8005b86:	e047      	b.n	8005c18 <USBH_HID_Process+0x13c>

	case HID_POLL:
		if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE) {
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f003 f8ac 	bl	8008cec <USBH_LL_GetURBState>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d120      	bne.n	8005bdc <USBH_HID_Process+0x100>

			XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f003 f811 	bl	8008bc8 <USBH_LL_GetLastXferSize>
 8005ba6:	60f8      	str	r0, [r7, #12]

			if (HID_Handle->DataReady == 0U && XferSize != 0U) {
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d131      	bne.n	8005c16 <USBH_HID_Process+0x13a>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d02e      	beq.n	8005c16 <USBH_HID_Process+0x13a>
				USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData,
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f103 0008 	add.w	r0, r3, #8
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	6959      	ldr	r1, [r3, #20]
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	8b1b      	ldrh	r3, [r3, #24]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 f9a7 	bl	8005f1a <USBH_HID_FifoWrite>
						HID_Handle->length);
				HID_Handle->DataReady = 1U;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				USBH_HID_EventCallback(phost);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f9f4 	bl	8005fc2 <USBH_HID_EventCallback>
					HID_Handle->state = HID_GET_DATA;
					USBH_HID_NextInterface(phost);
				}
			}
		}
		break;
 8005bda:	e01c      	b.n	8005c16 <USBH_HID_Process+0x13a>
			if (USBH_LL_GetURBState(phost, HID_Handle->InPipe)
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f003 f882 	bl	8008cec <USBH_LL_GetURBState>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b05      	cmp	r3, #5
 8005bec:	d113      	bne.n	8005c16 <USBH_HID_Process+0x13a>
				if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK) {
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	7e9b      	ldrb	r3, [r3, #26]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f002 f984 	bl	8007f02 <USBH_ClrFeature>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <USBH_HID_Process+0x13a>
					HID_Handle->state = HID_GET_DATA;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2204      	movs	r2, #4
 8005c04:	709a      	strb	r2, [r3, #2]
					USBH_HID_NextInterface(phost);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff ff3e 	bl	8005a88 <USBH_HID_NextInterface>
		break;
 8005c0c:	e003      	b.n	8005c16 <USBH_HID_Process+0x13a>

	default:
		break;
 8005c0e:	bf00      	nop
 8005c10:	e002      	b.n	8005c18 <USBH_HID_Process+0x13c>
		break;
 8005c12:	bf00      	nop
 8005c14:	e000      	b.n	8005c18 <USBH_HID_Process+0x13c>
		break;
 8005c16:	bf00      	nop
	}

	return status;
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop

08005c24 <USBH_HID_SOFProcess>:
 * @brief  USBH_HID_SOFProcess
 *         The function is for managing the SOF Process
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle =
			(HID_HandleTypeDef*) phost->pActiveClass->pData[phost->device.current_interface];
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
	HID_HandleTypeDef *HID_Handle =
 8005c38:	3208      	adds	r2, #8
 8005c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3e:	60fb      	str	r3, [r7, #12]

	if (HID_Handle->state == HID_POLL) {
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	789b      	ldrb	r3, [r3, #2]
 8005c44:	2b06      	cmp	r3, #6
 8005c46:	d10f      	bne.n	8005c68 <USBH_HID_SOFProcess+0x44>
		if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	8b92      	ldrh	r2, [r2, #28]
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d305      	bcc.n	8005c68 <USBH_HID_SOFProcess+0x44>
			HID_Handle->state = HID_GET_DATA;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	709a      	strb	r2, [r3, #2]
			USBH_HID_NextInterface(phost);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff ff10 	bl	8005a88 <USBH_HID_NextInterface>
		}
	}
	return USBH_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <USBH_HID_GetHIDReportDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Report Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b086      	sub	sp, #24
 8005c76:	af02      	add	r7, sp, #8
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	807b      	strh	r3, [r7, #2]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	707b      	strb	r3, [r7, #1]

	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID_REPORT, iface_idx, phost->device.Data, length);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 8005c88:	7879      	ldrb	r1, [r7, #1]
 8005c8a:	887a      	ldrh	r2, [r7, #2]
 8005c8c:	9201      	str	r2, [sp, #4]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	460b      	mov	r3, r1
 8005c92:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8005c96:	2101      	movs	r1, #1
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f002 f88d 	bl	8007db8 <USBH_GetDescriptor>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	73fb      	strb	r3, [r7, #15]
	 In case of USB Boot Mode devices for In report handling ,
	 HID report descriptor parsing is not required.
	 In case, for supporting Non-Boot Protocol devices and output reports,
	 user may parse the report descriptor*/

	return status;
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USBH_HID_GetHIDDescriptor>:
 * @param  phost: Host handle
 * @param  Length : HID Descriptor Length
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GetHIDDescriptor(USBH_HandleTypeDef *phost,
		uint16_t length, uint8_t iface_idx) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	807b      	strh	r3, [r7, #2]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	707b      	strb	r3, [r7, #1]
	USBH_StatusTypeDef status;

	status = USBH_GetDescriptor(phost,
	USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
	USB_DESC_HID, iface_idx, phost->device.Data, length);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
	status = USBH_GetDescriptor(phost,
 8005cc2:	7879      	ldrb	r1, [r7, #1]
 8005cc4:	887a      	ldrh	r2, [r7, #2]
 8005cc6:	9201      	str	r2, [sp, #4]
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f002 f870 	bl	8007db8 <USBH_GetDescriptor>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]

	return status;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBH_HID_SetIdle>:
 * @param  duration: Duration for HID Idle request
 * @param  reportId : Targeted report ID for Set Idle request
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost, uint8_t duration,
		uint8_t reportId, uint8_t interface) {
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	4608      	mov	r0, r1
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	70fb      	strb	r3, [r7, #3]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70bb      	strb	r3, [r7, #2]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	707b      	strb	r3, [r7, #1]

	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2221      	movs	r2, #33	; 0x21
 8005d04:	741a      	strb	r2, [r3, #16]
			|
			USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	220a      	movs	r2, #10
 8005d0a:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = (uint16_t) (((uint32_t) duration << 8U)
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	78bb      	ldrb	r3, [r7, #2]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	825a      	strh	r2, [r3, #18]
			| (uint32_t) reportId);

	phost->Control.setup.b.wIndex.w = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = interface;
 8005d26:	787b      	ldrb	r3, [r7, #1]
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2100      	movs	r1, #0
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f002 fac5 	bl	80082c2 <USBH_CtlReq>
 8005d38:	4603      	mov	r3, r0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBH_HID_SetProtocol>:
 * @param  phost: Host handle
 * @param  protocol : Set Protocol for HID : boot/report protocol
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
		uint8_t protocol, uint16_t interface) {
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	803b      	strh	r3, [r7, #0]
	phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2221      	movs	r2, #33	; 0x21
 8005d56:	741a      	strb	r2, [r3, #16]
			| USB_REQ_TYPE_CLASS;

	phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	220b      	movs	r2, #11
 8005d5c:	745a      	strb	r2, [r3, #17]
	phost->Control.setup.b.wValue.w = protocol;
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	825a      	strh	r2, [r3, #18]
	phost->Control.setup.b.wIndex.w = interface;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	883a      	ldrh	r2, [r7, #0]
 8005d6a:	829a      	strh	r2, [r3, #20]
	phost->Control.setup.b.wLength.w = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	82da      	strh	r2, [r3, #22]

	return USBH_CtlReq(phost, 0U, 0U);
 8005d72:	2200      	movs	r2, #0
 8005d74:	2100      	movs	r1, #0
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f002 faa3 	bl	80082c2 <USBH_CtlReq>
 8005d7c:	4603      	mov	r3, r0

}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USBH_HID_ParseHIDDesc>:
 *         This function Parse the HID descriptor
 * @param  desc: HID Descriptor
 * @param  buf: Buffer where the source descriptor is available
 * @retval None
 */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf) {
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]

	desc->bLength = *(uint8_t*) (buf + 0);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781a      	ldrb	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	701a      	strb	r2, [r3, #0]
	desc->bDescriptorType = *(uint8_t*) (buf + 1);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	785a      	ldrb	r2, [r3, #1]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	705a      	strb	r2, [r3, #1]
	desc->bcdHID = LE16(buf + 2);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	3302      	adds	r3, #2
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	3303      	adds	r3, #3
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	4313      	orrs	r3, r2
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	805a      	strh	r2, [r3, #2]
	desc->bCountryCode = *(uint8_t*) (buf + 4);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	791a      	ldrb	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	711a      	strb	r2, [r3, #4]
	desc->bNumDescriptors = *(uint8_t*) (buf + 5);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	795a      	ldrb	r2, [r3, #5]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	715a      	strb	r2, [r3, #5]
	desc->bReportDescriptorType = *(uint8_t*) (buf + 6);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	799a      	ldrb	r2, [r3, #6]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	719a      	strb	r2, [r3, #6]
	desc->wItemLength = LE16(buf + 7);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	3307      	adds	r3, #7
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	4313      	orrs	r3, r2
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	811a      	strh	r2, [r3, #8]
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <USBH_HID_GetDeviceType>:
 * @brief  USBH_HID_GetDeviceType
 *         Return Device function.
 * @param  phost: Host handle
 * @retval HID function: HID_MOUSE / HID_KEYBOARD
 */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost) {
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	HID_TypeTypeDef type = HID_UNKNOWN;
 8005e04:	23ff      	movs	r3, #255	; 0xff
 8005e06:	73fb      	strb	r3, [r7, #15]
	uint8_t InterfaceProtocol;

	if (phost->gState == HOST_CLASS) {
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b0b      	cmp	r3, #11
 8005e10:	d117      	bne.n	8005e42 <USBH_HID_GetDeviceType+0x46>
		InterfaceProtocol =
				phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005e18:	4619      	mov	r1, r3
		InterfaceProtocol =
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	231a      	movs	r3, #26
 8005e1e:	fb03 f301 	mul.w	r3, r3, r1
 8005e22:	4413      	add	r3, r2
 8005e24:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	73bb      	strb	r3, [r7, #14]
		if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE) {
 8005e2c:	7bbb      	ldrb	r3, [r7, #14]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d102      	bne.n	8005e38 <USBH_HID_GetDeviceType+0x3c>
			type = HID_KEYBOARD;
 8005e32:	2302      	movs	r3, #2
 8005e34:	73fb      	strb	r3, [r7, #15]
 8005e36:	e004      	b.n	8005e42 <USBH_HID_GetDeviceType+0x46>
		} else {
			if (InterfaceProtocol == HID_MOUSE_BOOT_CODE) {
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d101      	bne.n	8005e42 <USBH_HID_GetDeviceType+0x46>
				type = HID_MOUSE;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	return type;
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USBH_HID_FifoInit>:
 * @param  f: Fifo address
 * @param  buf: Fifo buffer
 * @param  size: Fifo Size
 * @retval none
 */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size) {
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80fb      	strh	r3, [r7, #6]
	f->head = 0U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	809a      	strh	r2, [r3, #4]
	f->tail = 0U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	80da      	strh	r2, [r3, #6]
	f->lock = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	729a      	strb	r2, [r3, #10]
	f->size = size;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	88fa      	ldrh	r2, [r7, #6]
 8005e74:	811a      	strh	r2, [r3, #8]
	f->buf = buf;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	601a      	str	r2, [r3, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <USBH_HID_FifoRead>:
 * @param  f: Fifo address
 * @param  buf: read buffer
 * @param  nbytes: number of item to read
 * @retval number of read items
 */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes) {
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	4613      	mov	r3, r2
 8005e94:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t *p;

	p = (uint8_t*) buf;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	613b      	str	r3, [r7, #16]

	if (f->lock == 0U) {
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	7a9b      	ldrb	r3, [r3, #10]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d131      	bne.n	8005f06 <USBH_HID_FifoRead+0x7e>
		f->lock = 1U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	729a      	strb	r2, [r3, #10]

		for (i = 0U; i < nbytes; i++) {
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	82fb      	strh	r3, [r7, #22]
 8005eac:	e027      	b.n	8005efe <USBH_HID_FifoRead+0x76>
			if (f->tail != f->head) {
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	88da      	ldrh	r2, [r3, #6]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	889b      	ldrh	r3, [r3, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d019      	beq.n	8005eee <USBH_HID_FifoRead+0x66>
				*p++ = f->buf[f->tail];
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	88d2      	ldrh	r2, [r2, #6]
 8005ec2:	441a      	add	r2, r3
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1c59      	adds	r1, r3, #1
 8005ec8:	6139      	str	r1, [r7, #16]
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	701a      	strb	r2, [r3, #0]
				f->tail++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	88db      	ldrh	r3, [r3, #6]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	80da      	strh	r2, [r3, #6]

				if (f->tail == f->size) {
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	88da      	ldrh	r2, [r3, #6]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	891b      	ldrh	r3, [r3, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d108      	bne.n	8005ef8 <USBH_HID_FifoRead+0x70>
					f->tail = 0U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	80da      	strh	r2, [r3, #6]
 8005eec:	e004      	b.n	8005ef8 <USBH_HID_FifoRead+0x70>
				}
			} else {
				f->lock = 0U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	729a      	strb	r2, [r3, #10]
				return i;
 8005ef4:	8afb      	ldrh	r3, [r7, #22]
 8005ef6:	e00a      	b.n	8005f0e <USBH_HID_FifoRead+0x86>
		for (i = 0U; i < nbytes; i++) {
 8005ef8:	8afb      	ldrh	r3, [r7, #22]
 8005efa:	3301      	adds	r3, #1
 8005efc:	82fb      	strh	r3, [r7, #22]
 8005efe:	8afa      	ldrh	r2, [r7, #22]
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d3d3      	bcc.n	8005eae <USBH_HID_FifoRead+0x26>
			}
		}
	}

	f->lock = 0U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	729a      	strb	r2, [r3, #10]

	return nbytes;
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <USBH_HID_FifoWrite>:
 * @param  f: Fifo address
 * @param  buf: read buffer
 * @param  nbytes: number of item to write
 * @retval number of written items
 */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t nbytes) {
 8005f1a:	b480      	push	{r7}
 8005f1c:	b087      	sub	sp, #28
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	4613      	mov	r3, r2
 8005f26:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t *p;

	p = (uint8_t*) buf;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	613b      	str	r3, [r7, #16]

	if (f->lock == 0U) {
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	7a9b      	ldrb	r3, [r3, #10]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d13c      	bne.n	8005fae <USBH_HID_FifoWrite+0x94>
		f->lock = 1U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	729a      	strb	r2, [r3, #10]

		for (i = 0U; i < nbytes; i++) {
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	82fb      	strh	r3, [r7, #22]
 8005f3e:	e032      	b.n	8005fa6 <USBH_HID_FifoWrite+0x8c>
			if ((f->head + 1U == f->tail)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	889b      	ldrh	r3, [r3, #4]
 8005f44:	3301      	adds	r3, #1
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	88d2      	ldrh	r2, [r2, #6]
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00a      	beq.n	8005f64 <USBH_HID_FifoWrite+0x4a>
					|| ((f->head + 1U == f->size) && (f->tail == 0U))) {
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	889b      	ldrh	r3, [r3, #4]
 8005f52:	3301      	adds	r3, #1
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	8912      	ldrh	r2, [r2, #8]
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d108      	bne.n	8005f6e <USBH_HID_FifoWrite+0x54>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88db      	ldrh	r3, [r3, #6]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d104      	bne.n	8005f6e <USBH_HID_FifoWrite+0x54>
				f->lock = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	729a      	strb	r2, [r3, #10]
				return i;
 8005f6a:	8afb      	ldrh	r3, [r7, #22]
 8005f6c:	e023      	b.n	8005fb6 <USBH_HID_FifoWrite+0x9c>
			} else {
				f->buf[f->head] = *p++;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	613a      	str	r2, [r7, #16]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	68f9      	ldr	r1, [r7, #12]
 8005f7a:	8889      	ldrh	r1, [r1, #4]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	7013      	strb	r3, [r2, #0]
				f->head++;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	889b      	ldrh	r3, [r3, #4]
 8005f86:	3301      	adds	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	809a      	strh	r2, [r3, #4]

				if (f->head == f->size) {
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	889a      	ldrh	r2, [r3, #4]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	891b      	ldrh	r3, [r3, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d102      	bne.n	8005fa0 <USBH_HID_FifoWrite+0x86>
					f->head = 0U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	809a      	strh	r2, [r3, #4]
		for (i = 0U; i < nbytes; i++) {
 8005fa0:	8afb      	ldrh	r3, [r7, #22]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	82fb      	strh	r3, [r7, #22]
 8005fa6:	8afa      	ldrh	r2, [r7, #22]
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d3c8      	bcc.n	8005f40 <USBH_HID_FifoWrite+0x26>
				}
			}
		}
	}

	f->lock = 0U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	729a      	strb	r2, [r3, #10]

	return nbytes;
 8005fb4:	88fb      	ldrh	r3, [r7, #6]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <USBH_HID_EventCallback>:
/**
 * @brief  The function is a callback about HID Data events
 *  @param  phost: Selected device
 * @retval None
 */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) {
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(phost);
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <collect_bits>:
static uint8_t* gamepad_report_data;

//static uint8_t gamepad_info;


static uint16_t collect_bits(uint8_t *p, uint16_t offset, uint8_t size, int is_signed) {
 8005fd6:	b480      	push	{r7}
 8005fd8:	b089      	sub	sp, #36	; 0x24
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	607b      	str	r3, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	817b      	strh	r3, [r7, #10]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	727b      	strb	r3, [r7, #9]
  // mask unused bits of first byte
  uint8_t mask = 0xff << (offset&7);
 8005fe8:	897b      	ldrh	r3, [r7, #10]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	22ff      	movs	r2, #255	; 0xff
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	75fb      	strb	r3, [r7, #23]
  uint8_t byte = offset/8;
 8005ff6:	897b      	ldrh	r3, [r7, #10]
 8005ff8:	08db      	lsrs	r3, r3, #3
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	77fb      	strb	r3, [r7, #31]
  uint8_t bits = size;
 8005ffe:	7a7b      	ldrb	r3, [r7, #9]
 8006000:	77bb      	strb	r3, [r7, #30]
  uint8_t shift = offset&7;
 8006002:	897b      	ldrh	r3, [r7, #10]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	777b      	strb	r3, [r7, #29]

  uint16_t rval = (p[byte++] & mask) >> shift;
 800600c:	7ffb      	ldrb	r3, [r7, #31]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	77fa      	strb	r2, [r7, #31]
 8006012:	461a      	mov	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	4013      	ands	r3, r2
 800601e:	b2db      	uxtb	r3, r3
 8006020:	461a      	mov	r2, r3
 8006022:	7f7b      	ldrb	r3, [r7, #29]
 8006024:	fa42 f303 	asr.w	r3, r2, r3
 8006028:	837b      	strh	r3, [r7, #26]
  mask = 0xff;
 800602a:	23ff      	movs	r3, #255	; 0xff
 800602c:	75fb      	strb	r3, [r7, #23]
  shift = 8-shift;
 800602e:	7f7b      	ldrb	r3, [r7, #29]
 8006030:	f1c3 0308 	rsb	r3, r3, #8
 8006034:	777b      	strb	r3, [r7, #29]
  bits -= shift;
 8006036:	7fba      	ldrb	r2, [r7, #30]
 8006038:	7f7b      	ldrb	r3, [r7, #29]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	77bb      	strb	r3, [r7, #30]

  // first byte already contained more bits than we need
  if(shift > size) {
 800603e:	7f7a      	ldrb	r2, [r7, #29]
 8006040:	7a7b      	ldrb	r3, [r7, #9]
 8006042:	429a      	cmp	r2, r3
 8006044:	d937      	bls.n	80060b6 <collect_bits+0xe0>
    // mask unused bits
    rval &= (1<<size)-1;
 8006046:	7a7b      	ldrb	r3, [r7, #9]
 8006048:	2201      	movs	r2, #1
 800604a:	fa02 f303 	lsl.w	r3, r2, r3
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29b      	uxth	r3, r3
 8006054:	b21a      	sxth	r2, r3
 8006056:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800605a:	4013      	ands	r3, r2
 800605c:	b21b      	sxth	r3, r3
 800605e:	837b      	strh	r3, [r7, #26]
 8006060:	e02c      	b.n	80060bc <collect_bits+0xe6>
  } else {
    // further bytes if required
    while(bits) {
      mask = (bits<8)?(0xff>>(8-bits)):0xff;
 8006062:	7fbb      	ldrb	r3, [r7, #30]
 8006064:	2b07      	cmp	r3, #7
 8006066:	d807      	bhi.n	8006078 <collect_bits+0xa2>
 8006068:	7fbb      	ldrb	r3, [r7, #30]
 800606a:	f1c3 0308 	rsb	r3, r3, #8
 800606e:	22ff      	movs	r2, #255	; 0xff
 8006070:	fa42 f303 	asr.w	r3, r2, r3
 8006074:	b2db      	uxtb	r3, r3
 8006076:	e000      	b.n	800607a <collect_bits+0xa4>
 8006078:	23ff      	movs	r3, #255	; 0xff
 800607a:	75fb      	strb	r3, [r7, #23]
      rval += (p[byte++] & mask) << shift;
 800607c:	7ffb      	ldrb	r3, [r7, #31]
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	77fa      	strb	r2, [r7, #31]
 8006082:	461a      	mov	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	781a      	ldrb	r2, [r3, #0]
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	4013      	ands	r3, r2
 800608e:	b2db      	uxtb	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	7f7b      	ldrb	r3, [r7, #29]
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	b29a      	uxth	r2, r3
 800609a:	8b7b      	ldrh	r3, [r7, #26]
 800609c:	4413      	add	r3, r2
 800609e:	837b      	strh	r3, [r7, #26]
      shift += 8;
 80060a0:	7f7b      	ldrb	r3, [r7, #29]
 80060a2:	3308      	adds	r3, #8
 80060a4:	777b      	strb	r3, [r7, #29]
      bits -= (bits>8)?8:bits;
 80060a6:	7fbb      	ldrb	r3, [r7, #30]
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	bf28      	it	cs
 80060ac:	2308      	movcs	r3, #8
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	7fba      	ldrb	r2, [r7, #30]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	77bb      	strb	r3, [r7, #30]
    while(bits) {
 80060b6:	7fbb      	ldrb	r3, [r7, #30]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1d2      	bne.n	8006062 <collect_bits+0x8c>
    }
  }

  if(is_signed) {
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d016      	beq.n	80060f0 <collect_bits+0x11a>
    // do sign expansion
    uint16_t sign_bit = 1<<(size-1);
 80060c2:	7a7b      	ldrb	r3, [r7, #9]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	2201      	movs	r2, #1
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	833b      	strh	r3, [r7, #24]
    if(rval & sign_bit) {
 80060ce:	8b7a      	ldrh	r2, [r7, #26]
 80060d0:	8b3b      	ldrh	r3, [r7, #24]
 80060d2:	4013      	ands	r3, r2
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <collect_bits+0x11a>
      while(sign_bit) {
 80060da:	e006      	b.n	80060ea <collect_bits+0x114>
	rval |= sign_bit;
 80060dc:	8b7a      	ldrh	r2, [r7, #26]
 80060de:	8b3b      	ldrh	r3, [r7, #24]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	837b      	strh	r3, [r7, #26]
	sign_bit <<= 1;
 80060e4:	8b3b      	ldrh	r3, [r7, #24]
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	833b      	strh	r3, [r7, #24]
      while(sign_bit) {
 80060ea:	8b3b      	ldrh	r3, [r7, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f5      	bne.n	80060dc <collect_bits+0x106>
      }

    }
  }

  return rval;
 80060f0:	8b7b      	ldrh	r3, [r7, #26]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3724      	adds	r7, #36	; 0x24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <USBH_HID_GamepadInit>:
  *         The function init the HID gamepad.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GamepadInit(USBH_HandleTypeDef *phost)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8006114:	3208      	adds	r2, #8
 8006116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611a:	60fb      	str	r3, [r7, #12]
  uint8_t reportSize = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	72fb      	strb	r3, [r7, #11]
  reportSize = HID_Handle->HID_Desc.RptDesc.report_size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006126:	72fb      	strb	r3, [r7, #11]





  HID_Handle->length = reportSize;
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	831a      	strh	r2, [r3, #24]


  HID_Handle->pData = (uint8_t*) malloc (reportSize *sizeof(uint8_t)); //(uint8_t*)(void *)
 8006130:	7afb      	ldrb	r3, [r7, #11]
 8006132:	4618      	mov	r0, r3
 8006134:	f002 fe8c 	bl	8008e50 <malloc>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	615a      	str	r2, [r3, #20]
  gamepad_report_data = HID_Handle->pData;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	4a0b      	ldr	r2, [pc, #44]	; (8006174 <USBH_HID_GamepadInit+0x74>)
 8006146:	6013      	str	r3, [r2, #0]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * reportSize);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f103 0008 	add.w	r0, r3, #8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 8006154:	7afb      	ldrb	r3, [r7, #11]
 8006156:	b29b      	uxth	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	0092      	lsls	r2, r2, #2
 800615c:	4413      	add	r3, r2
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	b29b      	uxth	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	f7ff fe74 	bl	8005e50 <USBH_HID_FifoInit>

  return USBH_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200000c4 	.word	0x200000c4

08006178 <USBH_HID_GetGamepadInfo>:
  *         The function return gamepad information.
  * @param  phost: Host handle
  * @retval gamepad information
  */
HID_gamepad_Info_TypeDef *USBH_HID_GetGamepadInfo(USBH_HandleTypeDef *phost)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	//refresh value of joymap and return value
	if(USBH_HID_GamepadDecode(phost)== USBH_OK)
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f80d 	bl	80061a0 <USBH_HID_GamepadDecode>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <USBH_HID_GetGamepadInfo+0x18>
	{
		return &gamepad_info;
 800618c:	4b03      	ldr	r3, [pc, #12]	; (800619c <USBH_HID_GetGamepadInfo+0x24>)
 800618e:	e000      	b.n	8006192 <USBH_HID_GetGamepadInfo+0x1a>
	}
	else
	{
		return NULL;
 8006190:	2300      	movs	r3, #0
	}
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	200001bc 	.word	0x200001bc

080061a0 <USBH_HID_GamepadDecode>:
  *         The function decode gamepad data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_GamepadDecode(USBH_HandleTypeDef *phost)
{
 80061a0:	b5b0      	push	{r4, r5, r7, lr}
 80061a2:	b098      	sub	sp, #96	; 0x60
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 80061b4:	3208      	adds	r2, #8
 80061b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ba:	65bb      	str	r3, [r7, #88]	; 0x58

	  if(HID_Handle->length == 0U)
 80061bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061be:	8b1b      	ldrh	r3, [r3, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <USBH_HID_GamepadDecode+0x28>
	  {
	    return USBH_FAIL;
 80061c4:	2302      	movs	r3, #2
 80061c6:	e273      	b.n	80066b0 <USBH_HID_GamepadDecode+0x510>
	  }

	  if(USBH_HID_FifoRead(&HID_Handle->fifo, gamepad_report_data, HID_Handle->length) ==  HID_Handle->length)
 80061c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ca:	f103 0008 	add.w	r0, r3, #8
 80061ce:	4bd2      	ldr	r3, [pc, #840]	; (8006518 <USBH_HID_GamepadDecode+0x378>)
 80061d0:	6819      	ldr	r1, [r3, #0]
 80061d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061d4:	8b1b      	ldrh	r3, [r3, #24]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f7ff fe56 	bl	8005e88 <USBH_HID_FifoRead>
 80061dc:	4603      	mov	r3, r0
 80061de:	461a      	mov	r2, r3
 80061e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061e2:	8b1b      	ldrh	r3, [r3, #24]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	f040 8262 	bne.w	80066ae <USBH_HID_GamepadDecode+0x50e>
	    {


		uint8_t jmap = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		uint8_t btn = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		uint8_t btn_extra = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		int16_t a[2];
		uint8_t i;

		hid_report_t conf = HID_Handle->HID_Desc.RptDesc;
 80061fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061fe:	f107 040c 	add.w	r4, r7, #12
 8006202:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8006206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800620a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800620c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800620e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006212:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006216:	6020      	str	r0, [r4, #0]
 8006218:	3404      	adds	r4, #4
 800621a:	8021      	strh	r1, [r4, #0]

		// skip report id if present
		uint8_t *p = gamepad_report_data+(conf.report_id?1:0);
 800621c:	4bbe      	ldr	r3, [pc, #760]	; (8006518 <USBH_HID_GamepadDecode+0x378>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	7b7b      	ldrb	r3, [r7, #13]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <USBH_HID_GamepadDecode+0x8a>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <USBH_HID_GamepadDecode+0x8c>
 800622a:	2300      	movs	r3, #0
 800622c:	4413      	add	r3, r2
 800622e:	657b      	str	r3, [r7, #84]	; 0x54


		//process axis
		// two axes ...
				for(i=0;i<2;i++) {
 8006230:	2300      	movs	r3, #0
 8006232:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8006236:	e03d      	b.n	80062b4 <USBH_HID_GamepadDecode+0x114>
					// if logical minimum is > logical maximum then logical minimum
					// is signed. This means that the value itself is also signed
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 8006238:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800623c:	3301      	adds	r3, #1
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006244:	4413      	add	r3, r2
 8006246:	f833 2c50 	ldrh.w	r2, [r3, #-80]
					conf.joystick_mouse.axis[i].logical.max;
 800624a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800624e:	3301      	adds	r3, #1
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006256:	440b      	add	r3, r1
 8006258:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
					int is_signed = conf.joystick_mouse.axis[i].logical.min >
 800625c:	429a      	cmp	r2, r3
 800625e:	bf8c      	ite	hi
 8006260:	2301      	movhi	r3, #1
 8006262:	2300      	movls	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	64bb      	str	r3, [r7, #72]	; 0x48
					a[i] = collect_bits(p, conf.joystick_mouse.axis[i].offset,
 8006268:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800626c:	3301      	adds	r3, #1
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006274:	4413      	add	r3, r2
 8006276:	f833 1c54 	ldrh.w	r1, [r3, #-84]
 800627a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800627e:	3301      	adds	r3, #1
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006286:	4413      	add	r3, r2
 8006288:	f813 2c52 	ldrb.w	r2, [r3, #-82]
 800628c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006290:	f7ff fea1 	bl	8005fd6 <collect_bits>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800629c:	b212      	sxth	r2, r2
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80062a4:	440b      	add	r3, r1
 80062a6:	f823 2c1c 	strh.w	r2, [r3, #-28]
				for(i=0;i<2;i++) {
 80062aa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80062ae:	3301      	adds	r3, #1
 80062b0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80062b4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d9bd      	bls.n	8006238 <USBH_HID_GamepadDecode+0x98>
								conf.joystick_mouse.axis[i].size, is_signed);
				}

		//process 4 first buttons
		for(i=0;i<4;i++)
 80062bc:	2300      	movs	r3, #0
 80062be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80062c2:	e02a      	b.n	800631a <USBH_HID_GamepadDecode+0x17a>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 80062c4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80062c8:	330c      	adds	r3, #12
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80062d0:	4413      	add	r3, r2
 80062d2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062da:	4413      	add	r3, r2
 80062dc:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 80062de:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80062e2:	330c      	adds	r3, #12
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80062ea:	440b      	add	r3, r1
 80062ec:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 80062f0:	4013      	ands	r3, r2
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <USBH_HID_GamepadDecode+0x170>
			 conf.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 80062f8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80062fc:	2201      	movs	r2, #1
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	b25a      	sxtb	r2, r3
 8006304:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8006308:	4313      	orrs	r3, r2
 800630a:	b25b      	sxtb	r3, r3
 800630c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		for(i=0;i<4;i++)
 8006310:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006314:	3301      	adds	r3, #1
 8006316:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800631a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800631e:	2b03      	cmp	r3, #3
 8006320:	d9d0      	bls.n	80062c4 <USBH_HID_GamepadDecode+0x124>

		// ... and the eight extra buttons
		for(i=4;i<12;i++)
 8006322:	2304      	movs	r3, #4
 8006324:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8006328:	e02b      	b.n	8006382 <USBH_HID_GamepadDecode+0x1e2>
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 800632a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800632e:	330c      	adds	r3, #12
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006336:	4413      	add	r3, r2
 8006338:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800633c:	461a      	mov	r2, r3
 800633e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006340:	4413      	add	r3, r2
 8006342:	781a      	ldrb	r2, [r3, #0]
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8006344:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006348:	330c      	adds	r3, #12
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006350:	440b      	add	r3, r1
 8006352:	f813 3c53 	ldrb.w	r3, [r3, #-83]
			if(p[conf.joystick_mouse.button[i].byte_offset] &
 8006356:	4013      	ands	r3, r2
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00c      	beq.n	8006378 <USBH_HID_GamepadDecode+0x1d8>
			 conf.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 800635e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006362:	3b04      	subs	r3, #4
 8006364:	2201      	movs	r2, #1
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	b25a      	sxtb	r2, r3
 800636c:	f997 305d 	ldrsb.w	r3, [r7, #93]	; 0x5d
 8006370:	4313      	orrs	r3, r2
 8006372:	b25b      	sxtb	r3, r3
 8006374:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		for(i=4;i<12;i++)
 8006378:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800637c:	3301      	adds	r3, #1
 800637e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8006382:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006386:	2b0b      	cmp	r3, #11
 8006388:	d9cf      	bls.n	800632a <USBH_HID_GamepadDecode+0x18a>



	for(i=0;i<2;i++) {
 800638a:	2300      	movs	r3, #0
 800638c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8006390:	e14c      	b.n	800662c <USBH_HID_GamepadDecode+0x48c>

		int hrange = (conf.joystick_mouse.axis[i].logical.max - abs(conf.joystick_mouse.axis[i].logical.min)) / 2;
 8006392:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006396:	3301      	adds	r3, #1
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800639e:	4413      	add	r3, r2
 80063a0:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 80063a4:	461a      	mov	r2, r3
 80063a6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80063aa:	3301      	adds	r3, #1
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80063b2:	440b      	add	r3, r1
 80063b4:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	0fda      	lsrs	r2, r3, #31
 80063bc:	4413      	add	r3, r2
 80063be:	105b      	asrs	r3, r3, #1
 80063c0:	653b      	str	r3, [r7, #80]	; 0x50
		int dead = hrange/63;
 80063c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c4:	4a55      	ldr	r2, [pc, #340]	; (800651c <USBH_HID_GamepadDecode+0x37c>)
 80063c6:	fb82 1203 	smull	r1, r2, r2, r3
 80063ca:	441a      	add	r2, r3
 80063cc:	1152      	asrs	r2, r2, #5
 80063ce:	17db      	asrs	r3, r3, #31
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (a[i] < conf.joystick_mouse.axis[i].logical.min) a[i] = conf.joystick_mouse.axis[i].logical.min;
 80063d4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80063de:	4413      	add	r3, r2
 80063e0:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80063e4:	461a      	mov	r2, r3
 80063e6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80063ea:	3301      	adds	r3, #1
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80063f2:	440b      	add	r3, r1
 80063f4:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	da12      	bge.n	8006422 <USBH_HID_GamepadDecode+0x282>
 80063fc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006400:	3301      	adds	r3, #1
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006408:	4413      	add	r3, r2
 800640a:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 800640e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006412:	b212      	sxth	r2, r2
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800641a:	440b      	add	r3, r1
 800641c:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8006420:	e025      	b.n	800646e <USBH_HID_GamepadDecode+0x2ce>
		else if (a[i] > conf.joystick_mouse.axis[i].logical.max) a[i] = conf.joystick_mouse.axis[i].logical.max;
 8006422:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800642c:	4413      	add	r3, r2
 800642e:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8006432:	461a      	mov	r2, r3
 8006434:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006438:	3301      	adds	r3, #1
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006440:	440b      	add	r3, r1
 8006442:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 8006446:	429a      	cmp	r2, r3
 8006448:	dd11      	ble.n	800646e <USBH_HID_GamepadDecode+0x2ce>
 800644a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800644e:	3301      	adds	r3, #1
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006456:	4413      	add	r3, r2
 8006458:	f833 2c4e 	ldrh.w	r2, [r3, #-78]
 800645c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006460:	b212      	sxth	r2, r2
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006468:	440b      	add	r3, r1
 800646a:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = a[i] - (abs(conf.joystick_mouse.axis[i].logical.min) + conf.joystick_mouse.axis[i].logical.max) / 2;
 800646e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006478:	4413      	add	r3, r2
 800647a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800647e:	b29a      	uxth	r2, r3
 8006480:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006484:	3301      	adds	r3, #1
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800648c:	440b      	add	r3, r1
 800648e:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8006492:	4619      	mov	r1, r3
 8006494:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006498:	3301      	adds	r3, #1
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80064a0:	4403      	add	r3, r0
 80064a2:	f833 3c4e 	ldrh.w	r3, [r3, #-78]
 80064a6:	440b      	add	r3, r1
 80064a8:	0fd9      	lsrs	r1, r3, #31
 80064aa:	440b      	add	r3, r1
 80064ac:	105b      	asrs	r3, r3, #1
 80064ae:	425b      	negs	r3, r3
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	4413      	add	r3, r2
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80064ba:	b212      	sxth	r2, r2
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80064c2:	440b      	add	r3, r1
 80064c4:	f823 2c1c 	strh.w	r2, [r3, #-28]

		hrange -= dead;
 80064c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	653b      	str	r3, [r7, #80]	; 0x50
		if (a[i] < -dead) a[i] += dead;
 80064d0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80064da:	4413      	add	r3, r2
 80064dc:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80064e0:	461a      	mov	r2, r3
 80064e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e4:	425b      	negs	r3, r3
 80064e6:	429a      	cmp	r2, r3
 80064e8:	da1a      	bge.n	8006520 <USBH_HID_GamepadDecode+0x380>
 80064ea:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80064f4:	4413      	add	r3, r2
 80064f6:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fe:	b29b      	uxth	r3, r3
 8006500:	4413      	add	r3, r2
 8006502:	b29a      	uxth	r2, r3
 8006504:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006508:	b212      	sxth	r2, r2
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006510:	440b      	add	r3, r1
 8006512:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8006516:	e02f      	b.n	8006578 <USBH_HID_GamepadDecode+0x3d8>
 8006518:	200000c4 	.word	0x200000c4
 800651c:	82082083 	.word	0x82082083
		else if (a[i] > dead) a[i] -= dead;
 8006520:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800652a:	4413      	add	r3, r2
 800652c:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8006530:	461a      	mov	r2, r3
 8006532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006534:	4293      	cmp	r3, r2
 8006536:	da16      	bge.n	8006566 <USBH_HID_GamepadDecode+0x3c6>
 8006538:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006542:	4413      	add	r3, r2
 8006544:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8006548:	b29a      	uxth	r2, r3
 800654a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654c:	b29b      	uxth	r3, r3
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	b29a      	uxth	r2, r3
 8006552:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006556:	b212      	sxth	r2, r2
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800655e:	440b      	add	r3, r1
 8006560:	f823 2c1c 	strh.w	r2, [r3, #-28]
 8006564:	e008      	b.n	8006578 <USBH_HID_GamepadDecode+0x3d8>
		else a[i] = 0;
 8006566:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006570:	4413      	add	r3, r2
 8006572:	2200      	movs	r2, #0
 8006574:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i] = (a[i] * 127) / hrange;
 8006578:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006582:	4413      	add	r3, r2
 8006584:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8006588:	461a      	mov	r2, r3
 800658a:	4613      	mov	r3, r2
 800658c:	01db      	lsls	r3, r3, #7
 800658e:	1a9a      	subs	r2, r3, r2
 8006590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006592:	fb92 f2f3 	sdiv	r2, r2, r3
 8006596:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800659a:	b212      	sxth	r2, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80065a2:	440b      	add	r3, r1
 80065a4:	f823 2c1c 	strh.w	r2, [r3, #-28]

		if (a[i] < -127) a[i] = -127;
 80065a8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80065b2:	4413      	add	r3, r2
 80065b4:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80065b8:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80065bc:	da0a      	bge.n	80065d4 <USBH_HID_GamepadDecode+0x434>
 80065be:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80065c8:	4413      	add	r3, r2
 80065ca:	f64f 7281 	movw	r2, #65409	; 0xff81
 80065ce:	f823 2c1c 	strh.w	r2, [r3, #-28]
 80065d2:	e012      	b.n	80065fa <USBH_HID_GamepadDecode+0x45a>
		else if (a[i] > 127) a[i] = 127;
 80065d4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80065de:	4413      	add	r3, r2
 80065e0:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80065e4:	2b7f      	cmp	r3, #127	; 0x7f
 80065e6:	dd08      	ble.n	80065fa <USBH_HID_GamepadDecode+0x45a>
 80065e8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80065f2:	4413      	add	r3, r2
 80065f4:	227f      	movs	r2, #127	; 0x7f
 80065f6:	f823 2c1c 	strh.w	r2, [r3, #-28]

		a[i]=a[i]+127; // mist wants a value in the range [0..255]
 80065fa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006604:	4413      	add	r3, r2
 8006606:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800660a:	b29b      	uxth	r3, r3
 800660c:	337f      	adds	r3, #127	; 0x7f
 800660e:	b29a      	uxth	r2, r3
 8006610:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006614:	b212      	sxth	r2, r2
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800661c:	440b      	add	r3, r1
 800661e:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for(i=0;i<2;i++) {
 8006622:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006626:	3301      	adds	r3, #1
 8006628:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800662c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006630:	2b01      	cmp	r3, #1
 8006632:	f67f aeae 	bls.w	8006392 <USBH_HID_GamepadDecode+0x1f2>
	}

				if(a[0] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_LEFT;
 8006636:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800663a:	2b3f      	cmp	r3, #63	; 0x3f
 800663c:	dc05      	bgt.n	800664a <USBH_HID_GamepadDecode+0x4aa>
 800663e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006642:	f043 0302 	orr.w	r3, r3, #2
 8006646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[0] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_RIGHT;
 800664a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800664e:	2bc0      	cmp	r3, #192	; 0xc0
 8006650:	dd05      	ble.n	800665e <USBH_HID_GamepadDecode+0x4be>
 8006652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] < JOYSTICK_AXIS_TRIGGER_MIN) jmap |= JOY_UP;
 800665e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8006662:	2b3f      	cmp	r3, #63	; 0x3f
 8006664:	dc05      	bgt.n	8006672 <USBH_HID_GamepadDecode+0x4d2>
 8006666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800666a:	f043 0308 	orr.w	r3, r3, #8
 800666e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if(a[1] > JOYSTICK_AXIS_TRIGGER_MAX) jmap |= JOY_DOWN;
 8006672:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8006676:	2bc0      	cmp	r3, #192	; 0xc0
 8006678:	dd05      	ble.n	8006686 <USBH_HID_GamepadDecode+0x4e6>
 800667a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800667e:	f043 0304 	orr.w	r3, r3, #4
 8006682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				jmap |= btn << JOY_BTN_SHIFT;      // add buttons
 8006686:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	b25a      	sxtb	r2, r3
 800668e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006692:	4313      	orrs	r3, r2
 8006694:	b25b      	sxtb	r3, r3
 8006696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

				gamepad_info.gamepad_data = jmap;
 800669a:	4a07      	ldr	r2, [pc, #28]	; (80066b8 <USBH_HID_GamepadDecode+0x518>)
 800669c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066a0:	7013      	strb	r3, [r2, #0]
				gamepad_info.gamepad_extraBtn = btn_extra;
 80066a2:	4a05      	ldr	r2, [pc, #20]	; (80066b8 <USBH_HID_GamepadDecode+0x518>)
 80066a4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80066a8:	7053      	strb	r3, [r2, #1]

		  return USBH_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e000      	b.n	80066b0 <USBH_HID_GamepadDecode+0x510>
	    }



	  return USBH_FAIL;
 80066ae:	2302      	movs	r3, #2

}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3760      	adds	r7, #96	; 0x60
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bdb0      	pop	{r4, r5, r7, pc}
 80066b8:	200001bc 	.word	0x200001bc

080066bc <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 80066d0:	3208      	adds	r2, #8
 80066d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d6:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 80066d8:	4b23      	ldr	r3, [pc, #140]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 80066da:	2200      	movs	r2, #0
 80066dc:	709a      	strb	r2, [r3, #2]
 80066de:	4b22      	ldr	r3, [pc, #136]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 80066e0:	789a      	ldrb	r2, [r3, #2]
 80066e2:	4b21      	ldr	r3, [pc, #132]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 80066e4:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 80066e6:	4b20      	ldr	r3, [pc, #128]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	711a      	strb	r2, [r3, #4]
 80066ec:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 80066ee:	791a      	ldrb	r2, [r3, #4]
 80066f0:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 80066f2:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 80066f4:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	719a      	strb	r2, [r3, #6]
 80066fa:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 80066fc:	799a      	ldrb	r2, [r3, #6]
 80066fe:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 8006700:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8006702:	4b19      	ldr	r3, [pc, #100]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 8006704:	2200      	movs	r2, #0
 8006706:	721a      	strb	r2, [r3, #8]
 8006708:	4b17      	ldr	r3, [pc, #92]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 800670a:	7a1a      	ldrb	r2, [r3, #8]
 800670c:	4b16      	ldr	r3, [pc, #88]	; (8006768 <USBH_HID_KeybdInit+0xac>)
 800670e:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e00c      	b.n	8006730 <USBH_HID_KeybdInit+0x74>
  {
    keybd_report_data[x] = 0U;
 8006716:	4a15      	ldr	r2, [pc, #84]	; (800676c <USBH_HID_KeybdInit+0xb0>)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2100      	movs	r1, #0
 800671c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8006720:	4a13      	ldr	r2, [pc, #76]	; (8006770 <USBH_HID_KeybdInit+0xb4>)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2100      	movs	r1, #0
 8006726:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3301      	adds	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d9ef      	bls.n	8006716 <USBH_HID_KeybdInit+0x5a>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	8b1b      	ldrh	r3, [r3, #24]
 800673a:	2b08      	cmp	r3, #8
 800673c:	d902      	bls.n	8006744 <USBH_HID_KeybdInit+0x88>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2208      	movs	r2, #8
 8006742:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4a0a      	ldr	r2, [pc, #40]	; (8006770 <USBH_HID_KeybdInit+0xb4>)
 8006748:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f103 0008 	add.w	r0, r3, #8
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006756:	2250      	movs	r2, #80	; 0x50
 8006758:	4619      	mov	r1, r3
 800675a:	f7ff fb79 	bl	8005e50 <USBH_HID_FifoInit>

  return USBH_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	200001d0 	.word	0x200001d0
 800676c:	200001c0 	.word	0x200001c0
 8006770:	200001c8 	.word	0x200001c8

08006774 <collect_bits>:


/**
  * @}
  */
static uint16_t collect_bits(uint8_t *p, uint16_t offset, uint8_t size, int is_signed) {
 8006774:	b480      	push	{r7}
 8006776:	b089      	sub	sp, #36	; 0x24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	607b      	str	r3, [r7, #4]
 800677e:	460b      	mov	r3, r1
 8006780:	817b      	strh	r3, [r7, #10]
 8006782:	4613      	mov	r3, r2
 8006784:	727b      	strb	r3, [r7, #9]
  // mask unused bits of first byte
  uint8_t mask = 0xff << (offset&7);
 8006786:	897b      	ldrh	r3, [r7, #10]
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	22ff      	movs	r2, #255	; 0xff
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	75fb      	strb	r3, [r7, #23]
  uint8_t byte = offset/8;
 8006794:	897b      	ldrh	r3, [r7, #10]
 8006796:	08db      	lsrs	r3, r3, #3
 8006798:	b29b      	uxth	r3, r3
 800679a:	77fb      	strb	r3, [r7, #31]
  uint8_t bits = size;
 800679c:	7a7b      	ldrb	r3, [r7, #9]
 800679e:	77bb      	strb	r3, [r7, #30]
  uint8_t shift = offset&7;
 80067a0:	897b      	ldrh	r3, [r7, #10]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	777b      	strb	r3, [r7, #29]

  //  iprintf("0 m:%x by:%d bi=%d sh=%d ->", mask, byte, bits, shift);
  uint16_t rval = (p[byte++] & mask) >> shift;
 80067aa:	7ffb      	ldrb	r3, [r7, #31]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	77fa      	strb	r2, [r7, #31]
 80067b0:	461a      	mov	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	781a      	ldrb	r2, [r3, #0]
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	4013      	ands	r3, r2
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	7f7b      	ldrb	r3, [r7, #29]
 80067c2:	fa42 f303 	asr.w	r3, r2, r3
 80067c6:	837b      	strh	r3, [r7, #26]
  //  iprintf("%d\n", (int16_t)rval);
  mask = 0xff;
 80067c8:	23ff      	movs	r3, #255	; 0xff
 80067ca:	75fb      	strb	r3, [r7, #23]
  shift = 8-shift;
 80067cc:	7f7b      	ldrb	r3, [r7, #29]
 80067ce:	f1c3 0308 	rsb	r3, r3, #8
 80067d2:	777b      	strb	r3, [r7, #29]
  bits -= shift;
 80067d4:	7fba      	ldrb	r2, [r7, #30]
 80067d6:	7f7b      	ldrb	r3, [r7, #29]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	77bb      	strb	r3, [r7, #30]

  // first byte already contained more bits than we need
  if(shift > size) {
 80067dc:	7f7a      	ldrb	r2, [r7, #29]
 80067de:	7a7b      	ldrb	r3, [r7, #9]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d937      	bls.n	8006854 <collect_bits+0xe0>
    //    iprintf("  too many bits, masked %x ->", (1<<size)-1);
    // mask unused bits
    rval &= (1<<size)-1;
 80067e4:	7a7b      	ldrb	r3, [r7, #9]
 80067e6:	2201      	movs	r2, #1
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	b21a      	sxth	r2, r3
 80067f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80067f8:	4013      	ands	r3, r2
 80067fa:	b21b      	sxth	r3, r3
 80067fc:	837b      	strh	r3, [r7, #26]
 80067fe:	e02c      	b.n	800685a <collect_bits+0xe6>
    //    iprintf("%d\n", (int16_t)rval);
  } else {
    // further bytes if required
    while(bits) {
      mask = (bits<8)?(0xff>>(8-bits)):0xff;
 8006800:	7fbb      	ldrb	r3, [r7, #30]
 8006802:	2b07      	cmp	r3, #7
 8006804:	d807      	bhi.n	8006816 <collect_bits+0xa2>
 8006806:	7fbb      	ldrb	r3, [r7, #30]
 8006808:	f1c3 0308 	rsb	r3, r3, #8
 800680c:	22ff      	movs	r2, #255	; 0xff
 800680e:	fa42 f303 	asr.w	r3, r2, r3
 8006812:	b2db      	uxtb	r3, r3
 8006814:	e000      	b.n	8006818 <collect_bits+0xa4>
 8006816:	23ff      	movs	r3, #255	; 0xff
 8006818:	75fb      	strb	r3, [r7, #23]
      //      iprintf("+ m:%x by:%d bi=%d sh=%d ->", mask, byte, bits, shift);
      rval += (p[byte++] & mask) << shift;
 800681a:	7ffb      	ldrb	r3, [r7, #31]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	77fa      	strb	r2, [r7, #31]
 8006820:	461a      	mov	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4413      	add	r3, r2
 8006826:	781a      	ldrb	r2, [r3, #0]
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	4013      	ands	r3, r2
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	7f7b      	ldrb	r3, [r7, #29]
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	b29a      	uxth	r2, r3
 8006838:	8b7b      	ldrh	r3, [r7, #26]
 800683a:	4413      	add	r3, r2
 800683c:	837b      	strh	r3, [r7, #26]
      //      iprintf("%d\n", (int16_t)rval);
      shift += 8;
 800683e:	7f7b      	ldrb	r3, [r7, #29]
 8006840:	3308      	adds	r3, #8
 8006842:	777b      	strb	r3, [r7, #29]
      bits -= (bits>8)?8:bits;
 8006844:	7fbb      	ldrb	r3, [r7, #30]
 8006846:	2b08      	cmp	r3, #8
 8006848:	bf28      	it	cs
 800684a:	2308      	movcs	r3, #8
 800684c:	b2db      	uxtb	r3, r3
 800684e:	7fba      	ldrb	r2, [r7, #30]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	77bb      	strb	r3, [r7, #30]
    while(bits) {
 8006854:	7fbb      	ldrb	r3, [r7, #30]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1d2      	bne.n	8006800 <collect_bits+0x8c>
    }
  }

  if(is_signed) {
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d016      	beq.n	800688e <collect_bits+0x11a>
    // do sign expansion
    uint16_t sign_bit = 1<<(size-1);
 8006860:	7a7b      	ldrb	r3, [r7, #9]
 8006862:	3b01      	subs	r3, #1
 8006864:	2201      	movs	r2, #1
 8006866:	fa02 f303 	lsl.w	r3, r2, r3
 800686a:	833b      	strh	r3, [r7, #24]
    if(rval & sign_bit) {
 800686c:	8b7a      	ldrh	r2, [r7, #26]
 800686e:	8b3b      	ldrh	r3, [r7, #24]
 8006870:	4013      	ands	r3, r2
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <collect_bits+0x11a>
      while(sign_bit) {
 8006878:	e006      	b.n	8006888 <collect_bits+0x114>
	rval |= sign_bit;
 800687a:	8b7a      	ldrh	r2, [r7, #26]
 800687c:	8b3b      	ldrh	r3, [r7, #24]
 800687e:	4313      	orrs	r3, r2
 8006880:	837b      	strh	r3, [r7, #26]
	sign_bit <<= 1;
 8006882:	8b3b      	ldrh	r3, [r7, #24]
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	833b      	strh	r3, [r7, #24]
      while(sign_bit) {
 8006888:	8b3b      	ldrh	r3, [r7, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1f5      	bne.n	800687a <collect_bits+0x106>
      }
      //      iprintf(" is negative -> sign expand to %d\n", (int16_t)rval);
    }
  }

  return rval;
 800688e:	8b7b      	ldrh	r3, [r7, #26]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3724      	adds	r7, #36	; 0x24
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 80068b0:	3208      	adds	r2, #8
 80068b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b6:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80068b8:	4b25      	ldr	r3, [pc, #148]	; (8006950 <USBH_HID_MouseInit+0xb4>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	801a      	strh	r2, [r3, #0]
  mouse_info.y = 0U;
 80068be:	4b24      	ldr	r3, [pc, #144]	; (8006950 <USBH_HID_MouseInit+0xb4>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	805a      	strh	r2, [r3, #2]
  mouse_info.buttons[0] = 0U;
 80068c4:	4b22      	ldr	r3, [pc, #136]	; (8006950 <USBH_HID_MouseInit+0xb4>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	711a      	strb	r2, [r3, #4]
  mouse_info.buttons[1] = 0U;
 80068ca:	4b21      	ldr	r3, [pc, #132]	; (8006950 <USBH_HID_MouseInit+0xb4>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	715a      	strb	r2, [r3, #5]
  mouse_info.buttons[2] = 0U;
 80068d0:	4b1f      	ldr	r3, [pc, #124]	; (8006950 <USBH_HID_MouseInit+0xb4>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	719a      	strb	r2, [r3, #6]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e00c      	b.n	80068f6 <USBH_HID_MouseInit+0x5a>
  {
    mouse_report_data[i] = 0U;
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <USBH_HID_MouseInit+0xb8>)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	2200      	movs	r2, #0
 80068e4:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 80068e6:	4a1c      	ldr	r2, [pc, #112]	; (8006958 <USBH_HID_MouseInit+0xbc>)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2100      	movs	r1, #0
 80068ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3301      	adds	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d9ef      	bls.n	80068dc <USBH_HID_MouseInit+0x40>

  //if (HID_Handle->length > sizeof(mouse_report_data))
  //{
  //  HID_Handle->length = sizeof(mouse_report_data);
  //}
  HID_Handle->length = HID_Handle->HID_Desc.RptDesc.report_size+ (HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006902:	b29a      	uxth	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800690a:	2b00      	cmp	r3, #0
 800690c:	bf14      	ite	ne
 800690e:	2301      	movne	r3, #1
 8006910:	2300      	moveq	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	b29b      	uxth	r3, r3
 8006916:	4413      	add	r3, r2
 8006918:	b29a      	uxth	r2, r3
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	831a      	strh	r2, [r3, #24]
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4a0d      	ldr	r2, [pc, #52]	; (8006958 <USBH_HID_MouseInit+0xbc>)
 8006922:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * HID_Handle->length);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f103 0008 	add.w	r0, r3, #8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	8b1b      	ldrh	r3, [r3, #24]
 8006934:	461a      	mov	r2, r3
 8006936:	0092      	lsls	r2, r2, #2
 8006938:	4413      	add	r3, r2
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	b29b      	uxth	r3, r3
 800693e:	461a      	mov	r2, r3
 8006940:	f7ff fa86 	bl	8005e50 <USBH_HID_FifoInit>

  return USBH_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	200001e0 	.word	0x200001e0
 8006954:	200001e8 	.word	0x200001e8
 8006958:	200001f0 	.word	0x200001f0

0800695c <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f80d 	bl	8006984 <USBH_HID_MouseDecode>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 8006970:	4b03      	ldr	r3, [pc, #12]	; (8006980 <USBH_HID_GetMouseInfo+0x24>)
 8006972:	e000      	b.n	8006976 <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 8006974:	2300      	movs	r3, #0
  }
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	200001e0 	.word	0x200001e0

08006984 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle =  (HID_HandleTypeDef *) phost->pActiveClass->pData[phost->device.current_interface];
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	f892 2324 	ldrb.w	r2, [r2, #804]	; 0x324
 8006998:	3208      	adds	r2, #8
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	61bb      	str	r3, [r7, #24]

  if (HID_Handle->length == 0U)
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	8b1b      	ldrh	r3, [r3, #24]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <USBH_HID_MouseDecode+0x28>
  {
    return USBH_FAIL;
 80069a8:	2302      	movs	r3, #2
 80069aa:	e0fb      	b.n	8006ba4 <USBH_HID_MouseDecode+0x220>
  }

  //Clear mouse_report_data

  memset(&mouse_report_data,0,sizeof(mouse_report_data));
 80069ac:	2208      	movs	r2, #8
 80069ae:	2100      	movs	r1, #0
 80069b0:	487e      	ldr	r0, [pc, #504]	; (8006bac <USBH_HID_MouseDecode+0x228>)
 80069b2:	f002 fa5d 	bl	8008e70 <memset>


  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) !=0)
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	f103 0008 	add.w	r0, r3, #8
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	8b1b      	ldrh	r3, [r3, #24]
 80069c0:	461a      	mov	r2, r3
 80069c2:	497a      	ldr	r1, [pc, #488]	; (8006bac <USBH_HID_MouseDecode+0x228>)
 80069c4:	f7ff fa60 	bl	8005e88 <USBH_HID_FifoRead>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 80e9 	beq.w	8006ba2 <USBH_HID_MouseDecode+0x21e>
  {

	  uint8_t btn = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	77fb      	strb	r3, [r7, #31]
	  uint8_t btn_extra = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	77bb      	strb	r3, [r7, #30]
	  uint8_t i;



	  // skip report id if present
	  uint8_t *p = mouse_report_data + (HID_Handle->HID_Desc.RptDesc.report_id?1:0);
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <USBH_HID_MouseDecode+0x62>
 80069e2:	4b73      	ldr	r3, [pc, #460]	; (8006bb0 <USBH_HID_MouseDecode+0x22c>)
 80069e4:	e000      	b.n	80069e8 <USBH_HID_MouseDecode+0x64>
 80069e6:	4b71      	ldr	r3, [pc, #452]	; (8006bac <USBH_HID_MouseDecode+0x228>)
 80069e8:	617b      	str	r3, [r7, #20]


	  //process axis
	  // two axes ...
	  		for(i=0;i<2;i++) {
 80069ea:	2300      	movs	r3, #0
 80069ec:	777b      	strb	r3, [r7, #29]
 80069ee:	e02e      	b.n	8006a4e <USBH_HID_MouseDecode+0xca>
	  			// if logical minimum is > logical maximum then logical minimum
	  			// is signed. This means that the value itself is also signed
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 80069f0:	7f7b      	ldrb	r3, [r7, #29]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	3306      	adds	r3, #6
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	4413      	add	r3, r2
 80069fa:	899a      	ldrh	r2, [r3, #12]
	  				HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.max;
 80069fc:	7f7b      	ldrb	r3, [r7, #29]
 80069fe:	69b9      	ldr	r1, [r7, #24]
 8006a00:	3306      	adds	r3, #6
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	440b      	add	r3, r1
 8006a06:	89db      	ldrh	r3, [r3, #14]
	  			int is_signed = HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].logical.min >
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	bf8c      	ite	hi
 8006a0c:	2301      	movhi	r3, #1
 8006a0e:	2300      	movls	r3, #0
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	613b      	str	r3, [r7, #16]
	  			a[i] = collect_bits(p, HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].offset,
 8006a14:	7f7b      	ldrb	r3, [r7, #29]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	3306      	adds	r3, #6
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	8919      	ldrh	r1, [r3, #8]
 8006a20:	7f7b      	ldrb	r3, [r7, #29]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	3306      	adds	r3, #6
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	4413      	add	r3, r2
 8006a2a:	7a9a      	ldrb	r2, [r3, #10]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	6978      	ldr	r0, [r7, #20]
 8006a30:	f7ff fea0 	bl	8006774 <collect_bits>
 8006a34:	4603      	mov	r3, r0
 8006a36:	461a      	mov	r2, r3
 8006a38:	7f7b      	ldrb	r3, [r7, #29]
 8006a3a:	b212      	sxth	r2, r2
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	f107 0120 	add.w	r1, r7, #32
 8006a42:	440b      	add	r3, r1
 8006a44:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 8006a48:	7f7b      	ldrb	r3, [r7, #29]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	777b      	strb	r3, [r7, #29]
 8006a4e:	7f7b      	ldrb	r3, [r7, #29]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d9cd      	bls.n	80069f0 <USBH_HID_MouseDecode+0x6c>
	  					HID_Handle->HID_Desc.RptDesc.joystick_mouse.axis[i].size, is_signed);
	  		}

	  //process 4 first buttons
	  for(i=0;i<4;i++)
 8006a54:	2300      	movs	r3, #0
 8006a56:	777b      	strb	r3, [r7, #29]
 8006a58:	e020      	b.n	8006a9c <USBH_HID_MouseDecode+0x118>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8006a5a:	7f7b      	ldrb	r3, [r7, #29]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	3320      	adds	r3, #32
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	4413      	add	r3, r2
 8006a64:	7a1b      	ldrb	r3, [r3, #8]
 8006a66:	461a      	mov	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8006a6e:	7f7b      	ldrb	r3, [r7, #29]
 8006a70:	69b9      	ldr	r1, [r7, #24]
 8006a72:	3320      	adds	r3, #32
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	440b      	add	r3, r1
 8006a78:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <USBH_HID_MouseDecode+0x112>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn |= (1<<i);
 8006a82:	7f7b      	ldrb	r3, [r7, #29]
 8006a84:	2201      	movs	r2, #1
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	b25a      	sxtb	r2, r3
 8006a8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	b25b      	sxtb	r3, r3
 8006a94:	77fb      	strb	r3, [r7, #31]
	  for(i=0;i<4;i++)
 8006a96:	7f7b      	ldrb	r3, [r7, #29]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	777b      	strb	r3, [r7, #29]
 8006a9c:	7f7b      	ldrb	r3, [r7, #29]
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d9db      	bls.n	8006a5a <USBH_HID_MouseDecode+0xd6>

	  // ... and the eight extra buttons
	  for(i=4;i<12;i++)
 8006aa2:	2304      	movs	r3, #4
 8006aa4:	777b      	strb	r3, [r7, #29]
 8006aa6:	e021      	b.n	8006aec <USBH_HID_MouseDecode+0x168>
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8006aa8:	7f7b      	ldrb	r3, [r7, #29]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	3320      	adds	r3, #32
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	4413      	add	r3, r2
 8006ab2:	7a1b      	ldrb	r3, [r3, #8]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	781a      	ldrb	r2, [r3, #0]
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8006abc:	7f7b      	ldrb	r3, [r7, #29]
 8006abe:	69b9      	ldr	r1, [r7, #24]
 8006ac0:	3320      	adds	r3, #32
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	440b      	add	r3, r1
 8006ac6:	7a5b      	ldrb	r3, [r3, #9]
	  	if(p[HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].byte_offset] &
 8006ac8:	4013      	ands	r3, r2
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <USBH_HID_MouseDecode+0x162>
	  			HID_Handle->HID_Desc.RptDesc.joystick_mouse.button[i].bitmask) btn_extra |= (1<<(i-4));
 8006ad0:	7f7b      	ldrb	r3, [r7, #29]
 8006ad2:	3b04      	subs	r3, #4
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	b25a      	sxtb	r2, r3
 8006adc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	b25b      	sxtb	r3, r3
 8006ae4:	77bb      	strb	r3, [r7, #30]
	  for(i=4;i<12;i++)
 8006ae6:	7f7b      	ldrb	r3, [r7, #29]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	777b      	strb	r3, [r7, #29]
 8006aec:	7f7b      	ldrb	r3, [r7, #29]
 8006aee:	2b0b      	cmp	r3, #11
 8006af0:	d9da      	bls.n	8006aa8 <USBH_HID_MouseDecode+0x124>

	  //process mouse
	  if(HID_Handle->HID_Desc.RptDesc.type == REPORT_TYPE_MOUSE) {
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d14d      	bne.n	8006b9e <USBH_HID_MouseDecode+0x21a>
	  		// iprintf("mouse %d %d %x\n", (int16_t)a[0], (int16_t)a[1], btn);
	  		// limit mouse movement to +/- 128
	  		for(i=0;i<2;i++) {
 8006b02:	2300      	movs	r3, #0
 8006b04:	777b      	strb	r3, [r7, #29]
 8006b06:	e026      	b.n	8006b56 <USBH_HID_MouseDecode+0x1d2>
	  		if((int16_t)a[i] >  127) a[i] =  127;
 8006b08:	7f7b      	ldrb	r3, [r7, #29]
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	f107 0220 	add.w	r2, r7, #32
 8006b10:	4413      	add	r3, r2
 8006b12:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8006b16:	2b7f      	cmp	r3, #127	; 0x7f
 8006b18:	dd07      	ble.n	8006b2a <USBH_HID_MouseDecode+0x1a6>
 8006b1a:	7f7b      	ldrb	r3, [r7, #29]
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	f107 0220 	add.w	r2, r7, #32
 8006b22:	4413      	add	r3, r2
 8006b24:	227f      	movs	r2, #127	; 0x7f
 8006b26:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		if((int16_t)a[i] < -128) a[i] = -128;
 8006b2a:	7f7b      	ldrb	r3, [r7, #29]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	f107 0220 	add.w	r2, r7, #32
 8006b32:	4413      	add	r3, r2
 8006b34:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8006b38:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8006b3c:	da08      	bge.n	8006b50 <USBH_HID_MouseDecode+0x1cc>
 8006b3e:	7f7b      	ldrb	r3, [r7, #29]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	f107 0220 	add.w	r2, r7, #32
 8006b46:	4413      	add	r3, r2
 8006b48:	f64f 7280 	movw	r2, #65408	; 0xff80
 8006b4c:	f823 2c14 	strh.w	r2, [r3, #-20]
	  		for(i=0;i<2;i++) {
 8006b50:	7f7b      	ldrb	r3, [r7, #29]
 8006b52:	3301      	adds	r3, #1
 8006b54:	777b      	strb	r3, [r7, #29]
 8006b56:	7f7b      	ldrb	r3, [r7, #29]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d9d5      	bls.n	8006b08 <USBH_HID_MouseDecode+0x184>
	  		}
	  		//btn
	  	  mouse_info.x = a[0];
 8006b5c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006b60:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <USBH_HID_MouseDecode+0x230>)
 8006b62:	801a      	strh	r2, [r3, #0]
	  	  mouse_info.y = a[1];
 8006b64:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006b68:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <USBH_HID_MouseDecode+0x230>)
 8006b6a:	805a      	strh	r2, [r3, #2]
	  	  mouse_info.buttons[0] = btn&0x1;
 8006b6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	b25a      	sxtb	r2, r3
 8006b76:	4b0f      	ldr	r3, [pc, #60]	; (8006bb4 <USBH_HID_MouseDecode+0x230>)
 8006b78:	711a      	strb	r2, [r3, #4]
	  	  mouse_info.buttons[1] = (btn>>1)&0x1;
 8006b7a:	7ffb      	ldrb	r3, [r7, #31]
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	b25b      	sxtb	r3, r3
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	b25a      	sxtb	r2, r3
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <USBH_HID_MouseDecode+0x230>)
 8006b8a:	715a      	strb	r2, [r3, #5]
	  	  mouse_info.buttons[2] = (btn>>2)&0x1;
 8006b8c:	7ffb      	ldrb	r3, [r7, #31]
 8006b8e:	089b      	lsrs	r3, r3, #2
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	b25b      	sxtb	r3, r3
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	b25a      	sxtb	r2, r3
 8006b9a:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <USBH_HID_MouseDecode+0x230>)
 8006b9c:	719a      	strb	r2, [r3, #6]
	  	}
    return USBH_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e000      	b.n	8006ba4 <USBH_HID_MouseDecode+0x220>
  }
  return   USBH_FAIL;
 8006ba2:	2302      	movs	r3, #2
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	200001e8 	.word	0x200001e8
 8006bb0:	200001e9 	.word	0x200001e9
 8006bb4:	200001e0 	.word	0x200001e0

08006bb8 <report_is_usable>:
  uint8_t bType: 2;
  uint8_t bTag: 4;
} __attribute__((packed)) item_t;


int report_is_usable(uint16_t bit_count, uint8_t report_complete, hid_report_t *conf) {
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	603a      	str	r2, [r7, #0]
 8006bc2:	80fb      	strh	r3, [r7, #6]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	717b      	strb	r3, [r7, #5]
// hidp_debugf("  - total bit count: %d (%d bytes, %d bits)",
//	      bit_count, bit_count/8, bit_count%8);

  conf->report_size = bit_count/8;
 8006bc8:	88fb      	ldrh	r3, [r7, #6]
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	709a      	strb	r2, [r3, #2]

  // check if something useful was detected
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d104      	bne.n	8006bec <report_is_usable+0x34>
 8006be2:	797b      	ldrb	r3, [r7, #5]
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	2b07      	cmp	r3, #7
 8006bea:	d012      	beq.n	8006c12 <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	b2db      	uxtb	r3, r3
  if( ((conf->type == REPORT_TYPE_JOYSTICK) && ((report_complete & JOYSTICK_COMPLETE) == JOYSTICK_COMPLETE)) ||
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d104      	bne.n	8006c04 <report_is_usable+0x4c>
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 8006bfa:	797b      	ldrb	r3, [r7, #5]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	2b0f      	cmp	r3, #15
 8006c02:	d006      	beq.n	8006c12 <report_is_usable+0x5a>
      ((conf->type == REPORT_TYPE_KEYBOARD))) {
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	b2db      	uxtb	r3, r3
      ((conf->type == REPORT_TYPE_MOUSE)    && ((report_complete & MOUSE_COMPLETE) == MOUSE_COMPLETE)) ||
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d101      	bne.n	8006c16 <report_is_usable+0x5e>
 //   hidp_debugf("  - report %d is usable", conf->report_id);
    return 1;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <report_is_usable+0x60>
  }

//  hidp_debugf("  - unusable report %d", conf->report_id);
  return 0;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <parse_report_descriptor>:



int parse_report_descriptor(uint8_t *rep, uint16_t rep_size,hid_report_t *conf) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08e      	sub	sp, #56	; 0x38
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	817b      	strh	r3, [r7, #10]
  int8_t app_collection = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int8_t phys_log_collection = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint8_t skip_collection = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  int8_t generic_desktop = -1;   // depth at which first gen_desk was found
 8006c44:	23ff      	movs	r3, #255	; 0xff
 8006c46:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  uint8_t collection_depth = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33


  //
  uint8_t report_size = 0, report_count = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006c56:	2300      	movs	r3, #0
 8006c58:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  uint16_t bit_count = 0, usage_count = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006c60:	2300      	movs	r3, #0
 8006c62:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t logical_minimum=0, logical_maximum=0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006c68:	2300      	movs	r3, #0
 8006c6a:	853b      	strh	r3, [r7, #40]	; 0x28

  // mask used to check of all required components have been found, so
  // that e.g. both axes and the button of a joystick are ready to be used
  uint8_t report_complete = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  // joystick/mouse components
  int8_t axis[2] = { -1, -1};
 8006c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c76:	823b      	strh	r3, [r7, #16]
  uint8_t btns = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  int8_t hat = -1;
 8006c7e:	23ff      	movs	r3, #255	; 0xff
 8006c80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


  while(rep_size) {
 8006c84:	e2d4      	b.n	8007230 <parse_report_descriptor+0x60c>
    // extract short item
    uint8_t tag = ((item_t*)rep)->bTag;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	777b      	strb	r3, [r7, #29]
    uint8_t type = ((item_t*)rep)->bType;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	773b      	strb	r3, [r7, #28]
    uint8_t size = ((item_t*)rep)->bSize;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	76fb      	strb	r3, [r7, #27]

    rep++;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3301      	adds	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
    rep_size--;   // one byte consumed
 8006cb0:	897b      	ldrh	r3, [r7, #10]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	817b      	strh	r3, [r7, #10]



    uint32_t value = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	623b      	str	r3, [r7, #32]
     if(size) {      // size 1/2/3
 8006cba:	7efb      	ldrb	r3, [r7, #27]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <parse_report_descriptor+0xac>
       value = *rep++;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	60fa      	str	r2, [r7, #12]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	623b      	str	r3, [r7, #32]
       rep_size--;
 8006cca:	897b      	ldrh	r3, [r7, #10]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	817b      	strh	r3, [r7, #10]
     }

     if(size > 1) {  // size 2/3
 8006cd0:	7efb      	ldrb	r3, [r7, #27]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d90b      	bls.n	8006cee <parse_report_descriptor+0xca>
       value = (value & 0xff) + ((uint32_t)(*rep++)<<8);
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1c59      	adds	r1, r3, #1
 8006cde:	60f9      	str	r1, [r7, #12]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	4413      	add	r3, r2
 8006ce6:	623b      	str	r3, [r7, #32]
       rep_size--;
 8006ce8:	897b      	ldrh	r3, [r7, #10]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	817b      	strh	r3, [r7, #10]
     }

     if(size > 2) {  // size 3
 8006cee:	7efb      	ldrb	r3, [r7, #27]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d915      	bls.n	8006d20 <parse_report_descriptor+0xfc>
       value &= 0xffff;
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<16);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	60fa      	str	r2, [r7, #12]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	041b      	lsls	r3, r3, #16
 8006d04:	6a3a      	ldr	r2, [r7, #32]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	623b      	str	r3, [r7, #32]
       value |= ((uint32_t)(*rep++)<<24);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	60fa      	str	r2, [r7, #12]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	061b      	lsls	r3, r3, #24
 8006d14:	6a3a      	ldr	r2, [r7, #32]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	623b      	str	r3, [r7, #32]
       rep_size-=2;
 8006d1a:	897b      	ldrh	r3, [r7, #10]
 8006d1c:	3b02      	subs	r3, #2
 8006d1e:	817b      	strh	r3, [r7, #10]
     }


       // we are currently skipping an unknown/unsupported collection)
           if(skip_collection) {
 8006d20:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d029      	beq.n	8006d7c <parse_report_descriptor+0x158>
             if(!type) {  // main item
 8006d28:	7f3b      	ldrb	r3, [r7, #28]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f040 8280 	bne.w	8007230 <parse_report_descriptor+0x60c>
       				// any new collection increases the depth of collections to skip
       				if(tag == 10) {
 8006d30:	7f7b      	ldrb	r3, [r7, #29]
 8006d32:	2b0a      	cmp	r3, #10
 8006d34:	d109      	bne.n	8006d4a <parse_report_descriptor+0x126>
       					skip_collection++;
 8006d36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth++;
 8006d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d44:	3301      	adds	r3, #1
 8006d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
       				}

       				// any end collection decreases it
       				if(tag == 12) {
 8006d4a:	7f7b      	ldrb	r3, [r7, #29]
 8006d4c:	2b0c      	cmp	r3, #12
 8006d4e:	f040 826f 	bne.w	8007230 <parse_report_descriptor+0x60c>
       					skip_collection--;
 8006d52:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006d56:	3b01      	subs	r3, #1
 8006d58:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
       					collection_depth--;
 8006d5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d60:	3b01      	subs	r3, #1
 8006d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

       					// leaving the depth the generic desktop was valid for
       					if(generic_desktop > collection_depth)
 8006d66:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 8006d6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	f340 825e 	ble.w	8007230 <parse_report_descriptor+0x60c>
       						generic_desktop = -1;
 8006d74:	23ff      	movs	r3, #255	; 0xff
 8006d76:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8006d7a:	e259      	b.n	8007230 <parse_report_descriptor+0x60c>
             }

           } else {


                 switch(type) {
 8006d7c:	7f3b      	ldrb	r3, [r7, #28]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	f000 81cb 	beq.w	800711a <parse_report_descriptor+0x4f6>
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	f300 8252 	bgt.w	800722e <parse_report_descriptor+0x60a>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <parse_report_descriptor+0x172>
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	f000 8172 	beq.w	8007078 <parse_report_descriptor+0x454>
 8006d94:	e24b      	b.n	800722e <parse_report_descriptor+0x60a>
                 case 0:
           	// main item

           	switch(tag) {
 8006d96:	7f7b      	ldrb	r3, [r7, #29]
 8006d98:	3b08      	subs	r3, #8
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	f200 8168 	bhi.w	8007070 <parse_report_descriptor+0x44c>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <parse_report_descriptor+0x184>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006dbd 	.word	0x08006dbd
 8006dac:	08007075 	.word	0x08007075
 8006db0:	08006fa3 	.word	0x08006fa3
 8006db4:	08007075 	.word	0x08007075
 8006db8:	08006fff 	.word	0x08006fff
           	case 8:
           	  // handle found buttons
           	  if(btns) {
 8006dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d050      	beq.n	8006e66 <parse_report_descriptor+0x242>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f003 0303 	and.w	r3, r3, #3
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d006      	beq.n	8006de0 <parse_report_descriptor+0x1bc>
           	       (conf->type == REPORT_TYPE_MOUSE)) {
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	b2db      	uxtb	r3, r3
           	    if((conf->type == REPORT_TYPE_JOYSTICK) ||
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d142      	bne.n	8006e66 <parse_report_descriptor+0x242>
           	      // scan for up to four buttons
           	      uint8_t b;
           	      for(b=0;b<12;b++) {
 8006de0:	2300      	movs	r3, #0
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e02c      	b.n	8006e40 <parse_report_descriptor+0x21c>
           		if(report_count > b) {
 8006de6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8006dea:	7ffb      	ldrb	r3, [r7, #31]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d91a      	bls.n	8006e26 <parse_report_descriptor+0x202>
           		  uint16_t this_bit = bit_count+b;
 8006df0:	7ffb      	ldrb	r3, [r7, #31]
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006df6:	4413      	add	r3, r2
 8006df8:	833b      	strh	r3, [r7, #24]

           		  conf->joystick_mouse.button[b].byte_offset = this_bit/8;
 8006dfa:	8b3b      	ldrh	r3, [r7, #24]
 8006dfc:	08db      	lsrs	r3, r3, #3
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	7ffa      	ldrb	r2, [r7, #31]
 8006e02:	b2d9      	uxtb	r1, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	320c      	adds	r2, #12
 8006e08:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
           		  conf->joystick_mouse.button[b].bitmask = 1 << (this_bit%8);
 8006e0c:	8b3b      	ldrh	r3, [r7, #24]
 8006e0e:	f003 0307 	and.w	r3, r3, #7
 8006e12:	2201      	movs	r2, #1
 8006e14:	409a      	lsls	r2, r3
 8006e16:	7ffb      	ldrb	r3, [r7, #31]
 8006e18:	b2d1      	uxtb	r1, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	4413      	add	r3, r2
 8006e22:	460a      	mov	r2, r1
 8006e24:	705a      	strb	r2, [r3, #1]
           		}
           					conf->joystick_mouse.button_count = report_count * report_size;
 8006e26:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8006e2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e2e:	fb12 f303 	smulbb	r3, r2, r3
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
           	      for(b=0;b<12;b++) {
 8006e3a:	7ffb      	ldrb	r3, [r7, #31]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	77fb      	strb	r3, [r7, #31]
 8006e40:	7ffb      	ldrb	r3, [r7, #31]
 8006e42:	2b0b      	cmp	r3, #11
 8006e44:	d9cf      	bls.n	8006de6 <parse_report_descriptor+0x1c2>
           	      }

           	      // we found at least one button which is all we want to accept this as a valid
           	      // joystick
           	      report_complete |= JOY_MOUSE_REQ_BTN_0;
 8006e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e4a:	f043 0304 	orr.w	r3, r3, #4
 8006e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	      if(report_count > 1) report_complete |= JOY_MOUSE_REQ_BTN_1;
 8006e52:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d905      	bls.n	8006e66 <parse_report_descriptor+0x242>
 8006e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e5e:	f043 0308 	orr.w	r3, r3, #8
 8006e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	    }
           	  }

           	  // handle found axes
           	  uint8_t c;
           	  for(c=0;c<2;c++) {
 8006e66:	2300      	movs	r3, #0
 8006e68:	77bb      	strb	r3, [r7, #30]
 8006e6a:	e05e      	b.n	8006f2a <parse_report_descriptor+0x306>
           	    if(axis[c] >= 0) {
 8006e6c:	7fbb      	ldrb	r3, [r7, #30]
 8006e6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006e72:	4413      	add	r3, r2
 8006e74:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	db53      	blt.n	8006f24 <parse_report_descriptor+0x300>
           	      uint16_t cnt = bit_count + report_size * axis[c];
 8006e7c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	7fbb      	ldrb	r3, [r7, #30]
 8006e84:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006e88:	440b      	add	r3, r1
 8006e8a:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	fb12 f303 	smulbb	r3, r2, r3
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e98:	4413      	add	r3, r2
 8006e9a:	82bb      	strh	r3, [r7, #20]

           	      if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d006      	beq.n	8006eb8 <parse_report_descriptor+0x294>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d135      	bne.n	8006f24 <parse_report_descriptor+0x300>
           		// save in joystick report
           		conf->joystick_mouse.axis[c].offset = cnt;
 8006eb8:	7fba      	ldrb	r2, [r7, #30]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3201      	adds	r2, #1
 8006ebe:	8ab9      	ldrh	r1, [r7, #20]
 8006ec0:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
           		conf->joystick_mouse.axis[c].size = report_size;
 8006ec4:	7fbb      	ldrb	r3, [r7, #30]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	4413      	add	r3, r2
 8006ece:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8006ed2:	709a      	strb	r2, [r3, #2]
           		conf->joystick_mouse.axis[c].logical.min = logical_minimum;
 8006ed4:	7fbb      	ldrb	r3, [r7, #30]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	4413      	add	r3, r2
 8006ede:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006ee0:	809a      	strh	r2, [r3, #4]
           		conf->joystick_mouse.axis[c].logical.max = logical_maximum;
 8006ee2:	7fbb      	ldrb	r3, [r7, #30]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	4413      	add	r3, r2
 8006eec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006eee:	80da      	strh	r2, [r3, #6]
           		conf->joystick_mouse.axis[c].size = report_size;
 8006ef0:	7fbb      	ldrb	r3, [r7, #30]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	4413      	add	r3, r2
 8006efa:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8006efe:	709a      	strb	r2, [r3, #2]
           		if(c==0) report_complete |= JOY_MOUSE_REQ_AXIS_X;
 8006f00:	7fbb      	ldrb	r3, [r7, #30]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d105      	bne.n	8006f12 <parse_report_descriptor+0x2ee>
 8006f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f0a:	f043 0301 	orr.w	r3, r3, #1
 8006f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           		if(c==1) report_complete |= JOY_MOUSE_REQ_AXIS_Y;
 8006f12:	7fbb      	ldrb	r3, [r7, #30]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d105      	bne.n	8006f24 <parse_report_descriptor+0x300>
 8006f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f1c:	f043 0302 	orr.w	r3, r3, #2
 8006f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  for(c=0;c<2;c++) {
 8006f24:	7fbb      	ldrb	r3, [r7, #30]
 8006f26:	3301      	adds	r3, #1
 8006f28:	77bb      	strb	r3, [r7, #30]
 8006f2a:	7fbb      	ldrb	r3, [r7, #30]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d99d      	bls.n	8006e6c <parse_report_descriptor+0x248>
           	      }
           	    }
           	  }

           	  // handle found hat
           	  if(hat >= 0) {
 8006f30:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	db1a      	blt.n	8006f6e <parse_report_descriptor+0x34a>
           	    uint16_t cnt = bit_count + report_size * hat;
 8006f38:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	fb12 f303 	smulbb	r3, r2, r3
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f4c:	4413      	add	r3, r2
 8006f4e:	82fb      	strh	r3, [r7, #22]
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	f003 0303 	and.w	r3, r3, #3
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d107      	bne.n	8006f6e <parse_report_descriptor+0x34a>
           	      conf->joystick_mouse.hat.offset = cnt;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	8afa      	ldrh	r2, [r7, #22]
 8006f62:	861a      	strh	r2, [r3, #48]	; 0x30
           	      conf->joystick_mouse.hat.size = report_size;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8006f6a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
           	    }
           	  }


           	  // reset for next inputs
           	  bit_count += report_count * report_size;
 8006f6e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	fb12 f303 	smulbb	r3, r2, r3
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f82:	4413      	add	r3, r2
 8006f84:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	  usage_count = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  btns = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
           	  axis[0] = axis[1] = -1;
 8006f90:	23ff      	movs	r3, #255	; 0xff
 8006f92:	747b      	strb	r3, [r7, #17]
 8006f94:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006f98:	743b      	strb	r3, [r7, #16]
           	  hat = -1;
 8006f9a:	23ff      	movs	r3, #255	; 0xff
 8006f9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
           	  break;
 8006fa0:	e069      	b.n	8007076 <parse_report_descriptor+0x452>

           	case 11:
           	  break;

           	case 10:
           	  collection_depth++;
 8006fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
           	  usage_count = 0;
 8006fac:	2300      	movs	r3, #0
 8006fae:	85bb      	strh	r3, [r7, #44]	; 0x2c

           	  if(value == 1) {	   // app collection
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d107      	bne.n	8006fc6 <parse_report_descriptor+0x3a2>
           	    app_collection++;
 8006fb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	  } else if(value == 2) {  // logical collection
           	    phys_log_collection++;
           	  } else {
           	    skip_collection++;
           	  }
           	  break;
 8006fc4:	e057      	b.n	8007076 <parse_report_descriptor+0x452>
           	  } else if(value == 0) {  // physical collection
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d107      	bne.n	8006fdc <parse_report_descriptor+0x3b8>
           	    phys_log_collection++;
 8006fcc:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8006fda:	e04c      	b.n	8007076 <parse_report_descriptor+0x452>
           	  } else if(value == 2) {  // logical collection
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d107      	bne.n	8006ff2 <parse_report_descriptor+0x3ce>
           	    phys_log_collection++;
 8006fe2:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	3301      	adds	r3, #1
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	  break;
 8006ff0:	e041      	b.n	8007076 <parse_report_descriptor+0x452>
           	    skip_collection++;
 8006ff2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
           	  break;
 8006ffc:	e03b      	b.n	8007076 <parse_report_descriptor+0x452>

           	case 12:
           	  collection_depth--;
 8006ffe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007002:	3b01      	subs	r3, #1
 8007004:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

           	  // leaving the depth the generic desktop was valid for
           	  if(generic_desktop > collection_depth)
 8007008:	f997 2034 	ldrsb.w	r2, [r7, #52]	; 0x34
 800700c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007010:	429a      	cmp	r2, r3
 8007012:	dd02      	ble.n	800701a <parse_report_descriptor+0x3f6>
           	    generic_desktop = -1;
 8007014:	23ff      	movs	r3, #255	; 0xff
 8007016:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

           	  if(phys_log_collection) {
 800701a:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800701e:	2b00      	cmp	r3, #0
 8007020:	d007      	beq.n	8007032 <parse_report_descriptor+0x40e>

           	    phys_log_collection--;
 8007022:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8007026:	b2db      	uxtb	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b2db      	uxtb	r3, r3
 800702c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
           	    }

           	  } else {
           	    return 0;
           	  }
           	  break;
 8007030:	e021      	b.n	8007076 <parse_report_descriptor+0x452>
           	  } else if(app_collection) {
 8007032:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007036:	2b00      	cmp	r3, #0
 8007038:	d018      	beq.n	800706c <parse_report_descriptor+0x448>
           	    app_collection--;
 800703a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800703e:	b2db      	uxtb	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
           	     if(report_is_usable(bit_count, report_complete, conf))
 8007048:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800704c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff fdb1 	bl	8006bb8 <report_is_usable>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <parse_report_descriptor+0x43c>
           	      return 1;
 800705c:	2301      	movs	r3, #1
 800705e:	e0ec      	b.n	800723a <parse_report_descriptor+0x616>
           	      bit_count = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	85fb      	strh	r3, [r7, #46]	; 0x2e
           	      report_complete = 0;
 8007064:	2300      	movs	r3, #0
 8007066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           	  break;
 800706a:	e004      	b.n	8007076 <parse_report_descriptor+0x452>
           	    return 0;
 800706c:	2300      	movs	r3, #0
 800706e:	e0e4      	b.n	800723a <parse_report_descriptor+0x616>

           	default:
           	  return 0;
 8007070:	2300      	movs	r3, #0
 8007072:	e0e2      	b.n	800723a <parse_report_descriptor+0x616>
           	  break;
 8007074:	bf00      	nop
           	  break;
           	}
           	break;
 8007076:	e0db      	b.n	8007230 <parse_report_descriptor+0x60c>

                 case 1:
           	// global item
           	switch(tag) {
 8007078:	7f7b      	ldrb	r3, [r7, #29]
 800707a:	2b09      	cmp	r3, #9
 800707c:	d847      	bhi.n	800710e <parse_report_descriptor+0x4ea>
 800707e:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <parse_report_descriptor+0x460>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	080070ad 	.word	0x080070ad
 8007088:	080070e9 	.word	0x080070e9
 800708c:	080070ef 	.word	0x080070ef
 8007090:	08007113 	.word	0x08007113
 8007094:	08007113 	.word	0x08007113
 8007098:	08007113 	.word	0x08007113
 800709c:	08007113 	.word	0x08007113
 80070a0:	080070f5 	.word	0x080070f5
 80070a4:	080070fd 	.word	0x080070fd
 80070a8:	08007107 	.word	0x08007107
           	case 0:

           	  if(value == USAGE_PAGE_KEYBOARD) {
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	2b07      	cmp	r3, #7
 80070b0:	d01a      	beq.n	80070e8 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_GAMING) {
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	2b05      	cmp	r3, #5
 80070b6:	d017      	beq.n	80070e8 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_LEDS) {
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d014      	beq.n	80070e8 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_CONSUMER) {
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	2b0c      	cmp	r3, #12
 80070c2:	d011      	beq.n	80070e8 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_BUTTON) {
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	2b09      	cmp	r3, #9
 80070c8:	d103      	bne.n	80070d2 <parse_report_descriptor+0x4ae>
           	    btns = 1;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070d0:	e00a      	b.n	80070e8 <parse_report_descriptor+0x4c4>
           	  } else if(value == USAGE_PAGE_GENERIC_DESKTOP) {
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d11e      	bne.n	8007116 <parse_report_descriptor+0x4f2>
           	    if(generic_desktop < 0)
 80070d8:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 80070dc:	2b00      	cmp	r3, #0
 80070de:	da03      	bge.n	80070e8 <parse_report_descriptor+0x4c4>
           	      generic_desktop = collection_depth;
 80070e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
           	  } else

           	  break;

           	case 1:
           	  logical_minimum = value;
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	857b      	strh	r3, [r7, #42]	; 0x2a
           	  break;
 80070ec:	e014      	b.n	8007118 <parse_report_descriptor+0x4f4>

           	case 2:
           	  logical_maximum = value;
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	853b      	strh	r3, [r7, #40]	; 0x28
           	  break;
 80070f2:	e011      	b.n	8007118 <parse_report_descriptor+0x4f4>

           	case 6:
           	  break;

           	case 7:
           	  report_size = value;
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
           		break;
 80070fa:	e00d      	b.n	8007118 <parse_report_descriptor+0x4f4>

           	case 8:
           	  conf->report_id = value;
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	705a      	strb	r2, [r3, #1]
           	  break;
 8007104:	e008      	b.n	8007118 <parse_report_descriptor+0x4f4>

           	case 9:
           		report_count = value;
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
           	  break;
 800710c:	e004      	b.n	8007118 <parse_report_descriptor+0x4f4>

           	default:
           	  return 0;
 800710e:	2300      	movs	r3, #0
 8007110:	e093      	b.n	800723a <parse_report_descriptor+0x616>
           	  break;
 8007112:	bf00      	nop
 8007114:	e08c      	b.n	8007230 <parse_report_descriptor+0x60c>
           	  break;
 8007116:	bf00      	nop
           	  break;
           	}
           	break;
 8007118:	e08a      	b.n	8007230 <parse_report_descriptor+0x60c>

                 case 2:
           	// local item
           	switch(tag) {
 800711a:	7f7b      	ldrb	r3, [r7, #29]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d07e      	beq.n	800721e <parse_report_descriptor+0x5fa>
 8007120:	2b02      	cmp	r3, #2
 8007122:	f300 8082 	bgt.w	800722a <parse_report_descriptor+0x606>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <parse_report_descriptor+0x50c>
 800712a:	2b01      	cmp	r3, #1
 800712c:	d06f      	beq.n	800720e <parse_report_descriptor+0x5ea>
           	  usage_count += value;
           	  break;

           	default:

           	  break;
 800712e:	e07c      	b.n	800722a <parse_report_descriptor+0x606>
           	  if( !collection_depth && (value == USAGE_KEYBOARD)) {
 8007130:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007134:	2b00      	cmp	r3, #0
 8007136:	d109      	bne.n	800714c <parse_report_descriptor+0x528>
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	2b06      	cmp	r3, #6
 800713c:	d106      	bne.n	800714c <parse_report_descriptor+0x528>
           	    conf->type = REPORT_TYPE_KEYBOARD;
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	7813      	ldrb	r3, [r2, #0]
 8007142:	2102      	movs	r1, #2
 8007144:	f361 0301 	bfi	r3, r1, #0, #2
 8007148:	7013      	strb	r3, [r2, #0]
 800714a:	e05c      	b.n	8007206 <parse_report_descriptor+0x5e2>
           	  } else if(!collection_depth && (value == USAGE_MOUSE)) {
 800714c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007150:	2b00      	cmp	r3, #0
 8007152:	d109      	bne.n	8007168 <parse_report_descriptor+0x544>
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d106      	bne.n	8007168 <parse_report_descriptor+0x544>
           	    conf->type = REPORT_TYPE_MOUSE;
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	7813      	ldrb	r3, [r2, #0]
 800715e:	2101      	movs	r1, #1
 8007160:	f361 0301 	bfi	r3, r1, #0, #2
 8007164:	7013      	strb	r3, [r2, #0]
 8007166:	e04e      	b.n	8007206 <parse_report_descriptor+0x5e2>
           	  } else if(!collection_depth &&
 8007168:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10b      	bne.n	8007188 <parse_report_descriptor+0x564>
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	2b05      	cmp	r3, #5
 8007174:	d002      	beq.n	800717c <parse_report_descriptor+0x558>
           		    ((value == USAGE_GAMEPAD) || (value == USAGE_JOYSTICK))) {
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	2b04      	cmp	r3, #4
 800717a:	d105      	bne.n	8007188 <parse_report_descriptor+0x564>
           	    conf->type = REPORT_TYPE_JOYSTICK;
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	7813      	ldrb	r3, [r2, #0]
 8007180:	f043 0303 	orr.w	r3, r3, #3
 8007184:	7013      	strb	r3, [r2, #0]
 8007186:	e03e      	b.n	8007206 <parse_report_descriptor+0x5e2>
           	  } else if(value == USAGE_POINTER && app_collection) {
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d103      	bne.n	8007196 <parse_report_descriptor+0x572>
 800718e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007192:	2b00      	cmp	r3, #0
 8007194:	d137      	bne.n	8007206 <parse_report_descriptor+0x5e2>
           	  } else if((value == USAGE_X || value == USAGE_Y) && app_collection) {
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	2b30      	cmp	r3, #48	; 0x30
 800719a:	d002      	beq.n	80071a2 <parse_report_descriptor+0x57e>
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2b31      	cmp	r3, #49	; 0x31
 80071a0:	d11e      	bne.n	80071e0 <parse_report_descriptor+0x5bc>
 80071a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01a      	beq.n	80071e0 <parse_report_descriptor+0x5bc>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d006      	beq.n	80071c6 <parse_report_descriptor+0x5a2>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d11e      	bne.n	8007204 <parse_report_descriptor+0x5e0>
           	      if(value == USAGE_X) {
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	2b30      	cmp	r3, #48	; 0x30
 80071ca:	d102      	bne.n	80071d2 <parse_report_descriptor+0x5ae>
           		axis[0] = usage_count;
 80071cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80071ce:	b25b      	sxtb	r3, r3
 80071d0:	743b      	strb	r3, [r7, #16]
           	      if(value == USAGE_Y) {
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	2b31      	cmp	r3, #49	; 0x31
 80071d6:	d115      	bne.n	8007204 <parse_report_descriptor+0x5e0>
           		axis[1] = usage_count;
 80071d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80071da:	b25b      	sxtb	r3, r3
 80071dc:	747b      	strb	r3, [r7, #17]
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 80071de:	e011      	b.n	8007204 <parse_report_descriptor+0x5e0>
           	  } else if((value == USAGE_HAT) && app_collection) {
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	2b39      	cmp	r3, #57	; 0x39
 80071e4:	d10f      	bne.n	8007206 <parse_report_descriptor+0x5e2>
 80071e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <parse_report_descriptor+0x5e2>
           	    if(conf->type == REPORT_TYPE_JOYSTICK) {
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d104      	bne.n	8007206 <parse_report_descriptor+0x5e2>
           	      hat = usage_count;
 80071fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80071fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007202:	e000      	b.n	8007206 <parse_report_descriptor+0x5e2>
           	    if((conf->type == REPORT_TYPE_JOYSTICK) || (conf->type == REPORT_TYPE_MOUSE)) {
 8007204:	bf00      	nop
           	  usage_count++;
 8007206:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007208:	3301      	adds	r3, #1
 800720a:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 800720c:	e00e      	b.n	800722c <parse_report_descriptor+0x608>
           	  usage_count -= (value-1);
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	b29b      	uxth	r3, r3
 8007212:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	b29b      	uxth	r3, r3
 8007218:	3301      	adds	r3, #1
 800721a:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 800721c:	e006      	b.n	800722c <parse_report_descriptor+0x608>
           	  usage_count += value;
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	b29a      	uxth	r2, r3
 8007222:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007224:	4413      	add	r3, r2
 8007226:	85bb      	strh	r3, [r7, #44]	; 0x2c
           	  break;
 8007228:	e000      	b.n	800722c <parse_report_descriptor+0x608>
           	  break;
 800722a:	bf00      	nop
           	}
           	break;
 800722c:	e000      	b.n	8007230 <parse_report_descriptor+0x60c>

                 default:
           	// reserved

           	break;
 800722e:	bf00      	nop
  while(rep_size) {
 8007230:	897b      	ldrh	r3, [r7, #10]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f47f ad27 	bne.w	8006c86 <parse_report_descriptor+0x62>
                 }
               }
             }

             // if we get here then no usable setup was found
             return 0;
 8007238:	2300      	movs	r3, #0
           }
 800723a:	4618      	mov	r0, r3
 800723c:	3738      	adds	r7, #56	; 0x38
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop

08007244 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007258:	2302      	movs	r3, #2
 800725a:	e029      	b.n	80072b0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	79fa      	ldrb	r2, [r7, #7]
 8007260:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f81f 	bl	80072b8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f001 fbd9 	bl	8008a60 <USBH_LL_Init>

  return USBH_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e009      	b.n	80072de <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	33e0      	adds	r3, #224	; 0xe0
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	2200      	movs	r2, #0
 80072d6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b0e      	cmp	r3, #14
 80072e2:	d9f2      	bls.n	80072ca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	e009      	b.n	80072fe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3301      	adds	r3, #1
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007304:	d3f1      	bcc.n	80072ea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2240      	movs	r2, #64	; 0x40
 800732a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d016      	beq.n	80073a2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10e      	bne.n	800739c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007384:	1c59      	adds	r1, r3, #1
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	33de      	adds	r3, #222	; 0xde
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
 800739a:	e004      	b.n	80073a6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800739c:	2302      	movs	r3, #2
 800739e:	73fb      	strb	r3, [r7, #15]
 80073a0:	e001      	b.n	80073a6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073a2:	2302      	movs	r3, #2
 80073a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80073ca:	78fa      	ldrb	r2, [r7, #3]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d204      	bcs.n	80073da <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	78fa      	ldrb	r2, [r7, #3]
 80073d4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80073d8:	e001      	b.n	80073de <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80073da:	2302      	movs	r3, #2
 80073dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 fb6f 	bl	8008ad8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80073fa:	2101      	movs	r1, #1
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 fc88 	bl	8008d12 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af04      	add	r7, sp, #16
 8007412:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007414:	2302      	movs	r3, #2
 8007416:	737b      	strb	r3, [r7, #13]
  uint8_t idx = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b01      	cmp	r3, #1
 8007426:	d102      	bne.n	800742e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2203      	movs	r2, #3
 800742c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b0b      	cmp	r3, #11
 8007436:	f200 81b8 	bhi.w	80077aa <USBH_Process+0x39e>
 800743a:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <USBH_Process+0x34>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007471 	.word	0x08007471
 8007444:	080074a3 	.word	0x080074a3
 8007448:	0800750b 	.word	0x0800750b
 800744c:	08007745 	.word	0x08007745
 8007450:	080077ab 	.word	0x080077ab
 8007454:	080075af 	.word	0x080075af
 8007458:	080076eb 	.word	0x080076eb
 800745c:	080075e5 	.word	0x080075e5
 8007460:	08007605 	.word	0x08007605
 8007464:	08007625 	.word	0x08007625
 8007468:	08007653 	.word	0x08007653
 800746c:	0800772d 	.word	0x0800772d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 8198 	beq.w	80077ae <USBH_Process+0x3a2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007484:	20c8      	movs	r0, #200	; 0xc8
 8007486:	f001 fc82 	bl	8008d8e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fb81 	bl	8008b92 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074a0:	e185      	b.n	80077ae <USBH_Process+0x3a2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d107      	bne.n	80074bc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074ba:	e187      	b.n	80077cc <USBH_Process+0x3c0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074c6:	d914      	bls.n	80074f2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074ce:	3301      	adds	r3, #1
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d903      	bls.n	80074ea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	220d      	movs	r2, #13
 80074e6:	701a      	strb	r2, [r3, #0]
      break;
 80074e8:	e170      	b.n	80077cc <USBH_Process+0x3c0>
            phost->gState = HOST_IDLE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
      break;
 80074f0:	e16c      	b.n	80077cc <USBH_Process+0x3c0>
          phost->Timeout += 10U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074f8:	f103 020a 	add.w	r2, r3, #10
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007502:	200a      	movs	r0, #10
 8007504:	f001 fc43 	bl	8008d8e <USBH_Delay>
      break;
 8007508:	e160      	b.n	80077cc <USBH_Process+0x3c0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800751a:	2104      	movs	r1, #4
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007520:	2064      	movs	r0, #100	; 0x64
 8007522:	f001 fc34 	bl	8008d8e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fb0c 	bl	8008b44 <USBH_LL_GetSpeed>
 800752c:	4603      	mov	r3, r0
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2205      	movs	r2, #5
 800753a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800753c:	2100      	movs	r1, #0
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 f91b 	bl	800877a <USBH_AllocPipe>
 8007544:	4603      	mov	r3, r0
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800754c:	2180      	movs	r1, #128	; 0x80
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 f913 	bl	800877a <USBH_AllocPipe>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	7919      	ldrb	r1, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007570:	b292      	uxth	r2, r2
 8007572:	9202      	str	r2, [sp, #8]
 8007574:	2200      	movs	r2, #0
 8007576:	9201      	str	r2, [sp, #4]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	4603      	mov	r3, r0
 800757c:	2280      	movs	r2, #128	; 0x80
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 f8cc 	bl	800871c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	7959      	ldrb	r1, [r3, #5]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007598:	b292      	uxth	r2, r2
 800759a:	9202      	str	r2, [sp, #8]
 800759c:	2200      	movs	r2, #0
 800759e:	9201      	str	r2, [sp, #4]
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	4603      	mov	r3, r0
 80075a4:	2200      	movs	r2, #0
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 f8b8 	bl	800871c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075ac:	e10e      	b.n	80077cc <USBH_Process+0x3c0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f912 	bl	80077d8 <USBH_HandleEnum>
 80075b4:	4603      	mov	r3, r0
 80075b6:	737b      	strb	r3, [r7, #13]
      if (status == USBH_OK)
 80075b8:	7b7b      	ldrb	r3, [r7, #13]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f040 80f8 	bne.w	80077b2 <USBH_Process+0x3a6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d103      	bne.n	80075dc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2208      	movs	r2, #8
 80075d8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80075da:	e0ea      	b.n	80077b2 <USBH_Process+0x3a6>
          phost->gState = HOST_INPUT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2207      	movs	r2, #7
 80075e0:	701a      	strb	r2, [r3, #0]
      break;
 80075e2:	e0e6      	b.n	80077b2 <USBH_Process+0x3a6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 80e3 	beq.w	80077b6 <USBH_Process+0x3aa>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075f6:	2101      	movs	r1, #1
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2208      	movs	r2, #8
 8007600:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007602:	e0d8      	b.n	80077b6 <USBH_Process+0x3aa>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800760a:	b29b      	uxth	r3, r3
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fc30 	bl	8007e74 <USBH_SetCfg>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	f040 80cf 	bne.w	80077ba <USBH_Process+0x3ae>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2209      	movs	r2, #9
 8007620:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007622:	e0ca      	b.n	80077ba <USBH_Process+0x3ae>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007632:	2101      	movs	r1, #1
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fc40 	bl	8007eba <USBH_SetFeature>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 80be 	bne.w	80077be <USBH_Process+0x3b2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	220a      	movs	r2, #10
 8007646:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007648:	e0b9      	b.n	80077be <USBH_Process+0x3b2>
        phost->gState = HOST_CHECK_CLASS;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	220a      	movs	r2, #10
 800764e:	701a      	strb	r2, [r3, #0]
      break;
 8007650:	e0b5      	b.n	80077be <USBH_Process+0x3b2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80b2 	beq.w	80077c2 <USBH_Process+0x3b6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007666:	2300      	movs	r3, #0
 8007668:	73fb      	strb	r3, [r7, #15]
 800766a:	e016      	b.n	800769a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800766c:	7bfa      	ldrb	r2, [r7, #15]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	32de      	adds	r2, #222	; 0xde
 8007672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007676:	791a      	ldrb	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800767e:	429a      	cmp	r2, r3
 8007680:	d108      	bne.n	8007694 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007682:	7bfa      	ldrb	r2, [r7, #15]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	32de      	adds	r2, #222	; 0xde
 8007688:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007692:	e005      	b.n	80076a0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	3301      	adds	r3, #1
 8007698:	73fb      	strb	r3, [r7, #15]
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0e5      	beq.n	800766c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d01b      	beq.n	80076e2 <USBH_Process+0x2d6>
        {
         USBH_StatusTypeDef init_status = phost->pActiveClass->Init(phost);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	73bb      	strb	r3, [r7, #14]
          if (init_status == USBH_OK)
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d109      	bne.n	80076d4 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2206      	movs	r2, #6
 80076c4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076cc:	2103      	movs	r1, #3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076d2:	e076      	b.n	80077c2 <USBH_Process+0x3b6>
          else if (init_status!= USBH_BUSY)
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d073      	beq.n	80077c2 <USBH_Process+0x3b6>
            phost->gState = HOST_ABORT_STATE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	220d      	movs	r2, #13
 80076de:	701a      	strb	r2, [r3, #0]
      break;
 80076e0:	e06f      	b.n	80077c2 <USBH_Process+0x3b6>
          phost->gState = HOST_ABORT_STATE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	220d      	movs	r2, #13
 80076e6:	701a      	strb	r2, [r3, #0]
      break;
 80076e8:	e06b      	b.n	80077c2 <USBH_Process+0x3b6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d017      	beq.n	8007724 <USBH_Process+0x318>
      {
        status = phost->pActiveClass->Requests(phost);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
 8007700:	4603      	mov	r3, r0
 8007702:	737b      	strb	r3, [r7, #13]

        if (status == USBH_OK)
 8007704:	7b7b      	ldrb	r3, [r7, #13]
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d103      	bne.n	8007714 <USBH_Process+0x308>
        {
          phost->gState = HOST_CLASS;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	220b      	movs	r2, #11
 8007710:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007712:	e058      	b.n	80077c6 <USBH_Process+0x3ba>
        else if (status == USBH_FAIL)
 8007714:	7b7b      	ldrb	r3, [r7, #13]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d154      	bne.n	80077c6 <USBH_Process+0x3ba>
          phost->gState = HOST_ABORT_STATE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	220d      	movs	r2, #13
 8007720:	701a      	strb	r2, [r3, #0]
      break;
 8007722:	e050      	b.n	80077c6 <USBH_Process+0x3ba>
        phost->gState = HOST_ABORT_STATE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	220d      	movs	r2, #13
 8007728:	701a      	strb	r2, [r3, #0]
      break;
 800772a:	e04c      	b.n	80077c6 <USBH_Process+0x3ba>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d049      	beq.n	80077ca <USBH_Process+0x3be>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
      }
      break;
 8007742:	e042      	b.n	80077ca <USBH_Process+0x3be>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff fdb3 	bl	80072b8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <USBH_Process+0x364>
      {
        phost->pActiveClass->DeInit(phost);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <USBH_Process+0x37a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007780:	2105      	movs	r1, #5
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b01      	cmp	r3, #1
 8007790:	d107      	bne.n	80077a2 <USBH_Process+0x396>
      {
        phost->device.is_ReEnumerated = 0U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff fe26 	bl	80073ec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077a0:	e014      	b.n	80077cc <USBH_Process+0x3c0>
        USBH_LL_Start(phost);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 f998 	bl	8008ad8 <USBH_LL_Start>
      break;
 80077a8:	e010      	b.n	80077cc <USBH_Process+0x3c0>

    case HOST_ABORT_STATE:
    default :
      break;
 80077aa:	bf00      	nop
 80077ac:	e00e      	b.n	80077cc <USBH_Process+0x3c0>
      break;
 80077ae:	bf00      	nop
 80077b0:	e00c      	b.n	80077cc <USBH_Process+0x3c0>
      break;
 80077b2:	bf00      	nop
 80077b4:	e00a      	b.n	80077cc <USBH_Process+0x3c0>
    break;
 80077b6:	bf00      	nop
 80077b8:	e008      	b.n	80077cc <USBH_Process+0x3c0>
      break;
 80077ba:	bf00      	nop
 80077bc:	e006      	b.n	80077cc <USBH_Process+0x3c0>
      break;
 80077be:	bf00      	nop
 80077c0:	e004      	b.n	80077cc <USBH_Process+0x3c0>
      break;
 80077c2:	bf00      	nop
 80077c4:	e002      	b.n	80077cc <USBH_Process+0x3c0>
      break;
 80077c6:	bf00      	nop
 80077c8:	e000      	b.n	80077cc <USBH_Process+0x3c0>
      break;
 80077ca:	bf00      	nop
  }
  return USBH_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop

080077d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af04      	add	r7, sp, #16
 80077de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80077e0:	2301      	movs	r3, #1
 80077e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80077e4:	2301      	movs	r3, #1
 80077e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	2b07      	cmp	r3, #7
 80077ee:	f200 81c1 	bhi.w	8007b74 <USBH_HandleEnum+0x39c>
 80077f2:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <USBH_HandleEnum+0x20>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	08007819 	.word	0x08007819
 80077fc:	080078d7 	.word	0x080078d7
 8007800:	08007941 	.word	0x08007941
 8007804:	080079cf 	.word	0x080079cf
 8007808:	08007a39 	.word	0x08007a39
 800780c:	08007aa9 	.word	0x08007aa9
 8007810:	08007aef 	.word	0x08007aef
 8007814:	08007b35 	.word	0x08007b35
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007818:	2108      	movs	r1, #8
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fa50 	bl	8007cc0 <USBH_Get_DevDesc>
 8007820:	4603      	mov	r3, r0
 8007822:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d130      	bne.n	800788c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	7919      	ldrb	r1, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800784e:	b292      	uxth	r2, r2
 8007850:	9202      	str	r2, [sp, #8]
 8007852:	2200      	movs	r2, #0
 8007854:	9201      	str	r2, [sp, #4]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	4603      	mov	r3, r0
 800785a:	2280      	movs	r2, #128	; 0x80
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 ff5d 	bl	800871c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7959      	ldrb	r1, [r3, #5]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007876:	b292      	uxth	r2, r2
 8007878:	9202      	str	r2, [sp, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	9201      	str	r2, [sp, #4]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	4603      	mov	r3, r0
 8007882:	2200      	movs	r2, #0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 ff49 	bl	800871c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800788a:	e175      	b.n	8007b78 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	2b03      	cmp	r3, #3
 8007890:	f040 8172 	bne.w	8007b78 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800789a:	3301      	adds	r3, #1
 800789c:	b2da      	uxtb	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d903      	bls.n	80078b6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	220d      	movs	r2, #13
 80078b2:	701a      	strb	r2, [r3, #0]
      break;
 80078b4:	e160      	b.n	8007b78 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	795b      	ldrb	r3, [r3, #5]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 ff7d 	bl	80087bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	791b      	ldrb	r3, [r3, #4]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 ff77 	bl	80087bc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	701a      	strb	r2, [r3, #0]
      break;
 80078d4:	e150      	b.n	8007b78 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80078d6:	2112      	movs	r1, #18
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9f1 	bl	8007cc0 <USBH_Get_DevDesc>
 80078de:	4603      	mov	r3, r0
 80078e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d103      	bne.n	80078f0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078ee:	e145      	b.n	8007b7c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	f040 8142 	bne.w	8007b7c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078fe:	3301      	adds	r3, #1
 8007900:	b2da      	uxtb	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800790e:	2b03      	cmp	r3, #3
 8007910:	d903      	bls.n	800791a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	220d      	movs	r2, #13
 8007916:	701a      	strb	r2, [r3, #0]
      break;
 8007918:	e130      	b.n	8007b7c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	795b      	ldrb	r3, [r3, #5]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 ff4b 	bl	80087bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	791b      	ldrb	r3, [r3, #4]
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 ff45 	bl	80087bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
      break;
 800793e:	e11d      	b.n	8007b7c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007940:	2101      	movs	r1, #1
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fa72 	bl	8007e2c <USBH_SetAddress>
 8007948:	4603      	mov	r3, r0
 800794a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d132      	bne.n	80079b8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007952:	2002      	movs	r0, #2
 8007954:	f001 fa1b 	bl	8008d8e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2203      	movs	r2, #3
 8007964:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7919      	ldrb	r1, [r3, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800797a:	b292      	uxth	r2, r2
 800797c:	9202      	str	r2, [sp, #8]
 800797e:	2200      	movs	r2, #0
 8007980:	9201      	str	r2, [sp, #4]
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	4603      	mov	r3, r0
 8007986:	2280      	movs	r2, #128	; 0x80
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fec7 	bl	800871c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7959      	ldrb	r1, [r3, #5]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079a2:	b292      	uxth	r2, r2
 80079a4:	9202      	str	r2, [sp, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	9201      	str	r2, [sp, #4]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4603      	mov	r3, r0
 80079ae:	2200      	movs	r2, #0
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 feb3 	bl	800871c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079b6:	e0e3      	b.n	8007b80 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	f040 80e0 	bne.w	8007b80 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	220d      	movs	r2, #13
 80079c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	705a      	strb	r2, [r3, #1]
      break;
 80079cc:	e0d8      	b.n	8007b80 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80079ce:	2109      	movs	r1, #9
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f99e 	bl	8007d12 <USBH_Get_CfgDesc>
 80079d6:	4603      	mov	r3, r0
 80079d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d103      	bne.n	80079e8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2204      	movs	r2, #4
 80079e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079e6:	e0cd      	b.n	8007b84 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	f040 80ca 	bne.w	8007b84 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079f6:	3301      	adds	r3, #1
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d903      	bls.n	8007a12 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	220d      	movs	r2, #13
 8007a0e:	701a      	strb	r2, [r3, #0]
      break;
 8007a10:	e0b8      	b.n	8007b84 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	795b      	ldrb	r3, [r3, #5]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fecf 	bl	80087bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	791b      	ldrb	r3, [r3, #4]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fec9 	bl	80087bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	701a      	strb	r2, [r3, #0]
      break;
 8007a36:	e0a5      	b.n	8007b84 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f966 	bl	8007d12 <USBH_Get_CfgDesc>
 8007a46:	4603      	mov	r3, r0
 8007a48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d103      	bne.n	8007a58 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2205      	movs	r2, #5
 8007a54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a56:	e097      	b.n	8007b88 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	f040 8094 	bne.w	8007b88 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a66:	3301      	adds	r3, #1
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d903      	bls.n	8007a82 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	220d      	movs	r2, #13
 8007a7e:	701a      	strb	r2, [r3, #0]
      break;
 8007a80:	e082      	b.n	8007b88 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	795b      	ldrb	r3, [r3, #5]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fe97 	bl	80087bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	791b      	ldrb	r3, [r3, #4]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fe91 	bl	80087bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
      break;
 8007aa6:	e06f      	b.n	8007b88 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d019      	beq.n	8007ae6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007abe:	23ff      	movs	r3, #255	; 0xff
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f94c 	bl	8007d5e <USBH_Get_StringDesc>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d103      	bne.n	8007ad8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2206      	movs	r2, #6
 8007ad4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007ad6:	e059      	b.n	8007b8c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d156      	bne.n	8007b8c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2206      	movs	r2, #6
 8007ae2:	705a      	strb	r2, [r3, #1]
      break;
 8007ae4:	e052      	b.n	8007b8c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2206      	movs	r2, #6
 8007aea:	705a      	strb	r2, [r3, #1]
      break;
 8007aec:	e04e      	b.n	8007b8c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d019      	beq.n	8007b2c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b04:	23ff      	movs	r3, #255	; 0xff
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f929 	bl	8007d5e <USBH_Get_StringDesc>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d103      	bne.n	8007b1e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2207      	movs	r2, #7
 8007b1a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b1c:	e038      	b.n	8007b90 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d135      	bne.n	8007b90 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2207      	movs	r2, #7
 8007b28:	705a      	strb	r2, [r3, #1]
      break;
 8007b2a:	e031      	b.n	8007b90 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2207      	movs	r2, #7
 8007b30:	705a      	strb	r2, [r3, #1]
      break;
 8007b32:	e02d      	b.n	8007b90 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d017      	beq.n	8007b6e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b4a:	23ff      	movs	r3, #255	; 0xff
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f906 	bl	8007d5e <USBH_Get_StringDesc>
 8007b52:	4603      	mov	r3, r0
 8007b54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d102      	bne.n	8007b62 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b60:	e018      	b.n	8007b94 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d115      	bne.n	8007b94 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b6c:	e012      	b.n	8007b94 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
      break;
 8007b72:	e00f      	b.n	8007b94 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007b74:	bf00      	nop
 8007b76:	e00e      	b.n	8007b96 <USBH_HandleEnum+0x3be>
      break;
 8007b78:	bf00      	nop
 8007b7a:	e00c      	b.n	8007b96 <USBH_HandleEnum+0x3be>
      break;
 8007b7c:	bf00      	nop
 8007b7e:	e00a      	b.n	8007b96 <USBH_HandleEnum+0x3be>
      break;
 8007b80:	bf00      	nop
 8007b82:	e008      	b.n	8007b96 <USBH_HandleEnum+0x3be>
      break;
 8007b84:	bf00      	nop
 8007b86:	e006      	b.n	8007b96 <USBH_HandleEnum+0x3be>
      break;
 8007b88:	bf00      	nop
 8007b8a:	e004      	b.n	8007b96 <USBH_HandleEnum+0x3be>
      break;
 8007b8c:	bf00      	nop
 8007b8e:	e002      	b.n	8007b96 <USBH_HandleEnum+0x3be>
      break;
 8007b90:	bf00      	nop
 8007b92:	e000      	b.n	8007b96 <USBH_HandleEnum+0x3be>
      break;
 8007b94:	bf00      	nop
  }
  return Status;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f804 	bl	8007be2 <USBH_HandleSof>
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b0b      	cmp	r3, #11
 8007bf2:	d10a      	bne.n	8007c0a <USBH_HandleSof+0x28>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
  }
}
 8007c0a:	bf00      	nop
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007c22:	bf00      	nop
}
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b083      	sub	sp, #12
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c3e:	bf00      	nop
}
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 ff38 	bl	8008b0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	791b      	ldrb	r3, [r3, #4]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fd89 	bl	80087bc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	795b      	ldrb	r3, [r3, #5]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fd83 	bl	80087bc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, 0U,phost->device.Data,
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	b292      	uxth	r2, r2
 8007cd6:	9201      	str	r2, [sp, #4]
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f868 	bl	8007db8 <USBH_GetDescriptor>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <USBH_Get_DevDesc+0x48>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	b292      	uxth	r2, r2
 8007d02:	4619      	mov	r1, r3
 8007d04:	f000 f921 	bl	8007f4a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b086      	sub	sp, #24
 8007d16:	af02      	add	r7, sp, #8
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	331c      	adds	r3, #28
 8007d22:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007d24:	887b      	ldrh	r3, [r7, #2]
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d32:	2100      	movs	r1, #0
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f83f 	bl	8007db8 <USBH_GetDescriptor>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	72fb      	strb	r3, [r7, #11]
 8007d3e:	7afb      	ldrb	r3, [r7, #11]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d107      	bne.n	8007d54 <USBH_Get_CfgDesc+0x42>
                                   USB_DESC_CONFIGURATION,0U,pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d4a:	887a      	ldrh	r2, [r7, #2]
 8007d4c:	68f9      	ldr	r1, [r7, #12]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f96b 	bl	800802a <USBH_ParseCfgDesc>
  }

  return status;
 8007d54:	7afb      	ldrb	r3, [r7, #11]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b088      	sub	sp, #32
 8007d62:	af02      	add	r7, sp, #8
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	72fb      	strb	r3, [r7, #11]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d7a:	b299      	uxth	r1, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,0U,
                                   phost->device.Data, length)) == USBH_OK)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007d82:	893a      	ldrh	r2, [r7, #8]
 8007d84:	9201      	str	r2, [sp, #4]
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	460a      	mov	r2, r1
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 f812 	bl	8007db8 <USBH_GetDescriptor>
 8007d94:	4603      	mov	r3, r0
 8007d96:	75fb      	strb	r3, [r7, #23]
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d107      	bne.n	8007dae <USBH_Get_StringDesc+0x50>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007da4:	893a      	ldrh	r2, [r7, #8]
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fa3c 	bl	8008226 <USBH_ParseStringDesc>
  }

  return status;
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBH_GetDescriptor>:
                                      uint8_t  req_type,
                                      uint16_t value_idx,
									  uint8_t iface_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	70fb      	strb	r3, [r7, #3]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	803b      	strh	r3, [r7, #0]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	789b      	ldrb	r3, [r3, #2]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d11d      	bne.n	8007e16 <USBH_GetDescriptor+0x5e>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007dda:	78fb      	ldrb	r3, [r7, #3]
 8007ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2206      	movs	r2, #6
 8007dea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	883a      	ldrh	r2, [r7, #0]
 8007df0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007df2:	883b      	ldrh	r3, [r7, #0]
 8007df4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dfc:	d104      	bne.n	8007e08 <USBH_GetDescriptor+0x50>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f240 4209 	movw	r2, #1033	; 0x409
 8007e04:	829a      	strh	r2, [r3, #20]
 8007e06:	e003      	b.n	8007e10 <USBH_GetDescriptor+0x58>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = iface_idx;
 8007e08:	78bb      	ldrb	r3, [r7, #2]
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	8aba      	ldrh	r2, [r7, #20]
 8007e14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007e16:	8abb      	ldrh	r3, [r7, #20]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6939      	ldr	r1, [r7, #16]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fa50 	bl	80082c2 <USBH_CtlReq>
 8007e22:	4603      	mov	r3, r0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	789b      	ldrb	r3, [r3, #2]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d10f      	bne.n	8007e60 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2205      	movs	r2, #5
 8007e4a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007e60:	2200      	movs	r2, #0
 8007e62:	2100      	movs	r1, #0
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fa2c 	bl	80082c2 <USBH_CtlReq>
 8007e6a:	4603      	mov	r3, r0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	789b      	ldrb	r3, [r3, #2]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d10e      	bne.n	8007ea6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2209      	movs	r2, #9
 8007e92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	887a      	ldrh	r2, [r7, #2]
 8007e98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa09 	bl	80082c2 <USBH_CtlReq>
 8007eb0:	4603      	mov	r3, r0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	789b      	ldrb	r3, [r3, #2]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d10f      	bne.n	8007eee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007eda:	78fb      	ldrb	r3, [r7, #3]
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f9e5 	bl	80082c2 <USBH_CtlReq>
 8007ef8:	4603      	mov	r3, r0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	789b      	ldrb	r3, [r3, #2]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d10f      	bne.n	8007f36 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007f36:	2200      	movs	r2, #0
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f9c1 	bl	80082c2 <USBH_CtlReq>
 8007f40:	4603      	mov	r3, r0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b085      	sub	sp, #20
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	4613      	mov	r3, r2
 8007f56:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	781a      	ldrb	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	785a      	ldrb	r2, [r3, #1]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	3302      	adds	r3, #2
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	3303      	adds	r3, #3
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	791a      	ldrb	r2, [r3, #4]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	795a      	ldrb	r2, [r3, #5]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	799a      	ldrb	r2, [r3, #6]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	79da      	ldrb	r2, [r3, #7]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007fa4:	88fb      	ldrh	r3, [r7, #6]
 8007fa6:	2b08      	cmp	r3, #8
 8007fa8:	d939      	bls.n	800801e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	3308      	adds	r3, #8
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	3309      	adds	r3, #9
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	021b      	lsls	r3, r3, #8
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	330a      	adds	r3, #10
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	330b      	adds	r3, #11
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	330d      	adds	r3, #13
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	021b      	lsls	r3, r3, #8
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	7b9a      	ldrb	r2, [r3, #14]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	7bda      	ldrb	r2, [r3, #15]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	7c1a      	ldrb	r2, [r3, #16]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	7c5a      	ldrb	r2, [r3, #17]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	745a      	strb	r2, [r3, #17]
  }
}
 800801e:	bf00      	nop
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b08a      	sub	sp, #40	; 0x28
 800802e:	af00      	add	r7, sp, #0
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	4613      	mov	r3, r2
 8008036:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	781a      	ldrb	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	785a      	ldrb	r2, [r3, #1]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	3302      	adds	r3, #2
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b29a      	uxth	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	3303      	adds	r3, #3
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	b29b      	uxth	r3, r3
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	b29b      	uxth	r3, r3
 8008070:	4313      	orrs	r3, r2
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	791a      	ldrb	r2, [r3, #4]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	795a      	ldrb	r2, [r3, #5]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	799a      	ldrb	r2, [r3, #6]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	79da      	ldrb	r2, [r3, #7]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	7a1a      	ldrb	r2, [r3, #8]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80080a0:	88fb      	ldrh	r3, [r7, #6]
 80080a2:	2b09      	cmp	r3, #9
 80080a4:	d95f      	bls.n	8008166 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80080a6:	2309      	movs	r3, #9
 80080a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080ae:	e051      	b.n	8008154 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080b0:	f107 0316 	add.w	r3, r7, #22
 80080b4:	4619      	mov	r1, r3
 80080b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080b8:	f000 f8e8 	bl	800828c <USBH_GetNextDesc>
 80080bc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	785b      	ldrb	r3, [r3, #1]
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	d146      	bne.n	8008154 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80080c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080ca:	221a      	movs	r2, #26
 80080cc:	fb02 f303 	mul.w	r3, r2, r3
 80080d0:	3308      	adds	r3, #8
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	4413      	add	r3, r2
 80080d6:	3302      	adds	r3, #2
 80080d8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80080da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080dc:	69f8      	ldr	r0, [r7, #28]
 80080de:	f000 f846 	bl	800816e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080ec:	e022      	b.n	8008134 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080ee:	f107 0316 	add.w	r3, r7, #22
 80080f2:	4619      	mov	r1, r3
 80080f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080f6:	f000 f8c9 	bl	800828c <USBH_GetNextDesc>
 80080fa:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	785b      	ldrb	r3, [r3, #1]
 8008100:	2b05      	cmp	r3, #5
 8008102:	d117      	bne.n	8008134 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008108:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800810c:	3201      	adds	r2, #1
 800810e:	00d2      	lsls	r2, r2, #3
 8008110:	211a      	movs	r1, #26
 8008112:	fb01 f303 	mul.w	r3, r1, r3
 8008116:	4413      	add	r3, r2
 8008118:	3308      	adds	r3, #8
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4413      	add	r3, r2
 800811e:	3304      	adds	r3, #4
 8008120:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008124:	69b8      	ldr	r0, [r7, #24]
 8008126:	f000 f851 	bl	80081cc <USBH_ParseEPDesc>
            ep_ix++;
 800812a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800812e:	3301      	adds	r3, #1
 8008130:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	791b      	ldrb	r3, [r3, #4]
 8008138:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800813c:	429a      	cmp	r2, r3
 800813e:	d204      	bcs.n	800814a <USBH_ParseCfgDesc+0x120>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	885a      	ldrh	r2, [r3, #2]
 8008144:	8afb      	ldrh	r3, [r7, #22]
 8008146:	429a      	cmp	r2, r3
 8008148:	d8d1      	bhi.n	80080ee <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800814a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800814e:	3301      	adds	r3, #1
 8008150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008154:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008158:	2b01      	cmp	r3, #1
 800815a:	d804      	bhi.n	8008166 <USBH_ParseCfgDesc+0x13c>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	885a      	ldrh	r2, [r3, #2]
 8008160:	8afb      	ldrh	r3, [r7, #22]
 8008162:	429a      	cmp	r2, r3
 8008164:	d8a4      	bhi.n	80080b0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008166:	bf00      	nop
 8008168:	3728      	adds	r7, #40	; 0x28
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	785a      	ldrb	r2, [r3, #1]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	789a      	ldrb	r2, [r3, #2]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	78da      	ldrb	r2, [r3, #3]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	791a      	ldrb	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	795a      	ldrb	r2, [r3, #5]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	799a      	ldrb	r2, [r3, #6]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	79da      	ldrb	r2, [r3, #7]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	7a1a      	ldrb	r2, [r3, #8]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	721a      	strb	r2, [r3, #8]
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	785a      	ldrb	r2, [r3, #1]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	789a      	ldrb	r2, [r3, #2]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	78da      	ldrb	r2, [r3, #3]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	3304      	adds	r3, #4
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	3305      	adds	r3, #5
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	b29b      	uxth	r3, r3
 8008206:	021b      	lsls	r3, r3, #8
 8008208:	b29b      	uxth	r3, r3
 800820a:	4313      	orrs	r3, r2
 800820c:	b29a      	uxth	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	799a      	ldrb	r2, [r3, #6]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	719a      	strb	r2, [r3, #6]
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008226:	b480      	push	{r7}
 8008228:	b087      	sub	sp, #28
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	4613      	mov	r3, r2
 8008232:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3301      	adds	r3, #1
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b03      	cmp	r3, #3
 800823c:	d120      	bne.n	8008280 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	1e9a      	subs	r2, r3, #2
 8008244:	88fb      	ldrh	r3, [r7, #6]
 8008246:	4293      	cmp	r3, r2
 8008248:	bf28      	it	cs
 800824a:	4613      	movcs	r3, r2
 800824c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3302      	adds	r3, #2
 8008252:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008254:	2300      	movs	r3, #0
 8008256:	82fb      	strh	r3, [r7, #22]
 8008258:	e00b      	b.n	8008272 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800825a:	8afb      	ldrh	r3, [r7, #22]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	781a      	ldrb	r2, [r3, #0]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	3301      	adds	r3, #1
 800826a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800826c:	8afb      	ldrh	r3, [r7, #22]
 800826e:	3302      	adds	r3, #2
 8008270:	82fb      	strh	r3, [r7, #22]
 8008272:	8afa      	ldrh	r2, [r7, #22]
 8008274:	8abb      	ldrh	r3, [r7, #20]
 8008276:	429a      	cmp	r2, r3
 8008278:	d3ef      	bcc.n	800825a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2200      	movs	r2, #0
 800827e:	701a      	strb	r2, [r3, #0]
  }
}
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	881a      	ldrh	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	4413      	add	r3, r2
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4413      	add	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082b4:	68fb      	ldr	r3, [r7, #12]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b086      	sub	sp, #24
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	60f8      	str	r0, [r7, #12]
 80082ca:	60b9      	str	r1, [r7, #8]
 80082cc:	4613      	mov	r3, r2
 80082ce:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80082d0:	2301      	movs	r3, #1
 80082d2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	789b      	ldrb	r3, [r3, #2]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d002      	beq.n	80082e2 <USBH_CtlReq+0x20>
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d00f      	beq.n	8008300 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80082e0:	e027      	b.n	8008332 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	88fa      	ldrh	r2, [r7, #6]
 80082ec:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2201      	movs	r2, #1
 80082f2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2202      	movs	r2, #2
 80082f8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80082fa:	2301      	movs	r3, #1
 80082fc:	75fb      	strb	r3, [r7, #23]
      break;
 80082fe:	e018      	b.n	8008332 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 f81b 	bl	800833c <USBH_HandleControl>
 8008306:	4603      	mov	r3, r0
 8008308:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <USBH_CtlReq+0x54>
 8008310:	7dfb      	ldrb	r3, [r7, #23]
 8008312:	2b03      	cmp	r3, #3
 8008314:	d106      	bne.n	8008324 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	761a      	strb	r2, [r3, #24]
      break;
 8008322:	e005      	b.n	8008330 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008324:	7dfb      	ldrb	r3, [r7, #23]
 8008326:	2b02      	cmp	r3, #2
 8008328:	d102      	bne.n	8008330 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	709a      	strb	r2, [r3, #2]
      break;
 8008330:	bf00      	nop
  }
  return status;
 8008332:	7dfb      	ldrb	r3, [r7, #23]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af02      	add	r7, sp, #8
 8008342:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008348:	2300      	movs	r3, #0
 800834a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7e1b      	ldrb	r3, [r3, #24]
 8008350:	3b01      	subs	r3, #1
 8008352:	2b0a      	cmp	r3, #10
 8008354:	f200 8156 	bhi.w	8008604 <USBH_HandleControl+0x2c8>
 8008358:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <USBH_HandleControl+0x24>)
 800835a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835e:	bf00      	nop
 8008360:	0800838d 	.word	0x0800838d
 8008364:	080083a7 	.word	0x080083a7
 8008368:	08008411 	.word	0x08008411
 800836c:	08008437 	.word	0x08008437
 8008370:	0800846f 	.word	0x0800846f
 8008374:	08008499 	.word	0x08008499
 8008378:	080084eb 	.word	0x080084eb
 800837c:	0800850d 	.word	0x0800850d
 8008380:	08008549 	.word	0x08008549
 8008384:	0800856f 	.word	0x0800856f
 8008388:	080085ad 	.word	0x080085ad
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f103 0110 	add.w	r1, r3, #16
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	795b      	ldrb	r3, [r3, #5]
 8008396:	461a      	mov	r2, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f943 	bl	8008624 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2202      	movs	r2, #2
 80083a2:	761a      	strb	r2, [r3, #24]
      break;
 80083a4:	e139      	b.n	800861a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	795b      	ldrb	r3, [r3, #5]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc9d 	bl	8008cec <USBH_LL_GetURBState>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d11e      	bne.n	80083fa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7c1b      	ldrb	r3, [r3, #16]
 80083c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083c4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	8adb      	ldrh	r3, [r3, #22]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80083ce:	7b7b      	ldrb	r3, [r7, #13]
 80083d0:	2b80      	cmp	r3, #128	; 0x80
 80083d2:	d103      	bne.n	80083dc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2203      	movs	r2, #3
 80083d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083da:	e115      	b.n	8008608 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2205      	movs	r2, #5
 80083e0:	761a      	strb	r2, [r3, #24]
      break;
 80083e2:	e111      	b.n	8008608 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80083e4:	7b7b      	ldrb	r3, [r7, #13]
 80083e6:	2b80      	cmp	r3, #128	; 0x80
 80083e8:	d103      	bne.n	80083f2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2209      	movs	r2, #9
 80083ee:	761a      	strb	r2, [r3, #24]
      break;
 80083f0:	e10a      	b.n	8008608 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2207      	movs	r2, #7
 80083f6:	761a      	strb	r2, [r3, #24]
      break;
 80083f8:	e106      	b.n	8008608 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d003      	beq.n	8008408 <USBH_HandleControl+0xcc>
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b02      	cmp	r3, #2
 8008404:	f040 8100 	bne.w	8008608 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	220b      	movs	r2, #11
 800840c:	761a      	strb	r2, [r3, #24]
      break;
 800840e:	e0fb      	b.n	8008608 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008416:	b29a      	uxth	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6899      	ldr	r1, [r3, #8]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	899a      	ldrh	r2, [r3, #12]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	791b      	ldrb	r3, [r3, #4]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f93a 	bl	80086a2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2204      	movs	r2, #4
 8008432:	761a      	strb	r2, [r3, #24]
      break;
 8008434:	e0f1      	b.n	800861a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	791b      	ldrb	r3, [r3, #4]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fc55 	bl	8008cec <USBH_LL_GetURBState>
 8008442:	4603      	mov	r3, r0
 8008444:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d102      	bne.n	8008452 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2209      	movs	r2, #9
 8008450:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	2b05      	cmp	r3, #5
 8008456:	d102      	bne.n	800845e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008458:	2303      	movs	r3, #3
 800845a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800845c:	e0d6      	b.n	800860c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	2b04      	cmp	r3, #4
 8008462:	f040 80d3 	bne.w	800860c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	220b      	movs	r2, #11
 800846a:	761a      	strb	r2, [r3, #24]
      break;
 800846c:	e0ce      	b.n	800860c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6899      	ldr	r1, [r3, #8]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	899a      	ldrh	r2, [r3, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	795b      	ldrb	r3, [r3, #5]
 800847a:	2001      	movs	r0, #1
 800847c:	9000      	str	r0, [sp, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f8ea 	bl	8008658 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800848a:	b29a      	uxth	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2206      	movs	r2, #6
 8008494:	761a      	strb	r2, [r3, #24]
      break;
 8008496:	e0c0      	b.n	800861a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	795b      	ldrb	r3, [r3, #5]
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fc24 	bl	8008cec <USBH_LL_GetURBState>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d103      	bne.n	80084b6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2207      	movs	r2, #7
 80084b2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084b4:	e0ac      	b.n	8008610 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b05      	cmp	r3, #5
 80084ba:	d105      	bne.n	80084c8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	220c      	movs	r2, #12
 80084c0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80084c2:	2303      	movs	r3, #3
 80084c4:	73fb      	strb	r3, [r7, #15]
      break;
 80084c6:	e0a3      	b.n	8008610 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d103      	bne.n	80084d6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2205      	movs	r2, #5
 80084d2:	761a      	strb	r2, [r3, #24]
      break;
 80084d4:	e09c      	b.n	8008610 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b04      	cmp	r3, #4
 80084da:	f040 8099 	bne.w	8008610 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	220b      	movs	r2, #11
 80084e2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80084e4:	2302      	movs	r3, #2
 80084e6:	73fb      	strb	r3, [r7, #15]
      break;
 80084e8:	e092      	b.n	8008610 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	791b      	ldrb	r3, [r3, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	2100      	movs	r1, #0
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f8d5 	bl	80086a2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084fe:	b29a      	uxth	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2208      	movs	r2, #8
 8008508:	761a      	strb	r2, [r3, #24]

      break;
 800850a:	e086      	b.n	800861a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	791b      	ldrb	r3, [r3, #4]
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fbea 	bl	8008cec <USBH_LL_GetURBState>
 8008518:	4603      	mov	r3, r0
 800851a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d105      	bne.n	800852e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	220d      	movs	r2, #13
 8008526:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800852c:	e072      	b.n	8008614 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b04      	cmp	r3, #4
 8008532:	d103      	bne.n	800853c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	220b      	movs	r2, #11
 8008538:	761a      	strb	r2, [r3, #24]
      break;
 800853a:	e06b      	b.n	8008614 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	2b05      	cmp	r3, #5
 8008540:	d168      	bne.n	8008614 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008542:	2303      	movs	r3, #3
 8008544:	73fb      	strb	r3, [r7, #15]
      break;
 8008546:	e065      	b.n	8008614 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	795b      	ldrb	r3, [r3, #5]
 800854c:	2201      	movs	r2, #1
 800854e:	9200      	str	r2, [sp, #0]
 8008550:	2200      	movs	r2, #0
 8008552:	2100      	movs	r1, #0
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f87f 	bl	8008658 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008560:	b29a      	uxth	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	220a      	movs	r2, #10
 800856a:	761a      	strb	r2, [r3, #24]
      break;
 800856c:	e055      	b.n	800861a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	795b      	ldrb	r3, [r3, #5]
 8008572:	4619      	mov	r1, r3
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fbb9 	bl	8008cec <USBH_LL_GetURBState>
 800857a:	4603      	mov	r3, r0
 800857c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800857e:	7bbb      	ldrb	r3, [r7, #14]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d105      	bne.n	8008590 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	220d      	movs	r2, #13
 800858c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800858e:	e043      	b.n	8008618 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d103      	bne.n	800859e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2209      	movs	r2, #9
 800859a:	761a      	strb	r2, [r3, #24]
      break;
 800859c:	e03c      	b.n	8008618 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d139      	bne.n	8008618 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	220b      	movs	r2, #11
 80085a8:	761a      	strb	r2, [r3, #24]
      break;
 80085aa:	e035      	b.n	8008618 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	7e5b      	ldrb	r3, [r3, #25]
 80085b0:	3301      	adds	r3, #1
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	765a      	strb	r2, [r3, #25]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	7e5b      	ldrb	r3, [r3, #25]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d806      	bhi.n	80085ce <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80085cc:	e025      	b.n	800861a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085d4:	2106      	movs	r1, #6
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	795b      	ldrb	r3, [r3, #5]
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f8e8 	bl	80087bc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	791b      	ldrb	r3, [r3, #4]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f8e2 	bl	80087bc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80085fe:	2302      	movs	r3, #2
 8008600:	73fb      	strb	r3, [r7, #15]
      break;
 8008602:	e00a      	b.n	800861a <USBH_HandleControl+0x2de>

    default:
      break;
 8008604:	bf00      	nop
 8008606:	e008      	b.n	800861a <USBH_HandleControl+0x2de>
      break;
 8008608:	bf00      	nop
 800860a:	e006      	b.n	800861a <USBH_HandleControl+0x2de>
      break;
 800860c:	bf00      	nop
 800860e:	e004      	b.n	800861a <USBH_HandleControl+0x2de>
      break;
 8008610:	bf00      	nop
 8008612:	e002      	b.n	800861a <USBH_HandleControl+0x2de>
      break;
 8008614:	bf00      	nop
 8008616:	e000      	b.n	800861a <USBH_HandleControl+0x2de>
      break;
 8008618:	bf00      	nop
  }

  return status;
 800861a:	7bfb      	ldrb	r3, [r7, #15]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b088      	sub	sp, #32
 8008628:	af04      	add	r7, sp, #16
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	4613      	mov	r3, r2
 8008630:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008632:	79f9      	ldrb	r1, [r7, #7]
 8008634:	2300      	movs	r3, #0
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	2308      	movs	r3, #8
 800863a:	9302      	str	r3, [sp, #8]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	2300      	movs	r3, #0
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	2300      	movs	r3, #0
 8008646:	2200      	movs	r2, #0
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 fb1e 	bl	8008c8a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af04      	add	r7, sp, #16
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	4611      	mov	r1, r2
 8008664:	461a      	mov	r2, r3
 8008666:	460b      	mov	r3, r1
 8008668:	80fb      	strh	r3, [r7, #6]
 800866a:	4613      	mov	r3, r2
 800866c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800867c:	7979      	ldrb	r1, [r7, #5]
 800867e:	7e3b      	ldrb	r3, [r7, #24]
 8008680:	9303      	str	r3, [sp, #12]
 8008682:	88fb      	ldrh	r3, [r7, #6]
 8008684:	9302      	str	r3, [sp, #8]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	9301      	str	r3, [sp, #4]
 800868a:	2301      	movs	r3, #1
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	2300      	movs	r3, #0
 8008690:	2200      	movs	r2, #0
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 faf9 	bl	8008c8a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b088      	sub	sp, #32
 80086a6:	af04      	add	r7, sp, #16
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	4611      	mov	r1, r2
 80086ae:	461a      	mov	r2, r3
 80086b0:	460b      	mov	r3, r1
 80086b2:	80fb      	strh	r3, [r7, #6]
 80086b4:	4613      	mov	r3, r2
 80086b6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086b8:	7979      	ldrb	r1, [r7, #5]
 80086ba:	2300      	movs	r3, #0
 80086bc:	9303      	str	r3, [sp, #12]
 80086be:	88fb      	ldrh	r3, [r7, #6]
 80086c0:	9302      	str	r3, [sp, #8]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	2301      	movs	r3, #1
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	2300      	movs	r3, #0
 80086cc:	2201      	movs	r2, #1
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 fadb 	bl	8008c8a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80086d4:	2300      	movs	r3, #0

}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b088      	sub	sp, #32
 80086e2:	af04      	add	r7, sp, #16
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	4611      	mov	r1, r2
 80086ea:	461a      	mov	r2, r3
 80086ec:	460b      	mov	r3, r1
 80086ee:	71fb      	strb	r3, [r7, #7]
 80086f0:	4613      	mov	r3, r2
 80086f2:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	79b9      	ldrb	r1, [r7, #6]
 80086fa:	2200      	movs	r2, #0
 80086fc:	9203      	str	r2, [sp, #12]
 80086fe:	9302      	str	r3, [sp, #8]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	2301      	movs	r3, #1
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	2303      	movs	r3, #3
 800870a:	2201      	movs	r2, #1
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 fabc 	bl	8008c8a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af04      	add	r7, sp, #16
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	4608      	mov	r0, r1
 8008726:	4611      	mov	r1, r2
 8008728:	461a      	mov	r2, r3
 800872a:	4603      	mov	r3, r0
 800872c:	70fb      	strb	r3, [r7, #3]
 800872e:	460b      	mov	r3, r1
 8008730:	70bb      	strb	r3, [r7, #2]
 8008732:	4613      	mov	r3, r2
 8008734:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008736:	7878      	ldrb	r0, [r7, #1]
 8008738:	78ba      	ldrb	r2, [r7, #2]
 800873a:	78f9      	ldrb	r1, [r7, #3]
 800873c:	8b3b      	ldrh	r3, [r7, #24]
 800873e:	9302      	str	r3, [sp, #8]
 8008740:	7d3b      	ldrb	r3, [r7, #20]
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	7c3b      	ldrb	r3, [r7, #16]
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	4603      	mov	r3, r0
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fa4f 	bl	8008bee <USBH_LL_OpenPipe>

  return USBH_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	460b      	mov	r3, r1
 8008764:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008766:	78fb      	ldrb	r3, [r7, #3]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa6e 	bl	8008c4c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f836 	bl	80087f8 <USBH_GetFreePipe>
 800878c:	4603      	mov	r3, r0
 800878e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008790:	89fb      	ldrh	r3, [r7, #14]
 8008792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008796:	4293      	cmp	r3, r2
 8008798:	d00a      	beq.n	80087b0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800879a:	78fa      	ldrb	r2, [r7, #3]
 800879c:	89fb      	ldrh	r3, [r7, #14]
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	33e0      	adds	r3, #224	; 0xe0
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	440b      	add	r3, r1
 80087ae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80087b0:	89fb      	ldrh	r3, [r7, #14]
 80087b2:	b2db      	uxtb	r3, r3
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80087c8:	78fb      	ldrb	r3, [r7, #3]
 80087ca:	2b0a      	cmp	r3, #10
 80087cc:	d80d      	bhi.n	80087ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	33e0      	adds	r3, #224	; 0xe0
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	78fb      	ldrb	r3, [r7, #3]
 80087dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087e0:	6879      	ldr	r1, [r7, #4]
 80087e2:	33e0      	adds	r3, #224	; 0xe0
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	440b      	add	r3, r1
 80087e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]
 8008808:	e00f      	b.n	800882a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	33e0      	adds	r3, #224	; 0xe0
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d102      	bne.n	8008824 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	b29b      	uxth	r3, r3
 8008822:	e007      	b.n	8008834 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	3301      	adds	r3, #1
 8008828:	73fb      	strb	r3, [r7, #15]
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	2b0a      	cmp	r3, #10
 800882e:	d9ec      	bls.n	800880a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008830:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008834:	4618      	mov	r0, r3
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008844:	2201      	movs	r2, #1
 8008846:	490e      	ldr	r1, [pc, #56]	; (8008880 <MX_USB_HOST_Init+0x40>)
 8008848:	480e      	ldr	r0, [pc, #56]	; (8008884 <MX_USB_HOST_Init+0x44>)
 800884a:	f7fe fcfb 	bl	8007244 <USBH_Init>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008854:	f7f7 fffc 	bl	8000850 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8008858:	490b      	ldr	r1, [pc, #44]	; (8008888 <MX_USB_HOST_Init+0x48>)
 800885a:	480a      	ldr	r0, [pc, #40]	; (8008884 <MX_USB_HOST_Init+0x44>)
 800885c:	f7fe fd80 	bl	8007360 <USBH_RegisterClass>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008866:	f7f7 fff3 	bl	8000850 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800886a:	4806      	ldr	r0, [pc, #24]	; (8008884 <MX_USB_HOST_Init+0x44>)
 800886c:	f7fe fdbe 	bl	80073ec <USBH_Start>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008876:	f7f7 ffeb 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800887a:	bf00      	nop
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	080088a1 	.word	0x080088a1
 8008884:	200001f8 	.word	0x200001f8
 8008888:	20000010 	.word	0x20000010

0800888c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008890:	4802      	ldr	r0, [pc, #8]	; (800889c <MX_USB_HOST_Process+0x10>)
 8008892:	f7fe fdbb 	bl	800740c <USBH_Process>
}
 8008896:	bf00      	nop
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	200001f8 	.word	0x200001f8

080088a0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d823      	bhi.n	80088fc <USBH_UserProcess+0x5c>
 80088b4:	a201      	add	r2, pc, #4	; (adr r2, 80088bc <USBH_UserProcess+0x1c>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	080088fd 	.word	0x080088fd
 80088c0:	080088e3 	.word	0x080088e3
 80088c4:	080088fd 	.word	0x080088fd
 80088c8:	080088f5 	.word	0x080088f5
 80088cc:	080088d1 	.word	0x080088d1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80088d0:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <USBH_UserProcess+0x68>)
 80088d2:	2203      	movs	r2, #3
 80088d4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80088d6:	2201      	movs	r2, #1
 80088d8:	2101      	movs	r1, #1
 80088da:	480c      	ldr	r0, [pc, #48]	; (800890c <USBH_UserProcess+0x6c>)
 80088dc:	f7f8 ff92 	bl	8001804 <HAL_GPIO_WritePin>
  break;
 80088e0:	e00d      	b.n	80088fe <USBH_UserProcess+0x5e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80088e2:	4b09      	ldr	r3, [pc, #36]	; (8008908 <USBH_UserProcess+0x68>)
 80088e4:	2202      	movs	r2, #2
 80088e6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80088e8:	2200      	movs	r2, #0
 80088ea:	2101      	movs	r1, #1
 80088ec:	4807      	ldr	r0, [pc, #28]	; (800890c <USBH_UserProcess+0x6c>)
 80088ee:	f7f8 ff89 	bl	8001804 <HAL_GPIO_WritePin>
  break;
 80088f2:	e004      	b.n	80088fe <USBH_UserProcess+0x5e>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80088f4:	4b04      	ldr	r3, [pc, #16]	; (8008908 <USBH_UserProcess+0x68>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	701a      	strb	r2, [r3, #0]
  break;
 80088fa:	e000      	b.n	80088fe <USBH_UserProcess+0x5e>

  default:
  break;
 80088fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	200000c8 	.word	0x200000c8
 800890c:	40020800 	.word	0x40020800

08008910 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b08a      	sub	sp, #40	; 0x28
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008918:	f107 0314 	add.w	r3, r7, #20
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	605a      	str	r2, [r3, #4]
 8008922:	609a      	str	r2, [r3, #8]
 8008924:	60da      	str	r2, [r3, #12]
 8008926:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008930:	d13a      	bne.n	80089a8 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	4b1e      	ldr	r3, [pc, #120]	; (80089b0 <HAL_HCD_MspInit+0xa0>)
 8008938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893a:	4a1d      	ldr	r2, [pc, #116]	; (80089b0 <HAL_HCD_MspInit+0xa0>)
 800893c:	f043 0301 	orr.w	r3, r3, #1
 8008940:	6313      	str	r3, [r2, #48]	; 0x30
 8008942:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <HAL_HCD_MspInit+0xa0>)
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800894e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008954:	2302      	movs	r3, #2
 8008956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008958:	2300      	movs	r3, #0
 800895a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800895c:	2303      	movs	r3, #3
 800895e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008960:	230a      	movs	r3, #10
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008964:	f107 0314 	add.w	r3, r7, #20
 8008968:	4619      	mov	r1, r3
 800896a:	4812      	ldr	r0, [pc, #72]	; (80089b4 <HAL_HCD_MspInit+0xa4>)
 800896c:	f7f8 fdc6 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008970:	4b0f      	ldr	r3, [pc, #60]	; (80089b0 <HAL_HCD_MspInit+0xa0>)
 8008972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008974:	4a0e      	ldr	r2, [pc, #56]	; (80089b0 <HAL_HCD_MspInit+0xa0>)
 8008976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800897a:	6353      	str	r3, [r2, #52]	; 0x34
 800897c:	2300      	movs	r3, #0
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <HAL_HCD_MspInit+0xa0>)
 8008982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008984:	4a0a      	ldr	r2, [pc, #40]	; (80089b0 <HAL_HCD_MspInit+0xa0>)
 8008986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800898a:	6453      	str	r3, [r2, #68]	; 0x44
 800898c:	4b08      	ldr	r3, [pc, #32]	; (80089b0 <HAL_HCD_MspInit+0xa0>)
 800898e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008994:	60fb      	str	r3, [r7, #12]
 8008996:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008998:	2200      	movs	r2, #0
 800899a:	2100      	movs	r1, #0
 800899c:	2043      	movs	r0, #67	; 0x43
 800899e:	f7f8 fd83 	bl	80014a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089a2:	2043      	movs	r0, #67	; 0x43
 80089a4:	f7f8 fd9c 	bl	80014e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089a8:	bf00      	nop
 80089aa:	3728      	adds	r7, #40	; 0x28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	40023800 	.word	0x40023800
 80089b4:	40020000 	.word	0x40020000

080089b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff f8f9 	bl	8007bbe <USBH_LL_IncTimer>
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff f931 	bl	8007c4a <USBH_LL_Connect>
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff f93a 	bl	8007c78 <USBH_LL_Disconnect>
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff f8eb 	bl	8007c12 <USBH_LL_PortEnabled>
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7ff f8eb 	bl	8007c2e <USBH_LL_PortDisabled>
}
 8008a58:	bf00      	nop
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d12a      	bne.n	8008ac8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a72:	4a18      	ldr	r2, [pc, #96]	; (8008ad4 <USBH_LL_Init+0x74>)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a15      	ldr	r2, [pc, #84]	; (8008ad4 <USBH_LL_Init+0x74>)
 8008a7e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a82:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <USBH_LL_Init+0x74>)
 8008a84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a88:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a8a:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <USBH_LL_Init+0x74>)
 8008a8c:	2208      	movs	r2, #8
 8008a8e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a90:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <USBH_LL_Init+0x74>)
 8008a92:	2201      	movs	r2, #1
 8008a94:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a96:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <USBH_LL_Init+0x74>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ad4 <USBH_LL_Init+0x74>)
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008aa2:	4b0c      	ldr	r3, [pc, #48]	; (8008ad4 <USBH_LL_Init+0x74>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008aa8:	480a      	ldr	r0, [pc, #40]	; (8008ad4 <USBH_LL_Init+0x74>)
 8008aaa:	f7f8 fec4 	bl	8001836 <HAL_HCD_Init>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008ab4:	f7f7 fecc 	bl	8000850 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ab8:	4806      	ldr	r0, [pc, #24]	; (8008ad4 <USBH_LL_Init+0x74>)
 8008aba:	f7f9 faa8 	bl	800200e <HAL_HCD_GetCurrentFrame>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7ff f86c 	bl	8007ba0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	200005d4 	.word	0x200005d4

08008ad8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7f9 fa17 	bl	8001f22 <HAL_HCD_Start>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 f952 	bl	8008da4 <USBH_Get_USB_Status>
 8008b00:	4603      	mov	r3, r0
 8008b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7f9 fa1f 	bl	8001f68 <HAL_HCD_Stop>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 f937 	bl	8008da4 <USBH_Get_USB_Status>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f9 fa67 	bl	800202a <HAL_HCD_GetCurrentSpeed>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d00c      	beq.n	8008b7c <USBH_LL_GetSpeed+0x38>
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d80d      	bhi.n	8008b82 <USBH_LL_GetSpeed+0x3e>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <USBH_LL_GetSpeed+0x2c>
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d003      	beq.n	8008b76 <USBH_LL_GetSpeed+0x32>
 8008b6e:	e008      	b.n	8008b82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
    break;
 8008b74:	e008      	b.n	8008b88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b76:	2301      	movs	r3, #1
 8008b78:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7a:	e005      	b.n	8008b88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b80:	e002      	b.n	8008b88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b82:	2301      	movs	r3, #1
 8008b84:	73fb      	strb	r3, [r7, #15]
    break;
 8008b86:	bf00      	nop
  }
  return  speed;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7f9 f9fa 	bl	8001fa2 <HAL_HCD_ResetPort>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 f8f5 	bl	8008da4 <USBH_Get_USB_Status>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	4611      	mov	r1, r2
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7f9 fa01 	bl	8001fe6 <HAL_HCD_HC_GetXferCount>
 8008be4:	4603      	mov	r3, r0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bee:	b590      	push	{r4, r7, lr}
 8008bf0:	b089      	sub	sp, #36	; 0x24
 8008bf2:	af04      	add	r7, sp, #16
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	4608      	mov	r0, r1
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	70fb      	strb	r3, [r7, #3]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70bb      	strb	r3, [r7, #2]
 8008c04:	4613      	mov	r3, r2
 8008c06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c16:	787c      	ldrb	r4, [r7, #1]
 8008c18:	78ba      	ldrb	r2, [r7, #2]
 8008c1a:	78f9      	ldrb	r1, [r7, #3]
 8008c1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c1e:	9302      	str	r3, [sp, #8]
 8008c20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	4623      	mov	r3, r4
 8008c2e:	f7f8 fe64 	bl	80018fa <HAL_HCD_HC_Init>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 f8b3 	bl	8008da4 <USBH_Get_USB_Status>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd90      	pop	{r4, r7, pc}

08008c4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c66:	78fa      	ldrb	r2, [r7, #3]
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7f8 fed4 	bl	8001a18 <HAL_HCD_HC_Halt>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f894 	bl	8008da4 <USBH_Get_USB_Status>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c8a:	b590      	push	{r4, r7, lr}
 8008c8c:	b089      	sub	sp, #36	; 0x24
 8008c8e:	af04      	add	r7, sp, #16
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	4608      	mov	r0, r1
 8008c94:	4611      	mov	r1, r2
 8008c96:	461a      	mov	r2, r3
 8008c98:	4603      	mov	r3, r0
 8008c9a:	70fb      	strb	r3, [r7, #3]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70bb      	strb	r3, [r7, #2]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008cb2:	787c      	ldrb	r4, [r7, #1]
 8008cb4:	78ba      	ldrb	r2, [r7, #2]
 8008cb6:	78f9      	ldrb	r1, [r7, #3]
 8008cb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008cbc:	9303      	str	r3, [sp, #12]
 8008cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cc0:	9302      	str	r3, [sp, #8]
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	9301      	str	r3, [sp, #4]
 8008cc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	4623      	mov	r3, r4
 8008cce:	f7f8 fec7 	bl	8001a60 <HAL_HCD_HC_SubmitRequest>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 f863 	bl	8008da4 <USBH_Get_USB_Status>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd90      	pop	{r4, r7, pc}

08008cec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	4611      	mov	r1, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f9 f95b 	bl	8001fbe <HAL_HCD_HC_GetURBState>
 8008d08:	4603      	mov	r3, r0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8008d1e:	20c8      	movs	r0, #200	; 0xc8
 8008d20:	f7f8 fae6 	bl	80012f0 <HAL_Delay>
  return USBH_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b085      	sub	sp, #20
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	70fb      	strb	r3, [r7, #3]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d44:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d46:	78fb      	ldrb	r3, [r7, #3]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	212c      	movs	r1, #44	; 0x2c
 8008d4c:	fb01 f303 	mul.w	r3, r1, r3
 8008d50:	4413      	add	r3, r2
 8008d52:	333b      	adds	r3, #59	; 0x3b
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d009      	beq.n	8008d6e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	212c      	movs	r1, #44	; 0x2c
 8008d60:	fb01 f303 	mul.w	r3, r1, r3
 8008d64:	4413      	add	r3, r2
 8008d66:	3354      	adds	r3, #84	; 0x54
 8008d68:	78ba      	ldrb	r2, [r7, #2]
 8008d6a:	701a      	strb	r2, [r3, #0]
 8008d6c:	e008      	b.n	8008d80 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d6e:	78fb      	ldrb	r3, [r7, #3]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	212c      	movs	r1, #44	; 0x2c
 8008d74:	fb01 f303 	mul.w	r3, r1, r3
 8008d78:	4413      	add	r3, r2
 8008d7a:	3355      	adds	r3, #85	; 0x55
 8008d7c:	78ba      	ldrb	r2, [r7, #2]
 8008d7e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7f8 faaa 	bl	80012f0 <HAL_Delay>
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d817      	bhi.n	8008de8 <USBH_Get_USB_Status+0x44>
 8008db8:	a201      	add	r2, pc, #4	; (adr r2, 8008dc0 <USBH_Get_USB_Status+0x1c>)
 8008dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbe:	bf00      	nop
 8008dc0:	08008dd1 	.word	0x08008dd1
 8008dc4:	08008dd7 	.word	0x08008dd7
 8008dc8:	08008ddd 	.word	0x08008ddd
 8008dcc:	08008de3 	.word	0x08008de3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd4:	e00b      	b.n	8008dee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dda:	e008      	b.n	8008dee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	73fb      	strb	r3, [r7, #15]
    break;
 8008de0:	e005      	b.n	8008dee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008de2:	2302      	movs	r3, #2
 8008de4:	73fb      	strb	r3, [r7, #15]
    break;
 8008de6:	e002      	b.n	8008dee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008de8:	2302      	movs	r3, #2
 8008dea:	73fb      	strb	r3, [r7, #15]
    break;
 8008dec:	bf00      	nop
  }
  return usb_status;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <__errno>:
 8008dfc:	4b01      	ldr	r3, [pc, #4]	; (8008e04 <__errno+0x8>)
 8008dfe:	6818      	ldr	r0, [r3, #0]
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20000038 	.word	0x20000038

08008e08 <__libc_init_array>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	4d0d      	ldr	r5, [pc, #52]	; (8008e40 <__libc_init_array+0x38>)
 8008e0c:	4c0d      	ldr	r4, [pc, #52]	; (8008e44 <__libc_init_array+0x3c>)
 8008e0e:	1b64      	subs	r4, r4, r5
 8008e10:	10a4      	asrs	r4, r4, #2
 8008e12:	2600      	movs	r6, #0
 8008e14:	42a6      	cmp	r6, r4
 8008e16:	d109      	bne.n	8008e2c <__libc_init_array+0x24>
 8008e18:	4d0b      	ldr	r5, [pc, #44]	; (8008e48 <__libc_init_array+0x40>)
 8008e1a:	4c0c      	ldr	r4, [pc, #48]	; (8008e4c <__libc_init_array+0x44>)
 8008e1c:	f000 f8f8 	bl	8009010 <_init>
 8008e20:	1b64      	subs	r4, r4, r5
 8008e22:	10a4      	asrs	r4, r4, #2
 8008e24:	2600      	movs	r6, #0
 8008e26:	42a6      	cmp	r6, r4
 8008e28:	d105      	bne.n	8008e36 <__libc_init_array+0x2e>
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e30:	4798      	blx	r3
 8008e32:	3601      	adds	r6, #1
 8008e34:	e7ee      	b.n	8008e14 <__libc_init_array+0xc>
 8008e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3a:	4798      	blx	r3
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	e7f2      	b.n	8008e26 <__libc_init_array+0x1e>
 8008e40:	0800904c 	.word	0x0800904c
 8008e44:	0800904c 	.word	0x0800904c
 8008e48:	0800904c 	.word	0x0800904c
 8008e4c:	08009050 	.word	0x08009050

08008e50 <malloc>:
 8008e50:	4b02      	ldr	r3, [pc, #8]	; (8008e5c <malloc+0xc>)
 8008e52:	4601      	mov	r1, r0
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	f000 b863 	b.w	8008f20 <_malloc_r>
 8008e5a:	bf00      	nop
 8008e5c:	20000038 	.word	0x20000038

08008e60 <free>:
 8008e60:	4b02      	ldr	r3, [pc, #8]	; (8008e6c <free+0xc>)
 8008e62:	4601      	mov	r1, r0
 8008e64:	6818      	ldr	r0, [r3, #0]
 8008e66:	f000 b80b 	b.w	8008e80 <_free_r>
 8008e6a:	bf00      	nop
 8008e6c:	20000038 	.word	0x20000038

08008e70 <memset>:
 8008e70:	4402      	add	r2, r0
 8008e72:	4603      	mov	r3, r0
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d100      	bne.n	8008e7a <memset+0xa>
 8008e78:	4770      	bx	lr
 8008e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e7e:	e7f9      	b.n	8008e74 <memset+0x4>

08008e80 <_free_r>:
 8008e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e82:	2900      	cmp	r1, #0
 8008e84:	d048      	beq.n	8008f18 <_free_r+0x98>
 8008e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e8a:	9001      	str	r0, [sp, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008e92:	bfb8      	it	lt
 8008e94:	18e4      	addlt	r4, r4, r3
 8008e96:	f000 f8ad 	bl	8008ff4 <__malloc_lock>
 8008e9a:	4a20      	ldr	r2, [pc, #128]	; (8008f1c <_free_r+0x9c>)
 8008e9c:	9801      	ldr	r0, [sp, #4]
 8008e9e:	6813      	ldr	r3, [r2, #0]
 8008ea0:	4615      	mov	r5, r2
 8008ea2:	b933      	cbnz	r3, 8008eb2 <_free_r+0x32>
 8008ea4:	6063      	str	r3, [r4, #4]
 8008ea6:	6014      	str	r4, [r2, #0]
 8008ea8:	b003      	add	sp, #12
 8008eaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008eae:	f000 b8a7 	b.w	8009000 <__malloc_unlock>
 8008eb2:	42a3      	cmp	r3, r4
 8008eb4:	d90b      	bls.n	8008ece <_free_r+0x4e>
 8008eb6:	6821      	ldr	r1, [r4, #0]
 8008eb8:	1862      	adds	r2, r4, r1
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	bf04      	itt	eq
 8008ebe:	681a      	ldreq	r2, [r3, #0]
 8008ec0:	685b      	ldreq	r3, [r3, #4]
 8008ec2:	6063      	str	r3, [r4, #4]
 8008ec4:	bf04      	itt	eq
 8008ec6:	1852      	addeq	r2, r2, r1
 8008ec8:	6022      	streq	r2, [r4, #0]
 8008eca:	602c      	str	r4, [r5, #0]
 8008ecc:	e7ec      	b.n	8008ea8 <_free_r+0x28>
 8008ece:	461a      	mov	r2, r3
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	b10b      	cbz	r3, 8008ed8 <_free_r+0x58>
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	d9fa      	bls.n	8008ece <_free_r+0x4e>
 8008ed8:	6811      	ldr	r1, [r2, #0]
 8008eda:	1855      	adds	r5, r2, r1
 8008edc:	42a5      	cmp	r5, r4
 8008ede:	d10b      	bne.n	8008ef8 <_free_r+0x78>
 8008ee0:	6824      	ldr	r4, [r4, #0]
 8008ee2:	4421      	add	r1, r4
 8008ee4:	1854      	adds	r4, r2, r1
 8008ee6:	42a3      	cmp	r3, r4
 8008ee8:	6011      	str	r1, [r2, #0]
 8008eea:	d1dd      	bne.n	8008ea8 <_free_r+0x28>
 8008eec:	681c      	ldr	r4, [r3, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	6053      	str	r3, [r2, #4]
 8008ef2:	4421      	add	r1, r4
 8008ef4:	6011      	str	r1, [r2, #0]
 8008ef6:	e7d7      	b.n	8008ea8 <_free_r+0x28>
 8008ef8:	d902      	bls.n	8008f00 <_free_r+0x80>
 8008efa:	230c      	movs	r3, #12
 8008efc:	6003      	str	r3, [r0, #0]
 8008efe:	e7d3      	b.n	8008ea8 <_free_r+0x28>
 8008f00:	6825      	ldr	r5, [r4, #0]
 8008f02:	1961      	adds	r1, r4, r5
 8008f04:	428b      	cmp	r3, r1
 8008f06:	bf04      	itt	eq
 8008f08:	6819      	ldreq	r1, [r3, #0]
 8008f0a:	685b      	ldreq	r3, [r3, #4]
 8008f0c:	6063      	str	r3, [r4, #4]
 8008f0e:	bf04      	itt	eq
 8008f10:	1949      	addeq	r1, r1, r5
 8008f12:	6021      	streq	r1, [r4, #0]
 8008f14:	6054      	str	r4, [r2, #4]
 8008f16:	e7c7      	b.n	8008ea8 <_free_r+0x28>
 8008f18:	b003      	add	sp, #12
 8008f1a:	bd30      	pop	{r4, r5, pc}
 8008f1c:	200000cc 	.word	0x200000cc

08008f20 <_malloc_r>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	1ccd      	adds	r5, r1, #3
 8008f24:	f025 0503 	bic.w	r5, r5, #3
 8008f28:	3508      	adds	r5, #8
 8008f2a:	2d0c      	cmp	r5, #12
 8008f2c:	bf38      	it	cc
 8008f2e:	250c      	movcc	r5, #12
 8008f30:	2d00      	cmp	r5, #0
 8008f32:	4606      	mov	r6, r0
 8008f34:	db01      	blt.n	8008f3a <_malloc_r+0x1a>
 8008f36:	42a9      	cmp	r1, r5
 8008f38:	d903      	bls.n	8008f42 <_malloc_r+0x22>
 8008f3a:	230c      	movs	r3, #12
 8008f3c:	6033      	str	r3, [r6, #0]
 8008f3e:	2000      	movs	r0, #0
 8008f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f42:	f000 f857 	bl	8008ff4 <__malloc_lock>
 8008f46:	4921      	ldr	r1, [pc, #132]	; (8008fcc <_malloc_r+0xac>)
 8008f48:	680a      	ldr	r2, [r1, #0]
 8008f4a:	4614      	mov	r4, r2
 8008f4c:	b99c      	cbnz	r4, 8008f76 <_malloc_r+0x56>
 8008f4e:	4f20      	ldr	r7, [pc, #128]	; (8008fd0 <_malloc_r+0xb0>)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	b923      	cbnz	r3, 8008f5e <_malloc_r+0x3e>
 8008f54:	4621      	mov	r1, r4
 8008f56:	4630      	mov	r0, r6
 8008f58:	f000 f83c 	bl	8008fd4 <_sbrk_r>
 8008f5c:	6038      	str	r0, [r7, #0]
 8008f5e:	4629      	mov	r1, r5
 8008f60:	4630      	mov	r0, r6
 8008f62:	f000 f837 	bl	8008fd4 <_sbrk_r>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	d123      	bne.n	8008fb2 <_malloc_r+0x92>
 8008f6a:	230c      	movs	r3, #12
 8008f6c:	6033      	str	r3, [r6, #0]
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f000 f846 	bl	8009000 <__malloc_unlock>
 8008f74:	e7e3      	b.n	8008f3e <_malloc_r+0x1e>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	1b5b      	subs	r3, r3, r5
 8008f7a:	d417      	bmi.n	8008fac <_malloc_r+0x8c>
 8008f7c:	2b0b      	cmp	r3, #11
 8008f7e:	d903      	bls.n	8008f88 <_malloc_r+0x68>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	441c      	add	r4, r3
 8008f84:	6025      	str	r5, [r4, #0]
 8008f86:	e004      	b.n	8008f92 <_malloc_r+0x72>
 8008f88:	6863      	ldr	r3, [r4, #4]
 8008f8a:	42a2      	cmp	r2, r4
 8008f8c:	bf0c      	ite	eq
 8008f8e:	600b      	streq	r3, [r1, #0]
 8008f90:	6053      	strne	r3, [r2, #4]
 8008f92:	4630      	mov	r0, r6
 8008f94:	f000 f834 	bl	8009000 <__malloc_unlock>
 8008f98:	f104 000b 	add.w	r0, r4, #11
 8008f9c:	1d23      	adds	r3, r4, #4
 8008f9e:	f020 0007 	bic.w	r0, r0, #7
 8008fa2:	1ac2      	subs	r2, r0, r3
 8008fa4:	d0cc      	beq.n	8008f40 <_malloc_r+0x20>
 8008fa6:	1a1b      	subs	r3, r3, r0
 8008fa8:	50a3      	str	r3, [r4, r2]
 8008faa:	e7c9      	b.n	8008f40 <_malloc_r+0x20>
 8008fac:	4622      	mov	r2, r4
 8008fae:	6864      	ldr	r4, [r4, #4]
 8008fb0:	e7cc      	b.n	8008f4c <_malloc_r+0x2c>
 8008fb2:	1cc4      	adds	r4, r0, #3
 8008fb4:	f024 0403 	bic.w	r4, r4, #3
 8008fb8:	42a0      	cmp	r0, r4
 8008fba:	d0e3      	beq.n	8008f84 <_malloc_r+0x64>
 8008fbc:	1a21      	subs	r1, r4, r0
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f000 f808 	bl	8008fd4 <_sbrk_r>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d1dd      	bne.n	8008f84 <_malloc_r+0x64>
 8008fc8:	e7cf      	b.n	8008f6a <_malloc_r+0x4a>
 8008fca:	bf00      	nop
 8008fcc:	200000cc 	.word	0x200000cc
 8008fd0:	200000d0 	.word	0x200000d0

08008fd4 <_sbrk_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4d06      	ldr	r5, [pc, #24]	; (8008ff0 <_sbrk_r+0x1c>)
 8008fd8:	2300      	movs	r3, #0
 8008fda:	4604      	mov	r4, r0
 8008fdc:	4608      	mov	r0, r1
 8008fde:	602b      	str	r3, [r5, #0]
 8008fe0:	f7f7 fff2 	bl	8000fc8 <_sbrk>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d102      	bne.n	8008fee <_sbrk_r+0x1a>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	b103      	cbz	r3, 8008fee <_sbrk_r+0x1a>
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	200008d8 	.word	0x200008d8

08008ff4 <__malloc_lock>:
 8008ff4:	4801      	ldr	r0, [pc, #4]	; (8008ffc <__malloc_lock+0x8>)
 8008ff6:	f000 b809 	b.w	800900c <__retarget_lock_acquire_recursive>
 8008ffa:	bf00      	nop
 8008ffc:	200008e0 	.word	0x200008e0

08009000 <__malloc_unlock>:
 8009000:	4801      	ldr	r0, [pc, #4]	; (8009008 <__malloc_unlock+0x8>)
 8009002:	f000 b804 	b.w	800900e <__retarget_lock_release_recursive>
 8009006:	bf00      	nop
 8009008:	200008e0 	.word	0x200008e0

0800900c <__retarget_lock_acquire_recursive>:
 800900c:	4770      	bx	lr

0800900e <__retarget_lock_release_recursive>:
 800900e:	4770      	bx	lr

08009010 <_init>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr

0800901c <_fini>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr
